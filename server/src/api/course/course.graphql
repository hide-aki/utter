type Term {
  id: ID
  word: String
  translation: String
  audio: String
}

type Level {
  id: ID
  name: String
  course: Course
  terms: [Term]
}

type Course {
  id: ID!
  courseName: String!
  courseAuthor: User
  courseDescription: String
  courseImage: String
  courseMode: String!
  levels: [Level]
  favorite: Boolean
  teachingLang: String
  usingLang: String
  createdAt: Int
}

input UpdatedCourse {
  id: ID!
  courseId: String
  courseName: String
  coursedescription: String
  courseMode: String
  favorite: Boolean
}

input CreateCourseInput {
  id: ID!
  courseId: String
  courseName: String!
  description: String
  courseMode: String
  favorite: Boolean
}

extend type Query {
  getCourse(id: ID!): Course!
  getCourses(title: String!, ref: String!, author: String!): [Course]
  getCourseCount: Int
}

extend type Mutation {
  createCourse(input: CreateCourseInput!): Course!
  updateCourse(input: UpdatedCourse!): Course!
  removeCourse(id: ID!): Boolean
}
