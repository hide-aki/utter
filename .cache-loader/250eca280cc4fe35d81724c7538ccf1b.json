{"remainingRequest":"/var/www/html/utter/node_modules/react-hot-loader/webpack.js!/var/www/html/utter/node_modules/babel-loader/lib/index.js!/var/www/html/utter/client/src/services/socketio/actions.js","dependencies":[{"path":"/var/www/html/utter/client/src/services/socketio/actions.js","mtime":1515283527573},{"path":"/var/www/html/utter/.babelrc","mtime":1518822814526},{"path":"/var/www/html/utter/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/var/www/html/utter/node_modules/react-hot-loader/webpack.js","mtime":1510167650000},{"path":"/var/www/html/utter/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendRoomMeta = exports.sendMsg = exports.sendAudioBlob = exports.receiveAudioBlob = exports.receiveRoomMeta = exports.receiveMsg = exports.nspConnect = exports.loadSocketNsps = exports.loadAudioBlob = exports.joinRoom = exports.getRooms = exports.deleteAudioBlob = exports.createRoom = undefined;\n\nvar _types = require('./types.js');\n\nvar _socket = require('socket.io-client');\n\nvar _socket2 = _interopRequireDefault(_socket);\n\nvar _socket3 = require('socket.io-stream');\n\nvar _socket4 = _interopRequireDefault(_socket3);\n\nvar _actions = require('../../containers/Chat/actions.js');\n\nvar _actions2 = require('../../containers/Pictures/actions.js');\n\nvar _actions3 = require('../../containers/Rooms/actions.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar stream = _socket4.default.createStream();\n\n\nvar createRoom = function createRoom(room) {\n  return {\n    type: 'socket',\n    types: [_types.CREATE_ROOM, _types.CREATE_ROOM_SUCCESS, _types.CREATE_ROOM_FAIL],\n    promise: function promise(socket) {\n      return socket.emit('create room', room);\n    }\n  };\n};\n\nvar deleteAudioBlob = function deleteAudioBlob(blob) {\n  return {\n    type: _types.DELETE_AUDIO_BLOB,\n    blob: blob\n  };\n};\n\nvar getRooms = function getRooms() {\n  return {\n    type: 'socket',\n    types: [_types.GET_ROOMS, _types.GET_ROOMS_SUCCESS, _types.GET_ROOMS_FAIL],\n    promise: function promise(socket) {\n      return socket.emit('get rooms');\n    }\n  };\n};\n\nvar joinRoom = function joinRoom(room) {\n  return {\n    type: 'socket',\n    types: [_types.JOIN_ROOM, _types.JOIN_ROOM_SUCCESS, _types.JOIN_ROOM_FAIL],\n    promise: function promise(socket) {\n      return socket.emit('join room', room);\n    }\n  };\n};\n\nvar loadAudioBlob = function loadAudioBlob(blob) {\n  return {\n    type: _types.LOAD_AUDIO_BLOB,\n    blob: blob\n  };\n};\n\n//TODO: remove this action?\nvar loadSocketNsps = function loadSocketNsps(socket) {\n  return {\n    type: 'socket',\n    types: [_types.LOAD_SOCKET_NSPS, _types.LOAD_SOCKET_NSPS_SUCCESS, _types.LOAD_SOCKET_NSPS_FAIL],\n    promise: function promise(socket) {\n      return socket.connect();\n    }\n  };\n};\n\nvar nspConnect = function nspConnect(namespace) {\n  return {\n    type: 'socket',\n    types: [_types.GET_ROOMS, _types.GET_ROOMS_SUCCESS, _types.GET_ROOMS_FAIL],\n    promise: function promise(socket) {\n      return socket.nspConnect(namespace);\n    }\n  };\n};\n\nvar receiveAudioBlob = function receiveAudioBlob(data) {\n  return function (dispatch) {\n    dispatch({\n      type: 'socket',\n      types: [_types.RECEIVE_AUDIO_BLOB, _types.RECEIVE_AUDIO_BLOB_SUCCESS, _types.RECEIVE_AUDIO_BLOB_FAIL],\n      promise: function promise(socket) {\n        return socket.on('receive audio blob', data).then(function (result) {\n          dispatch((0, _actions.addAudio)({\n            author: result.audio.author,\n            dataUrl: result.audio.dataUrl\n          }));\n        });\n      }\n    });\n  };\n};\n\nvar receiveMsg = function receiveMsg(body) {\n  return function (dispatch) {\n    dispatch({\n      type: 'socket',\n      types: [_types.RECEIVE_MSG, _types.RECEIVE_MSG_SUCCESS, _types.RECEIVE_MSG_FAIL],\n      promise: function promise(socket) {\n        return socket.on('receive  msg', body).then(function (result) {\n          dispatch((0, _actions.addMsg)({ author: result.author, msg: result.msg }));\n        });\n      }\n    });\n  };\n};\n\nvar receiveRoomMeta = function receiveRoomMeta(meta) {\n  return function (dispatch) {\n    dispatch({\n      type: 'socket',\n      types: [_types.RECEIVE_ROOM_META, _types.RECEIVE_ROOM_META_SUCCESS, _types.RECEIVE_ROOM_META_FAIL],\n      promise: function promise(socket) {\n        return socket.on('receive room meta', meta).then(function (result) {\n          dispatch((0, _actions2.loadQuestion)(result.question));\n          dispatch((0, _actions2.updatePicture)(result.src));\n          dispatch((0, _actions3.loadListType)(result.listType));\n          dispatch((0, _actions2.updateTranslation)(result.translation));\n        });\n      }\n    });\n  };\n};\n\nvar sendAudioBlob = function sendAudioBlob(files) {\n  return {\n    type: 'socket',\n    types: [_types.SEND_AUDIO_BLOB, _types.SEND_AUDIO_BLOB_SUCCESS, _types.SEND_AUDIO_BLOB_FAIL],\n    promise: function promise(socket) {\n      return socket.emit('send audio blob', files);\n    }\n  };\n};\n\nvar sendMsg = function sendMsg(msg) {\n  return {\n    type: 'socket',\n    types: [_types.SEND_MSG, _types.SEND_MSG_SUCCESS, _types.SEND_MSG_FAIL],\n    promise: function promise(socket) {\n      return socket.emit('send msg', msg);\n    }\n  };\n};\n\nvar sendRoomMeta = function sendRoomMeta(meta) {\n  return {\n    type: 'socket',\n    types: [_types.SEND_ROOM_META, _types.SEND_ROOM_META_SUCCESS, _types.SEND_ROOM_META_FAIL],\n    promise: function promise(socket) {\n      return socket.emit('send room meta', meta);\n    }\n  };\n};\n\nexports.createRoom = createRoom;\nexports.deleteAudioBlob = deleteAudioBlob;\nexports.getRooms = getRooms;\nexports.joinRoom = joinRoom;\nexports.loadAudioBlob = loadAudioBlob;\nexports.loadSocketNsps = loadSocketNsps;\nexports.nspConnect = nspConnect;\nexports.receiveMsg = receiveMsg;\nexports.receiveRoomMeta = receiveRoomMeta;\nexports.receiveAudioBlob = receiveAudioBlob;\nexports.sendAudioBlob = sendAudioBlob;\nexports.sendMsg = sendMsg;\nexports.sendRoomMeta = sendRoomMeta;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(stream, 'stream', '/var/www/html/utter/client/src/services/socketio/actions.js');\n\n  __REACT_HOT_LOADER__.register(createRoom, 'createRoom', '/var/www/html/utter/client/src/services/socketio/actions.js');\n\n  __REACT_HOT_LOADER__.register(deleteAudioBlob, 'deleteAudioBlob', '/var/www/html/utter/client/src/services/socketio/actions.js');\n\n  __REACT_HOT_LOADER__.register(getRooms, 'getRooms', '/var/www/html/utter/client/src/services/socketio/actions.js');\n\n  __REACT_HOT_LOADER__.register(joinRoom, 'joinRoom', '/var/www/html/utter/client/src/services/socketio/actions.js');\n\n  __REACT_HOT_LOADER__.register(loadAudioBlob, 'loadAudioBlob', '/var/www/html/utter/client/src/services/socketio/actions.js');\n\n  __REACT_HOT_LOADER__.register(loadSocketNsps, 'loadSocketNsps', '/var/www/html/utter/client/src/services/socketio/actions.js');\n\n  __REACT_HOT_LOADER__.register(nspConnect, 'nspConnect', '/var/www/html/utter/client/src/services/socketio/actions.js');\n\n  __REACT_HOT_LOADER__.register(receiveAudioBlob, 'receiveAudioBlob', '/var/www/html/utter/client/src/services/socketio/actions.js');\n\n  __REACT_HOT_LOADER__.register(receiveMsg, 'receiveMsg', '/var/www/html/utter/client/src/services/socketio/actions.js');\n\n  __REACT_HOT_LOADER__.register(receiveRoomMeta, 'receiveRoomMeta', '/var/www/html/utter/client/src/services/socketio/actions.js');\n\n  __REACT_HOT_LOADER__.register(sendAudioBlob, 'sendAudioBlob', '/var/www/html/utter/client/src/services/socketio/actions.js');\n\n  __REACT_HOT_LOADER__.register(sendMsg, 'sendMsg', '/var/www/html/utter/client/src/services/socketio/actions.js');\n\n  __REACT_HOT_LOADER__.register(sendRoomMeta, 'sendRoomMeta', '/var/www/html/utter/client/src/services/socketio/actions.js');\n}();\n\n;\n\n ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', \"/var/www/html/utter/client/src/services/socketio/actions.js\"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, \"/var/www/html/utter/client/src/services/socketio/actions.js\"); } } })();","{\"version\":3,\"sources\":[\"/var/www/html/utter/client/src/services/socketio/actions.js\"],\"names\":[\"stream\",\"createStream\",\"createRoom\",\"type\",\"types\",\"promise\",\"socket\",\"emit\",\"room\",\"deleteAudioBlob\",\"blob\",\"getRooms\",\"joinRoom\",\"loadAudioBlob\",\"loadSocketNsps\",\"connect\",\"nspConnect\",\"namespace\",\"receiveAudioBlob\",\"dispatch\",\"on\",\"data\",\"then\",\"author\",\"result\",\"audio\",\"dataUrl\",\"receiveMsg\",\"body\",\"msg\",\"receiveRoomMeta\",\"meta\",\"question\",\"src\",\"listType\",\"translation\",\"sendAudioBlob\",\"files\",\"sendMsg\",\"sendRoomMeta\"],\"mappings\":\"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\",\"sourcesContent\":[\"import {\\n  CREATE_ROOM,\\n  CREATE_ROOM_FAIL,\\n  CREATE_ROOM_SUCCESS,\\n  DELETE_AUDIO_BLOB,\\n  GET_ROOMS,\\n  GET_ROOMS_FAIL,\\n  GET_ROOMS_SUCCESS,\\n  JOIN_ROOM,\\n  JOIN_ROOM_FAIL,\\n  JOIN_ROOM_SUCCESS,\\n  LOAD_AUDIO_BLOB,\\n  LOAD_SOCKET_NSPS,\\n  LOAD_SOCKET_NSPS_FAIL,\\n  LOAD_SOCKET_NSPS_SUCCESS,\\n  NSP_CONNECT,\\n  NSP_CONNECT_FAIL,\\n  NSP_CONNECT_SUCCESS,\\n  RECEIVE_AUDIO_BLOB,\\n  RECEIVE_AUDIO_BLOB_FAIL,\\n  RECEIVE_AUDIO_BLOB_SUCCESS,\\n  RECEIVE_MSG,\\n  RECEIVE_MSG_FAIL,\\n  RECEIVE_MSG_SUCCESS,\\n  RECEIVE_ROOM_META,\\n  RECEIVE_ROOM_META_FAIL,\\n  RECEIVE_ROOM_META_SUCCESS,\\n  SEND_AUDIO_BLOB,\\n  SEND_AUDIO_BLOB_FAIL,\\n  SEND_AUDIO_BLOB_SUCCESS,\\n  SEND_MSG,\\n  SEND_MSG_FAIL,\\n  SEND_MSG_SUCCESS,\\n  SEND_ROOM_META,\\n  SEND_ROOM_META_FAIL,\\n  SEND_ROOM_META_SUCCESS\\n} from './types.js'\\n\\nimport io from 'socket.io-client'\\nimport ss from 'socket.io-stream'\\nconst stream = ss.createStream()\\nimport {addAudio, addMsg} from '../../containers/Chat/actions.js'\\nimport {\\n  loadQuestion,\\n  updatePicture,\\n  updateTranslation\\n} from '../../containers/Pictures/actions.js'\\nimport {loadListType} from '../../containers/Rooms/actions.js'\\n\\nconst createRoom = room => {\\n  return {\\n    type: 'socket',\\n    types: [CREATE_ROOM, CREATE_ROOM_SUCCESS, CREATE_ROOM_FAIL],\\n    promise: socket => socket.emit('create room', room)\\n  }\\n}\\n\\nconst deleteAudioBlob = blob => {\\n  return {\\n    type: DELETE_AUDIO_BLOB,\\n    blob\\n  }\\n}\\n\\nconst getRooms = () => {\\n  return {\\n    type: 'socket',\\n    types: [GET_ROOMS, GET_ROOMS_SUCCESS, GET_ROOMS_FAIL],\\n    promise: socket => socket.emit('get rooms')\\n  }\\n}\\n\\nconst joinRoom = room => {\\n  return {\\n    type: 'socket',\\n    types: [JOIN_ROOM, JOIN_ROOM_SUCCESS, JOIN_ROOM_FAIL],\\n    promise: socket => socket.emit('join room', room)\\n  }\\n}\\n\\nconst loadAudioBlob = blob => {\\n  return {\\n    type: LOAD_AUDIO_BLOB,\\n    blob\\n  }\\n}\\n\\n//TODO: remove this action?\\nconst loadSocketNsps = socket => {\\n  return {\\n    type: 'socket',\\n    types: [LOAD_SOCKET_NSPS, LOAD_SOCKET_NSPS_SUCCESS, LOAD_SOCKET_NSPS_FAIL],\\n    promise: socket => socket.connect()\\n  }\\n}\\n\\nconst nspConnect = namespace => {\\n  return {\\n    type: 'socket',\\n    types: [GET_ROOMS, GET_ROOMS_SUCCESS, GET_ROOMS_FAIL],\\n    promise: socket => socket.nspConnect(namespace)\\n  }\\n}\\n\\nconst receiveAudioBlob = data => {\\n  return dispatch => {\\n    dispatch({\\n      type: 'socket',\\n      types: [\\n        RECEIVE_AUDIO_BLOB,\\n        RECEIVE_AUDIO_BLOB_SUCCESS,\\n        RECEIVE_AUDIO_BLOB_FAIL\\n      ],\\n      promise: socket =>\\n        socket.on('receive audio blob', data).then(result => {\\n          dispatch(\\n            addAudio({\\n              author: result.audio.author,\\n              dataUrl: result.audio.dataUrl\\n            })\\n          )\\n        })\\n    })\\n  }\\n}\\n\\nconst receiveMsg = body => {\\n  return dispatch => {\\n    dispatch({\\n      type: 'socket',\\n      types: [RECEIVE_MSG, RECEIVE_MSG_SUCCESS, RECEIVE_MSG_FAIL],\\n      promise: socket =>\\n        socket.on('receive  msg', body).then(result => {\\n          dispatch(addMsg({author: result.author, msg: result.msg}))\\n        })\\n    })\\n  }\\n}\\n\\nconst receiveRoomMeta = meta => {\\n  return dispatch => {\\n    dispatch({\\n      type: 'socket',\\n      types: [\\n        RECEIVE_ROOM_META,\\n        RECEIVE_ROOM_META_SUCCESS,\\n        RECEIVE_ROOM_META_FAIL\\n      ],\\n      promise: socket =>\\n        socket.on('receive room meta', meta).then(result => {\\n          dispatch(loadQuestion(result.question))\\n          dispatch(updatePicture(result.src))\\n          dispatch(loadListType(result.listType))\\n          dispatch(updateTranslation(result.translation))\\n        })\\n    })\\n  }\\n}\\n\\nconst sendAudioBlob = files => {\\n  return {\\n    type: 'socket',\\n    types: [SEND_AUDIO_BLOB, SEND_AUDIO_BLOB_SUCCESS, SEND_AUDIO_BLOB_FAIL],\\n    promise: socket => socket.emit('send audio blob', files)\\n  }\\n}\\n\\nconst sendMsg = msg => {\\n  return {\\n    type: 'socket',\\n    types: [SEND_MSG, SEND_MSG_SUCCESS, SEND_MSG_FAIL],\\n    promise: socket => socket.emit('send msg', msg)\\n  }\\n}\\n\\nconst sendRoomMeta = meta => {\\n  return {\\n    type: 'socket',\\n    types: [SEND_ROOM_META, SEND_ROOM_META_SUCCESS, SEND_ROOM_META_FAIL],\\n    promise: socket => socket.emit('send room meta', meta)\\n  }\\n}\\n\\nexport {\\n  createRoom,\\n  deleteAudioBlob,\\n  getRooms,\\n  joinRoom,\\n  loadAudioBlob,\\n  loadSocketNsps,\\n  nspConnect,\\n  receiveMsg,\\n  receiveRoomMeta,\\n  receiveAudioBlob,\\n  sendAudioBlob,\\n  sendMsg,\\n  sendRoomMeta\\n}\\n\"]}"]}