{"remainingRequest":"/var/www/html/utter/node_modules/react-hot-loader/webpack.js!/var/www/html/utter/node_modules/babel-loader/lib/index.js!/var/www/html/utter/client/src/store.js","dependencies":[{"path":"/var/www/html/utter/client/src/store.js","mtime":1520278789553},{"path":"/var/www/html/utter/.babelrc","mtime":1518822814526},{"path":"/var/www/html/utter/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/var/www/html/utter/node_modules/react-hot-loader/webpack.js","mtime":1510167650000},{"path":"/var/www/html/utter/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.persistor = exports.store = undefined;\n\nvar _redux = require('redux');\n\nvar _rootReducer = require('./rootReducer');\n\nvar _rootReducer2 = _interopRequireDefault(_rootReducer);\n\nvar _setAuthorizationToken = require('./utils/setAuthorizationToken.js');\n\nvar _setAuthorizationToken2 = _interopRequireDefault(_setAuthorizationToken);\n\nvar _authActions = require('./actions/authActions.js');\n\nvar _jsonwebtoken = require('jsonwebtoken');\n\nvar _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);\n\nvar _socketio = require('./services/socketio');\n\nvar _socketio2 = _interopRequireDefault(_socketio);\n\nvar _rootSaga = require('./rootSaga.js');\n\nvar _rootSaga2 = _interopRequireDefault(_rootSaga);\n\nvar _history = require('./history.js');\n\nvar _history2 = _interopRequireDefault(_history);\n\nvar _reactRouterRedux = require('react-router-redux');\n\nvar _reduxPersist = require('redux-persist');\n\nvar _storage = require('redux-persist/lib/storage');\n\nvar _storage2 = _interopRequireDefault(_storage);\n\nvar _reduxSaga = require('redux-saga');\n\nvar _reduxSaga2 = _interopRequireDefault(_reduxSaga);\n\nvar _reduxThunk = require('redux-thunk');\n\nvar _reduxThunk2 = _interopRequireDefault(_reduxThunk);\n\nvar _reduxPromiseMiddleware = require('redux-promise-middleware');\n\nvar _reduxPromiseMiddleware2 = _interopRequireDefault(_reduxPromiseMiddleware);\n\nvar _reduxSocketio = require('redux-socketio');\n\nvar _reduxSocketio2 = _interopRequireDefault(_reduxSocketio);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Socket = new _socketio2.default();\n\nvar middleware = (0, _reactRouterRedux.routerMiddleware)(_history2.default);\n\n// redux-persist\n// defaults to localStorage\nvar persistConfig = {\n  key: 'root',\n  storage: _storage2.default\n};\n\nvar persistedReducer = (0, _reduxPersist.persistReducer)(persistConfig, _rootReducer2.default);\n\n// redux middleware\n// import {createLogger} from 'redux-logger'\n// TODO: currently grabbing from npm globally(npm link redux-socketio), need to unlink once it's production ready and download the npm module\n\n// redux-dev tools requirement\nvar composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;\n\n// OPTION: add this line to your middleware args if you want to use redux logger\n// createLogger({collapsed: true}),\nvar sagaMiddleware = (0, _reduxSaga2.default)();\n\nvar store = (0, _redux.createStore)(persistedReducer,\n/* preloadedState, */composeEnhancers((0, _redux.applyMiddleware)(middleware, (0, _reduxSocketio2.default)(Socket), _reduxThunk2.default, (0, _reduxPromiseMiddleware2.default)(), sagaMiddleware)));\n\nvar persistor = (0, _reduxPersist.persistStore)(store);\n\nif (localStorage.jwtToken) {\n  (0, _setAuthorizationToken2.default)(localStorage.jwtToken);\n  store.dispatch((0, _authActions.setCurrentUser)(_jsonwebtoken2.default.decode(localStorage.jwtToken)));\n}\n\nsagaMiddleware.run(_rootSaga2.default);\n\nexports.store = store;\nexports.persistor = persistor;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Socket, 'Socket', '/var/www/html/utter/client/src/store.js');\n\n  __REACT_HOT_LOADER__.register(middleware, 'middleware', '/var/www/html/utter/client/src/store.js');\n\n  __REACT_HOT_LOADER__.register(persistConfig, 'persistConfig', '/var/www/html/utter/client/src/store.js');\n\n  __REACT_HOT_LOADER__.register(persistedReducer, 'persistedReducer', '/var/www/html/utter/client/src/store.js');\n\n  __REACT_HOT_LOADER__.register(composeEnhancers, 'composeEnhancers', '/var/www/html/utter/client/src/store.js');\n\n  __REACT_HOT_LOADER__.register(sagaMiddleware, 'sagaMiddleware', '/var/www/html/utter/client/src/store.js');\n\n  __REACT_HOT_LOADER__.register(store, 'store', '/var/www/html/utter/client/src/store.js');\n\n  __REACT_HOT_LOADER__.register(persistor, 'persistor', '/var/www/html/utter/client/src/store.js');\n}();\n\n;\n\n ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', \"/var/www/html/utter/client/src/store.js\"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, \"/var/www/html/utter/client/src/store.js\"); } } })();","{\"version\":3,\"sources\":[\"/var/www/html/utter/client/src/store.js\"],\"names\":[\"Socket\",\"middleware\",\"persistConfig\",\"key\",\"storage\",\"persistedReducer\",\"composeEnhancers\",\"window\",\"__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\",\"sagaMiddleware\",\"store\",\"persistor\",\"localStorage\",\"jwtToken\",\"dispatch\",\"decode\",\"run\"],\"mappings\":\";;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;AAIA;;AACA;;;;AAUA;;;;AACA;;;;AACA;;;;AACA;;;;;;AApBA,IAAMA,SAAS,wBAAf;;AAGA,IAAMC,aAAa,0DAAnB;;AAEA;AAEgD;AAChD,IAAMC,gBAAgB;AACpBC,OAAK,MADe;AAEpBC;AAFoB,CAAtB;;AAKA,IAAMC,mBAAmB,kCAAeH,aAAf,wBAAzB;;AAEA;AACA;AAI0C;;AAE1C;AACA,IAAMI,mBAAmBC,OAAOC,oCAAP,kBAAzB;;AAEA;AACA;AACA,IAAMC,iBAAiB,0BAAvB;;AAEA,IAAIC,QAAQ,wBACVL,gBADU;AAEV,qBAAsBC,iBACpB,4BACEL,UADF,EAEE,6BAAaD,MAAb,CAFF,wBAIE,uCAJF,EAKES,cALF,CADoB,CAFZ,CAAZ;;AAaA,IAAIE,YAAY,gCAAaD,KAAb,CAAhB;;AAEA,IAAIE,aAAaC,QAAjB,EAA2B;AACzB,uCAAsBD,aAAaC,QAAnC;AACAH,QAAMI,QAAN,CAAe,iCAAe,uBAAIC,MAAJ,CAAWH,aAAaC,QAAxB,CAAf,CAAf;AACD;;AAEDJ,eAAeO,GAAf;;QAEQN,K,GAAAA,K;QAAOC,S,GAAAA,S;;;;;;;;gCAnDTX,M;;gCAGAC,U;;gCAKAC,a;;gCAKAG,gB;;gCAUAC,gB;;gCAIAG,c;;gCAEFC,K;;gCAaAC,S\",\"sourcesContent\":[\"import {createStore, applyMiddleware, compose} from 'redux'\\nimport rootReducer from './rootReducer'\\nimport setAuthorizationToken from './utils/setAuthorizationToken.js'\\nimport {setCurrentUser} from './actions/authActions.js'\\nimport jwt from 'jsonwebtoken'\\nimport SocketIO from './services/socketio'\\nimport rootSaga from './rootSaga.js'\\nconst Socket = new SocketIO()\\nimport history from './history.js'\\nimport {routerMiddleware} from 'react-router-redux'\\nconst middleware = routerMiddleware(history)\\n\\n// redux-persist\\nimport {persistStore, persistReducer} from 'redux-persist'\\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage\\nconst persistConfig = {\\n  key: 'root',\\n  storage\\n}\\n\\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\\n\\n// redux middleware\\n// import {createLogger} from 'redux-logger'\\nimport createSagaMiddleware from 'redux-saga'\\nimport thunk from 'redux-thunk'\\nimport promise from 'redux-promise-middleware'\\nimport ioMiddleware from 'redux-socketio' // TODO: currently grabbing from npm globally(npm link redux-socketio), need to unlink once it's production ready and download the npm module\\n\\n// redux-dev tools requirement\\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\\n\\n// OPTION: add this line to your middleware args if you want to use redux logger\\n// createLogger({collapsed: true}),\\nconst sagaMiddleware = createSagaMiddleware()\\n\\nlet store = createStore(\\n  persistedReducer,\\n  /* preloadedState, */ composeEnhancers(\\n    applyMiddleware(\\n      middleware,\\n      ioMiddleware(Socket),\\n      thunk,\\n      promise(),\\n      sagaMiddleware\\n    )\\n  )\\n)\\n\\nlet persistor = persistStore(store)\\n\\nif (localStorage.jwtToken) {\\n  setAuthorizationToken(localStorage.jwtToken)\\n  store.dispatch(setCurrentUser(jwt.decode(localStorage.jwtToken)))\\n}\\n\\nsagaMiddleware.run(rootSaga)\\n\\nexport {store, persistor}\\n\"]}"]}