{"remainingRequest":"/var/www/html/utter/node_modules/react-hot-loader/webpack.js!/var/www/html/utter/node_modules/babel-loader/lib/index.js!/var/www/html/utter/client/src/store.js","dependencies":[{"path":"/var/www/html/utter/client/src/store.js","mtime":1519608499253},{"path":"/var/www/html/utter/.babelrc","mtime":1518822814526},{"path":"/var/www/html/utter/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/var/www/html/utter/node_modules/react-hot-loader/webpack.js","mtime":1510167650000},{"path":"/var/www/html/utter/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _redux = require('redux');\n\nvar _rootReducer = require('./rootReducer');\n\nvar _rootReducer2 = _interopRequireDefault(_rootReducer);\n\nvar _setAuthorizationToken = require('./utils/setAuthorizationToken.js');\n\nvar _setAuthorizationToken2 = _interopRequireDefault(_setAuthorizationToken);\n\nvar _authActions = require('./actions/authActions.js');\n\nvar _jsonwebtoken = require('jsonwebtoken');\n\nvar _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);\n\nvar _socketio = require('./services/socketio');\n\nvar _socketio2 = _interopRequireDefault(_socketio);\n\nvar _rootSaga = require('./rootSaga.js');\n\nvar _rootSaga2 = _interopRequireDefault(_rootSaga);\n\nvar _reduxSaga = require('redux-saga');\n\nvar _reduxSaga2 = _interopRequireDefault(_reduxSaga);\n\nvar _reduxThunk = require('redux-thunk');\n\nvar _reduxThunk2 = _interopRequireDefault(_reduxThunk);\n\nvar _reduxPromiseMiddleware = require('redux-promise-middleware');\n\nvar _reduxPromiseMiddleware2 = _interopRequireDefault(_reduxPromiseMiddleware);\n\nvar _reduxSocketio = require('redux-socketio');\n\nvar _reduxSocketio2 = _interopRequireDefault(_reduxSocketio);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Socket = new _socketio2.default();\n\n// redux middleware\n// import {createLogger} from 'redux-logger'\n// TODO: currently grabbing from npm globally(npm link redux-socketio), need to unlink once it's production ready and download the npm module\n\n// redux-dev tools requirement\nvar composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;\n\n// OPTION: add this line to your middleware args if you want to use redux logger\n// createLogger({collapsed: true}),\nvar sagaMiddleware = (0, _reduxSaga2.default)();\nvar store = (0, _redux.createStore)(_rootReducer2.default,\n/* preloadedState, */composeEnhancers((0, _redux.applyMiddleware)((0, _reduxSocketio2.default)(Socket), _reduxThunk2.default, (0, _reduxPromiseMiddleware2.default)(), sagaMiddleware)));\n\nif (localStorage.jwtToken) {\n  (0, _setAuthorizationToken2.default)(localStorage.jwtToken);\n  store.dispatch((0, _authActions.setCurrentUser)(_jsonwebtoken2.default.decode(localStorage.jwtToken)));\n}\n\nsagaMiddleware.run(_rootSaga2.default);\n\nvar _default = store;\nexports.default = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Socket, 'Socket', '/var/www/html/utter/client/src/store.js');\n\n  __REACT_HOT_LOADER__.register(composeEnhancers, 'composeEnhancers', '/var/www/html/utter/client/src/store.js');\n\n  __REACT_HOT_LOADER__.register(sagaMiddleware, 'sagaMiddleware', '/var/www/html/utter/client/src/store.js');\n\n  __REACT_HOT_LOADER__.register(store, 'store', '/var/www/html/utter/client/src/store.js');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/var/www/html/utter/client/src/store.js');\n}();\n\n;\n\n ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', \"/var/www/html/utter/client/src/store.js\"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, \"/var/www/html/utter/client/src/store.js\"); } } })();","{\"version\":3,\"sources\":[\"/var/www/html/utter/client/src/store.js\"],\"names\":[\"Socket\",\"composeEnhancers\",\"window\",\"__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\",\"sagaMiddleware\",\"store\",\"localStorage\",\"jwtToken\",\"dispatch\",\"decode\",\"run\"],\"mappings\":\";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAKA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAPA,IAAMA,SAAS,wBAAf;;AAEA;AACA;AAI0C;;AAE1C;AACA,IAAMC,mBAAmBC,OAAOC,oCAAP,kBAAzB;;AAEA;AACA;AACA,IAAMC,iBAAiB,0BAAvB;AACA,IAAMC,QAAQ;AAEZ,qBAAsBJ,iBACpB,4BAAgB,6BAAaD,MAAb,CAAhB,wBAA6C,uCAA7C,EAAwDI,cAAxD,CADoB,CAFV,CAAd;;AAOA,IAAIE,aAAaC,QAAjB,EAA2B;AACzB,uCAAsBD,aAAaC,QAAnC;AACAF,QAAMG,QAAN,CAAe,iCAAe,uBAAIC,MAAJ,CAAWH,aAAaC,QAAxB,CAAf,CAAf;AACD;;AAEDH,eAAeM,GAAf;;eAEeL,K;;;;;;;;;gCA7BTL,M;;gCAUAC,gB;;gCAIAG,c;;gCACAC,K\",\"sourcesContent\":[\"import {createStore, applyMiddleware, compose} from 'redux'\\nimport rootReducer from './rootReducer'\\nimport setAuthorizationToken from './utils/setAuthorizationToken.js'\\nimport {setCurrentUser} from './actions/authActions.js'\\nimport jwt from 'jsonwebtoken'\\nimport SocketIO from './services/socketio'\\nimport rootSaga from './rootSaga.js'\\nconst Socket = new SocketIO()\\n\\n// redux middleware\\n// import {createLogger} from 'redux-logger'\\nimport createSagaMiddleware from 'redux-saga'\\nimport thunk from 'redux-thunk'\\nimport promise from 'redux-promise-middleware'\\nimport ioMiddleware from 'redux-socketio' // TODO: currently grabbing from npm globally(npm link redux-socketio), need to unlink once it's production ready and download the npm module\\n\\n// redux-dev tools requirement\\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\\n\\n// OPTION: add this line to your middleware args if you want to use redux logger\\n// createLogger({collapsed: true}),\\nconst sagaMiddleware = createSagaMiddleware()\\nconst store = createStore(\\n  rootReducer,\\n  /* preloadedState, */ composeEnhancers(\\n    applyMiddleware(ioMiddleware(Socket), thunk, promise(), sagaMiddleware)\\n  )\\n)\\n\\nif (localStorage.jwtToken) {\\n  setAuthorizationToken(localStorage.jwtToken)\\n  store.dispatch(setCurrentUser(jwt.decode(localStorage.jwtToken)))\\n}\\n\\nsagaMiddleware.run(rootSaga)\\n\\nexport default store\\n\"]}"]}