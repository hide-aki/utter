{"remainingRequest":"/var/www/html/utter/node_modules/react-hot-loader/webpack.js!/var/www/html/utter/node_modules/babel-loader/lib/index.js!/var/www/html/utter/client/src/utils/rfValidation/courseCreate.js","dependencies":[{"path":"/var/www/html/utter/client/src/utils/rfValidation/courseCreate.js","mtime":1518732171135},{"path":"/var/www/html/utter/.babelrc","mtime":1518188302531},{"path":"/var/www/html/utter/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/var/www/html/utter/node_modules/react-hot-loader/webpack.js","mtime":1510167650000},{"path":"/var/www/html/utter/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _index = require('../../layouts/Courses/actions/index.js');\n\nvar sleep = function sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n};\n\nexports.validate = function (values) {\n  var errors = {};\n  if (!values.courseName) {\n    errors.courseName = 'This field is required';\n  } else if (values.courseName.length > 100 || values.courseName.length < 10) {\n    errors.courseName = 'Course name needs to be 10 to 100 characters in length.';\n  }\n  if (!values.courseDescription) {\n    errors.courseDescription = 'This field is required';\n  } else if (values.courseDescription.length > 350 || values.courseDescription.length < 100) {\n    errors.courseDescription = 'Course description needs to be 100 to 350 characters in length.';\n  }\n  return errors;\n};\n\nexports.asyncValidate = function (values, dispatch) {\n  return new Promise(function (resolve, reject) {\n    dispatch((0, _index.courseNameUnique)(values.courseName)).then(function (result) {\n      console.log('result: ', result);\n      // if (result.data.code !== 200)\n      // reject({courseName: 'That username is taken'})\n      // else resolve()\n    });\n  });\n};\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(sleep, 'sleep', '/var/www/html/utter/client/src/utils/rfValidation/courseCreate.js');\n}();\n\n;\n\n ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', \"/var/www/html/utter/client/src/utils/rfValidation/courseCreate.js\"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, \"/var/www/html/utter/client/src/utils/rfValidation/courseCreate.js\"); } } })();","{\"version\":3,\"sources\":[\"/var/www/html/utter/client/src/utils/rfValidation/courseCreate.js\"],\"names\":[\"sleep\",\"Promise\",\"setTimeout\",\"resolve\",\"ms\",\"exports\",\"validate\",\"errors\",\"values\",\"courseName\",\"length\",\"courseDescription\",\"asyncValidate\",\"dispatch\",\"reject\",\"then\",\"console\",\"log\",\"result\"],\"mappings\":\";;AAAA;;AACA,IAAMA,QAAQ,SAARA,KAAQ;AAAA,SAAM,IAAIC,OAAJ,CAAY;AAAA,WAAWC,WAAWC,OAAX,EAAoBC,EAApB,CAAX;AAAA,GAAZ,CAAN;AAAA,CAAd;;AAEAC,QAAQC,QAAR,GAAmB,kBAAU;AAC3B,MAAMC,SAAS,EAAf;AACA,MAAI,CAACC,OAAOC,UAAZ,EAAwB;AACtBF,WAAOE,UAAP,GAAoB,wBAApB;AACD,GAFD,MAEO,IAAID,OAAOC,UAAP,CAAkBC,MAAlB,GAA2B,GAA3B,IAAkCF,OAAOC,UAAP,CAAkBC,MAAlB,GAA2B,EAAjE,EAAqE;AAC1EH,WAAOE,UAAP,GACE,yDADF;AAED;AACD,MAAI,CAACD,OAAOG,iBAAZ,EAA+B;AAC7BJ,WAAOI,iBAAP,GAA2B,wBAA3B;AACD,GAFD,MAEO,IACLH,OAAOG,iBAAP,CAAyBD,MAAzB,GAAkC,GAAlC,IACAF,OAAOG,iBAAP,CAAyBD,MAAzB,GAAkC,GAF7B,EAGL;AACAH,WAAOI,iBAAP,GACE,iEADF;AAED;AACD,SAAOJ,MAAP;AACD,CAlBD;;AAoBAF,QAAQO,aAAR,GAAwB,UAACJ,MAAD,EAASK,QAAT,EAAsB;AAC5C,SAAO,IAAIZ,OAAJ,CAAY,UAACE,OAAD,EAAUW,MAAV,EAAqB;AACtCD,aAAS,6BAAiBL,OAAOC,UAAxB,CAAT,EAA8CM,IAA9C,CAAmD,kBAAU;AAC3DC,cAAQC,GAAR,CAAY,UAAZ,EAAwBC,MAAxB;AACA;AACA;AACA;AACD,KALD;AAMD,GAPM,CAAP;AAQD,CATD;;;;;;;;gCAtBMlB,K\",\"sourcesContent\":[\"import {courseNameUnique} from '../../layouts/Courses/actions/index.js'\\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\\n\\nexports.validate = values => {\\n  const errors = {}\\n  if (!values.courseName) {\\n    errors.courseName = 'This field is required'\\n  } else if (values.courseName.length > 100 || values.courseName.length < 10) {\\n    errors.courseName =\\n      'Course name needs to be 10 to 100 characters in length.'\\n  }\\n  if (!values.courseDescription) {\\n    errors.courseDescription = 'This field is required'\\n  } else if (\\n    values.courseDescription.length > 350 ||\\n    values.courseDescription.length < 100\\n  ) {\\n    errors.courseDescription =\\n      'Course description needs to be 100 to 350 characters in length.'\\n  }\\n  return errors\\n}\\n\\nexports.asyncValidate = (values, dispatch) => {\\n  return new Promise((resolve, reject) => {\\n    dispatch(courseNameUnique(values.courseName)).then(result => {\\n      console.log('result: ', result)\\n      // if (result.data.code !== 200)\\n      // reject({courseName: 'That username is taken'})\\n      // else resolve()\\n    })\\n  })\\n}\\n\"]}"]}