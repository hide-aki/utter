{"remainingRequest":"/var/www/html/utter/node_modules/react-hot-loader/webpack.js!/var/www/html/utter/node_modules/babel-loader/lib/index.js!/var/www/html/utter/client/src/layouts/Admin/Team/index.js","dependencies":[{"path":"/var/www/html/utter/client/src/layouts/Admin/Team/index.js","mtime":1516293438079},{"path":"/var/www/html/utter/.babelrc","mtime":1518822814526},{"path":"/var/www/html/utter/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/var/www/html/utter/node_modules/react-hot-loader/webpack.js","mtime":1510167650000},{"path":"/var/www/html/utter/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _extends5 = require('babel-runtime/helpers/extends');\n\nvar _extends6 = _interopRequireDefault(_extends5);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _containers = require('../../../containers');\n\nvar _redux = require('redux');\n\nvar _reactRedux = require('react-redux');\n\nvar _styledComponents = require('styled-components');\n\nvar _styledComponents2 = _interopRequireDefault(_styledComponents);\n\nvar _components = require('../../../components');\n\nvar _actions = require('./actions.js');\n\nvar _actions2 = _interopRequireDefault(_actions);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar DictGrid = /*#__PURE__*/(0, _styledComponents2.default)(_components.Grid).withConfig({\n  displayName: 'Team__DictGrid'\n})(['grid-auto-rows:', ';grid-template-columns:', ';grid-template-rows:', ';max-height:', ';max-width:', ';overflow-x:', ';overflow-y:', ';width:', ';'], function (props) {\n  return props.gridautorows;\n}, function (props) {\n  return props.gridtemplatecolumns;\n}, function (props) {\n  return props.gridtemplaterows;\n}, function (props) {\n  return props.maxheight;\n}, function (props) {\n  return props.maxwidth;\n}, function (props) {\n  return props.overflowx;\n}, function (props) {\n  return props.overflowy;\n}, function (props) {\n  return props.width;\n});\n\nvar Delete = /*#__PURE__*/(0, _styledComponents2.default)(_components.Button).withConfig({\n  displayName: 'Team__Delete'\n})(['&:hover{background:red;}']);\n\nDictGrid.defaultProps = {\n  gridtemplatecolumns: '.05fr .05fr .05fr .05fr'\n};\n\nvar DictInput = /*#__PURE__*/(0, _styledComponents2.default)(_components.Input).withConfig({\n  displayName: 'Team__DictInput'\n})(['width:100%;']);\n\nvar DictBox = /*#__PURE__*/(0, _styledComponents2.default)(_components.Box).withConfig({\n  displayName: 'Team__DictBox'\n})(['display:flex;flex-direction:row;height:', ';padding:', ';'], function (props) {\n  return props.height;\n}, function (props) {\n  return props.padding;\n});\nDictBox.defaultProps = {\n  padding: '0 5px 0 0 '\n};\n\nvar Team = function (_Component) {\n  (0, _inherits3.default)(Team, _Component);\n\n  function Team(props) {\n    (0, _classCallCheck3.default)(this, Team);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Team.__proto__ || Object.getPrototypeOf(Team)).call(this, props));\n\n    _this.state = {\n      search: {\n        language: 'english',\n        level: '1'\n      },\n      change: '',\n      deleteWord: false,\n      counter: 0,\n      newWord: {\n        language: 'english',\n        level: '1',\n        category: 'alphabet',\n        word: '',\n        roman: '',\n        name: '',\n        partsOfSpeech: '',\n        audioUrl: ''\n      },\n      updatedWord: {}\n    };\n\n    _this.fetchWords = _this.fetchWords.bind(_this);\n    _this.createWord = _this.createWord.bind(_this);\n    _this.onAudioLangChg = _this.onAudioLangChg.bind(_this);\n    _this.onAudioCategoryChg = _this.onAudioCategoryChg.bind(_this);\n    _this.selectSearchChange = _this.selectSearchChange.bind(_this);\n    _this.selectnewWordChange = _this.selectnewWordChange.bind(_this);\n    _this.selectUpdatedWordChange = _this.selectUpdatedWordChange.bind(_this);\n    _this.onChange = _this.onChange.bind(_this);\n    return _this;\n  }\n\n  (0, _createClass3.default)(Team, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.setState({\n        newWord: (0, _extends6.default)({}, this.state.newWord, {\n          audioUrl: '/audio/' + this.state.newWord.language + '/' + this.state.newWord.category + '/'\n        })\n      });\n    }\n  }, {\n    key: 'onChange',\n    value: function onChange(e) {\n      this.setState({\n        change: e.target.value\n      });\n    }\n  }, {\n    key: 'onAudioLangChg',\n    value: function onAudioLangChg(e) {\n      this.setState({\n        newWord: (0, _extends6.default)({}, this.state.newWord, {\n          audioUrl: '/audio/' + e.target.value + '/' + this.state.newWord.category + '/'\n        })\n      });\n    }\n  }, {\n    key: 'onAudioCategoryChg',\n    value: function onAudioCategoryChg(e) {\n      this.setState({\n        newWord: (0, _extends6.default)({}, this.state.newWord, {\n          audioUrl: '/audio/' + this.state.newWord.language + '/' + e.target.value + '/'\n        })\n      });\n    }\n  }, {\n    key: 'selectSearchChange',\n    value: function selectSearchChange(e) {\n      this.setState({\n        search: (0, _extends6.default)({}, this.state.search, (0, _defineProperty3.default)({}, e.target.name, e.target.value))\n      });\n    }\n  }, {\n    key: 'selectnewWordChange',\n    value: function selectnewWordChange(e) {\n      this.setState({\n        newWord: (0, _extends6.default)({}, this.state.newWord, (0, _defineProperty3.default)({}, e.target.name, e.target.value))\n      });\n    }\n  }, {\n    key: 'selectUpdatedWordChange',\n    value: function selectUpdatedWordChange(e) {\n      this.setState({\n        updatedWord: (0, _extends6.default)({}, this.state.updatedWord, (0, _defineProperty3.default)({}, e.target.name, e.target.value))\n      });\n    }\n  }, {\n    key: 'fetchWords',\n    value: function fetchWords() {\n      var level = this.state.search.level;\n      var lang = this.state.search.language;\n      this.props.actions.fetchWords(level, lang);\n    }\n  }, {\n    key: 'createWord',\n    value: function createWord(e) {\n      e.preventDefault();\n      var newWord = this.state.newWord;\n      // confirm('Confirm Creation')\n      this.props.actions.createWord(newWord);\n      // TODO: clear the props after creating a word\n    }\n  }, {\n    key: 'updateWord',\n    value: function updateWord(gotWord, e) {\n      var _this2 = this;\n\n      var id = gotWord.id,\n          _id = gotWord._id,\n          language = gotWord.language,\n          level = gotWord.level,\n          category = gotWord.category,\n          word = gotWord.word,\n          roman = gotWord.roman,\n          name = gotWord.name,\n          partsOfSpeech = gotWord.partsOfSpeech,\n          audioUrl = gotWord.audioUrl;\n\n      this.setState({\n        updatedWord: (0, _extends6.default)({\n          id: id,\n          _id: _id,\n          language: language,\n          level: level,\n          category: category,\n          word: word,\n          roman: roman,\n          name: name,\n          partsOfSpeech: partsOfSpeech,\n          audioUrl: audioUrl\n        }, this.state.updatedWord)\n      }, function () {\n        _this2.props.actions.updateWord(_this2.state.updatedWord);\n      });\n      e.preventDefault();\n      // confirm('Confirm Creation')\n    }\n  }, {\n    key: 'deleteWord',\n    value: function deleteWord(word, e) {\n      e.preventDefault();\n      // confirm('Confirm Creation')\n      this.props.actions.deleteWord(word);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var dict = this.props.vocabReducer[Object.keys(this.props.vocabReducer)[0]];\n      // let dict = this.props.vocabReducer\n      if (dict) {\n        var words = dict.words;\n      }\n      var counter = 0;\n      return _react2.default.createElement(\n        _containers.Container,\n        { gridtemplatecolumns: '1fr' },\n        _react2.default.createElement(\n          _components.Section,\n          null,\n          _react2.default.createElement(\n            _components.Title,\n            null,\n            'Team (under construction)'\n          ),\n          _react2.default.createElement(_components.Line, { color: 'black', width: '100%' }),\n          _react2.default.createElement(\n            _components.Title,\n            null,\n            'Builder'\n          ),\n          _react2.default.createElement(_components.Line, { color: 'black', width: '100%' }),\n          _react2.default.createElement(\n            DictGrid,\n            {\n              gridtemplatecolumns: '200px 70px 200px 200px 200px 200px 200px 400px 200px ',\n              maxwidth: '1240px',\n              overflowx: 'scroll' },\n            _react2.default.createElement(\n              _components.Column,\n              { alignitems: 'flex-start' },\n              _react2.default.createElement(\n                _components.Text,\n                { fontsize: '1.4rem' },\n                'language'\n              )\n            ),\n            _react2.default.createElement(\n              _components.Column,\n              { alignitems: 'flex-start' },\n              _react2.default.createElement(\n                _components.Text,\n                { fontsize: '1.4rem' },\n                'level'\n              )\n            ),\n            _react2.default.createElement(\n              _components.Column,\n              { alignitems: 'flex-start' },\n              _react2.default.createElement(\n                _components.Text,\n                { fontsize: '1.4rem' },\n                'category'\n              )\n            ),\n            _react2.default.createElement(\n              _components.Column,\n              { alignitems: 'flex-start' },\n              _react2.default.createElement(\n                _components.Text,\n                { fontsize: '1.4rem' },\n                'word'\n              )\n            ),\n            _react2.default.createElement(\n              _components.Column,\n              { alignitems: 'flex-start' },\n              _react2.default.createElement(\n                _components.Text,\n                { fontsize: '1.4rem' },\n                'roman'\n              )\n            ),\n            _react2.default.createElement(\n              _components.Column,\n              { alignitems: 'flex-start' },\n              _react2.default.createElement(\n                _components.Text,\n                { fontsize: '1.4rem' },\n                'name'\n              )\n            ),\n            _react2.default.createElement(\n              _components.Column,\n              { alignitems: 'flex-start' },\n              _react2.default.createElement(\n                _components.Text,\n                { fontsize: '1.4rem' },\n                'Parts of Speech'\n              )\n            ),\n            _react2.default.createElement(\n              _components.Column,\n              { alignitems: 'flex-start' },\n              _react2.default.createElement(\n                _components.Text,\n                { fontsize: '1.4rem' },\n                'audio url'\n              )\n            ),\n            _react2.default.createElement(\n              _components.Column,\n              { alignitems: 'center' },\n              _react2.default.createElement(\n                _components.Text,\n                { fontsize: '1.4rem' },\n                'edit'\n              )\n            ),\n            _react2.default.createElement(\n              DictBox,\n              null,\n              _react2.default.createElement(\n                _components.Select,\n                {\n                  name: 'language',\n                  onChange: this.selectnewWordChange,\n                  onClick: this.onAudioLangChg,\n                  width: '100%',\n                  height: '40px' },\n                _react2.default.createElement(\n                  'option',\n                  { name: 'language', value: 'english' },\n                  'english'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { name: 'language', value: 'korean' },\n                  'korean'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { name: 'language', value: 'spanish' },\n                  'spanish'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { name: 'language', value: 'french' },\n                  'french'\n                )\n              )\n            ),\n            _react2.default.createElement(\n              DictBox,\n              null,\n              _react2.default.createElement(\n                _components.Select,\n                {\n                  name: 'level',\n                  onChange: this.selectnewWordChange,\n                  width: '100%',\n                  height: '40px' },\n                _react2.default.createElement(\n                  'option',\n                  { value: '1' },\n                  '1'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: '2' },\n                  '2'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: '3' },\n                  '3'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: '4' },\n                  '4'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: '5' },\n                  '5'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: '6' },\n                  '6'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: '7' },\n                  '7'\n                )\n              )\n            ),\n            _react2.default.createElement(\n              DictBox,\n              null,\n              _react2.default.createElement(\n                _components.Select,\n                {\n                  name: 'category',\n                  onChange: this.selectnewWordChange,\n                  onClick: this.onAudioCategoryChg,\n                  width: '100%',\n                  height: '40px' },\n                _react2.default.createElement(\n                  'option',\n                  { value: 'alphabet' },\n                  'alphabet'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: 'dipthongs' },\n                  'alphabet'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: 'word' },\n                  'word'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: 'body parts' },\n                  'body parts'\n                )\n              )\n            ),\n            _react2.default.createElement(\n              DictBox,\n              null,\n              _react2.default.createElement(DictInput, { name: 'word', onChange: this.selectnewWordChange })\n            ),\n            _react2.default.createElement(\n              DictBox,\n              null,\n              _react2.default.createElement(DictInput, { name: 'roman', onChange: this.selectnewWordChange })\n            ),\n            _react2.default.createElement(\n              DictBox,\n              null,\n              _react2.default.createElement(DictInput, { name: 'name', onChange: this.selectnewWordChange })\n            ),\n            _react2.default.createElement(\n              DictBox,\n              null,\n              _react2.default.createElement(\n                _components.Select,\n                {\n                  name: 'partsOfSpeech',\n                  onChange: this.selectnewWordChange,\n                  width: '100%',\n                  height: '40px' },\n                _react2.default.createElement('option', { value: '' }),\n                _react2.default.createElement(\n                  'option',\n                  { value: 'noun' },\n                  'noun'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: 'pronoun' },\n                  'pronoun'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: 'verb' },\n                  'verb'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: 'adverb' },\n                  'adverb'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: 'adjective' },\n                  'adjective'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: 'conjunction' },\n                  'conjunction'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: 'preposition' },\n                  'preposition'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: 'interjection' },\n                  'interjection'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: 'determiner' },\n                  'interjection'\n                )\n              )\n            ),\n            _react2.default.createElement(\n              DictBox,\n              null,\n              _react2.default.createElement(DictInput, {\n                name: 'audioUrl',\n                value: this.state.newWord.audioUrl,\n                onChange: this.selectnewWordChange\n              })\n            ),\n            _react2.default.createElement(\n              DictBox,\n              null,\n              _react2.default.createElement(\n                _components.Button,\n                { width: '100px', height: '24px', onClick: this.createWord },\n                'Create Word'\n              )\n            )\n          ),\n          _react2.default.createElement(\n            _components.Title,\n            null,\n            'Search'\n          ),\n          _react2.default.createElement(_components.Line, { color: 'black', width: '100%' }),\n          _react2.default.createElement(\n            DictGrid,\n            {\n              gridtemplatecolumns: '200px 70px 200px 200px',\n              maxwidth: '1240px',\n              overflowx: 'scroll' },\n            _react2.default.createElement(\n              _components.Column,\n              { alignitems: 'flex-start' },\n              _react2.default.createElement(\n                _components.Text,\n                { fontsize: '1.4rem' },\n                'language'\n              )\n            ),\n            _react2.default.createElement(\n              _components.Column,\n              { alignitems: 'flex-start' },\n              _react2.default.createElement(\n                _components.Text,\n                { fontsize: '1.4rem' },\n                'level'\n              )\n            ),\n            _react2.default.createElement(\n              _components.Column,\n              { alignitems: 'flex-start' },\n              _react2.default.createElement(\n                _components.Text,\n                { fontsize: '1.4rem' },\n                'word'\n              )\n            ),\n            _react2.default.createElement(\n              _components.Column,\n              { alignitems: 'center' },\n              _react2.default.createElement(\n                _components.Text,\n                { fontsize: '1.4rem' },\n                'edit'\n              )\n            ),\n            _react2.default.createElement(\n              DictBox,\n              null,\n              _react2.default.createElement(\n                _components.Select,\n                {\n                  name: 'language',\n                  onChange: this.selectSearchChange,\n                  width: '100%',\n                  height: '40px' },\n                _react2.default.createElement(\n                  'option',\n                  { name: 'language', value: 'english' },\n                  'english'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { name: 'language', value: 'korean' },\n                  'korean'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { name: 'language', value: 'spanish' },\n                  'spanish'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { name: 'language', value: 'french' },\n                  'french'\n                )\n              )\n            ),\n            _react2.default.createElement(\n              DictBox,\n              null,\n              _react2.default.createElement(\n                _components.Select,\n                {\n                  name: 'level',\n                  onChange: this.selectSearchChange,\n                  width: '100%',\n                  height: '40px' },\n                _react2.default.createElement(\n                  'option',\n                  { value: '1' },\n                  '1'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: '2' },\n                  '2'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: '3' },\n                  '3'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: '4' },\n                  '4'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: '5' },\n                  '5'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: '6' },\n                  '6'\n                ),\n                _react2.default.createElement(\n                  'option',\n                  { value: '7' },\n                  '7'\n                )\n              )\n            ),\n            _react2.default.createElement(\n              DictBox,\n              null,\n              _react2.default.createElement(DictInput, { name: 'word', onChange: this.selectSearchChange })\n            ),\n            _react2.default.createElement(\n              DictBox,\n              { display: 'flex', flexdirection: 'row' },\n              _react2.default.createElement(\n                _components.Button,\n                { width: '65px', height: '24px', onClick: this.fetchWords },\n                'Search'\n              )\n            )\n          )\n        ),\n        _react2.default.createElement(\n          _components.Section,\n          { width: '100%' },\n          _react2.default.createElement(\n            _components.Title,\n            null,\n            'Results ',\n            _react2.default.createElement(\n              'span',\n              null,\n              '(Total: ?)'\n            )\n          ),\n          _react2.default.createElement(_components.Line, { color: 'black', width: '100%' }),\n          _react2.default.createElement(\n            _components.Box,\n            {\n              display: 'block',\n              height: '600px',\n              maxwidth: '1240px',\n              overflow: 'scroll' },\n            _react2.default.createElement(\n              DictGrid,\n              {\n                gridtemplatecolumns: '100px 400px 400px 200px 70px 200px 200px 200px 200px 200px 500px 200px 200px 400px 200px',\n                width: '4000px' },\n              _react2.default.createElement(\n                _components.Column,\n                { alignitems: 'flex-start' },\n                _react2.default.createElement(\n                  _components.Text,\n                  { fontsize: '1.4rem' },\n                  'count'\n                )\n              ),\n              _react2.default.createElement(\n                _components.Column,\n                { alignitems: 'center' },\n                _react2.default.createElement(\n                  _components.Text,\n                  { fontsize: '1.4rem' },\n                  '_id'\n                )\n              ),\n              _react2.default.createElement(\n                _components.Column,\n                { alignitems: 'center' },\n                _react2.default.createElement(\n                  _components.Text,\n                  { fontsize: '1.4rem' },\n                  'id'\n                )\n              ),\n              _react2.default.createElement(\n                _components.Column,\n                { alignitems: 'flex-start' },\n                _react2.default.createElement(\n                  _components.Text,\n                  { fontsize: '1.4rem' },\n                  'language'\n                )\n              ),\n              _react2.default.createElement(\n                _components.Column,\n                { alignitems: 'flex-start' },\n                _react2.default.createElement(\n                  _components.Text,\n                  { fontsize: '1.4rem' },\n                  'level'\n                )\n              ),\n              _react2.default.createElement(\n                _components.Column,\n                { alignitems: 'flex-start' },\n                _react2.default.createElement(\n                  _components.Text,\n                  { fontsize: '1.4rem' },\n                  'category'\n                )\n              ),\n              _react2.default.createElement(\n                _components.Column,\n                { alignitems: 'flex-start' },\n                _react2.default.createElement(\n                  _components.Text,\n                  { fontsize: '1.4rem' },\n                  'word'\n                )\n              ),\n              _react2.default.createElement(\n                _components.Column,\n                { alignitems: 'flex-start' },\n                _react2.default.createElement(\n                  _components.Text,\n                  { fontsize: '1.4rem' },\n                  'roman'\n                )\n              ),\n              _react2.default.createElement(\n                _components.Column,\n                { alignitems: 'flex-start' },\n                _react2.default.createElement(\n                  _components.Text,\n                  { fontsize: '1.4rem' },\n                  'name'\n                )\n              ),\n              _react2.default.createElement(\n                _components.Column,\n                { alignitems: 'flex-start' },\n                _react2.default.createElement(\n                  _components.Text,\n                  { fontsize: '1.4rem' },\n                  'Parts of Speech'\n                )\n              ),\n              _react2.default.createElement(\n                _components.Column,\n                { alignitems: 'flex-start' },\n                _react2.default.createElement(\n                  _components.Text,\n                  { fontsize: '1.4rem' },\n                  'audio url'\n                )\n              ),\n              _react2.default.createElement(\n                _components.Column,\n                { alignitems: 'center' },\n                _react2.default.createElement(\n                  _components.Text,\n                  { fontsize: '1.4rem' },\n                  'Edit'\n                )\n              )\n            ),\n            words ? words.map(function (item, i) {\n              counter++;\n              return _react2.default.createElement(\n                DictGrid,\n                {\n                  gridtemplatecolumns: '100px 400px 400px 200px 70px 200px 200px 200px 200px 200px 500px 200px 200px 400px 200px',\n                  width: '4000px' },\n                _react2.default.createElement(\n                  DictBox,\n                  null,\n                  _react2.default.createElement(\n                    'span',\n                    null,\n                    counter\n                  )\n                ),\n                _react2.default.createElement(\n                  DictBox,\n                  null,\n                  _react2.default.createElement(DictInput, {\n                    name: 'id',\n                    onChange: _this3.selectUpdatedWordChange,\n                    placeholder: item.id\n                  })\n                ),\n                _react2.default.createElement(\n                  DictBox,\n                  null,\n                  _react2.default.createElement(DictInput, {\n                    name: '_id',\n                    onChange: _this3.selectUpdatedWordChange,\n                    placeholder: item._id\n                  })\n                ),\n                _react2.default.createElement(\n                  DictBox,\n                  null,\n                  _react2.default.createElement(DictInput, {\n                    name: 'language',\n                    onChange: _this3.selectUpdatedWordChange,\n                    placeholder: item.language\n                  })\n                ),\n                _react2.default.createElement(\n                  DictBox,\n                  null,\n                  _react2.default.createElement(DictInput, {\n                    name: 'level',\n                    onChange: _this3.selectUpdatedWordChange,\n                    placeholder: item.level\n                  })\n                ),\n                _react2.default.createElement(\n                  DictBox,\n                  null,\n                  _react2.default.createElement(DictInput, {\n                    name: 'category',\n                    onChange: _this3.selectUpdatedWordChange,\n                    placeholder: item.category\n                  })\n                ),\n                _react2.default.createElement(\n                  DictBox,\n                  null,\n                  _react2.default.createElement(DictInput, {\n                    name: 'word',\n                    onChange: _this3.selectUpdatedWordChange,\n                    placeholder: item.word\n                  })\n                ),\n                _react2.default.createElement(\n                  DictBox,\n                  null,\n                  _react2.default.createElement(DictInput, {\n                    name: 'roman',\n                    onChange: _this3.selectUpdatedWordChange,\n                    placeholder: item.roman\n                  })\n                ),\n                _react2.default.createElement(\n                  DictBox,\n                  null,\n                  _react2.default.createElement(DictInput, {\n                    name: 'name',\n                    onChange: _this3.selectUpdatedWordChange,\n                    placeholder: item.name\n                  })\n                ),\n                _react2.default.createElement(\n                  DictBox,\n                  null,\n                  _react2.default.createElement(DictInput, {\n                    name: 'partsOfSpeech',\n                    onChange: _this3.selectUpdatedWordChange,\n                    placeholder: item.partsOfSpeech\n                  })\n                ),\n                _react2.default.createElement(\n                  DictBox,\n                  null,\n                  _react2.default.createElement(DictInput, {\n                    name: 'audioUrl',\n                    onChange: _this3.selectUpdatedWordChange,\n                    placeholder: item.audioUrl\n                  })\n                ),\n                _react2.default.createElement(\n                  DictBox,\n                  null,\n                  _react2.default.createElement(\n                    'div',\n                    null,\n                    _react2.default.createElement(\n                      _components.Button,\n                      {\n                        hovercolor: 'white',\n                        hoverbackground: 'blue',\n                        onClick: function onClick(e) {\n                          return _this3.updateWord(item, e);\n                        } },\n                      'update'\n                    ),\n                    '|',\n                    ' ',\n                    _react2.default.createElement(\n                      _components.Button,\n                      {\n                        hovercolor: 'white',\n                        hoverbackground: 'blue',\n                        onClick: function onClick(e) {\n                          return _this3.deleteWord(item, e);\n                        } },\n                      'delete'\n                    )\n                  )\n                )\n              );\n            }) : null\n          )\n        )\n      );\n    }\n  }]);\n  return Team;\n}(_react.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    vocabReducer: state.vocabReducer\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  var fetchWords = _actions2.default.fetch;\n  var createWord = _actions2.default.create;\n  var deleteWord = _actions2.default.delete;\n  var updateWord = _actions2.default.update;\n  return {\n    actions: (0, _redux.bindActionCreators)({\n      fetchWords: fetchWords,\n      createWord: createWord,\n      deleteWord: deleteWord,\n      updateWord: updateWord\n    }, dispatch)\n  };\n};\n\nvar _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Team);\n\nexports.default = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(DictGrid, 'DictGrid', '/var/www/html/utter/client/src/layouts/Admin/Team/index.js');\n\n  __REACT_HOT_LOADER__.register(Delete, 'Delete', '/var/www/html/utter/client/src/layouts/Admin/Team/index.js');\n\n  __REACT_HOT_LOADER__.register(DictInput, 'DictInput', '/var/www/html/utter/client/src/layouts/Admin/Team/index.js');\n\n  __REACT_HOT_LOADER__.register(DictBox, 'DictBox', '/var/www/html/utter/client/src/layouts/Admin/Team/index.js');\n\n  __REACT_HOT_LOADER__.register(Team, 'Team', '/var/www/html/utter/client/src/layouts/Admin/Team/index.js');\n\n  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', '/var/www/html/utter/client/src/layouts/Admin/Team/index.js');\n\n  __REACT_HOT_LOADER__.register(mapDispatchToProps, 'mapDispatchToProps', '/var/www/html/utter/client/src/layouts/Admin/Team/index.js');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/var/www/html/utter/client/src/layouts/Admin/Team/index.js');\n}();\n\n;\n\n ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', \"/var/www/html/utter/client/src/layouts/Admin/Team/index.js\"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, \"/var/www/html/utter/client/src/layouts/Admin/Team/index.js\"); } } })();","{\"version\":3,\"sources\":[\"/var/www/html/utter/client/src/layouts/Admin/Team/index.js\"],\"names\":[\"DictGrid\",\"props\",\"gridautorows\",\"gridtemplatecolumns\",\"gridtemplaterows\",\"maxheight\",\"maxwidth\",\"overflowx\",\"overflowy\",\"width\",\"Delete\",\"defaultProps\",\"DictInput\",\"DictBox\",\"height\",\"padding\",\"Team\",\"state\",\"search\",\"language\",\"level\",\"change\",\"deleteWord\",\"counter\",\"newWord\",\"category\",\"word\",\"roman\",\"name\",\"partsOfSpeech\",\"audioUrl\",\"updatedWord\",\"fetchWords\",\"bind\",\"createWord\",\"onAudioLangChg\",\"onAudioCategoryChg\",\"selectSearchChange\",\"selectnewWordChange\",\"selectUpdatedWordChange\",\"onChange\",\"setState\",\"e\",\"target\",\"value\",\"lang\",\"actions\",\"preventDefault\",\"gotWord\",\"id\",\"_id\",\"updateWord\",\"dict\",\"vocabReducer\",\"Object\",\"keys\",\"words\",\"map\",\"item\",\"i\",\"mapStateToProps\",\"mapDispatchToProps\",\"fetch\",\"create\",\"delete\",\"update\",\"dispatch\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, {Component} from 'react'\\nimport {Container} from '../../../containers'\\nimport {bindActionCreators} from 'redux'\\nimport {connect} from 'react-redux'\\nimport styled from 'styled-components'\\n\\nimport {\\n  Box,\\n  Button,\\n  Column,\\n  Grid,\\n  Input,\\n  Label,\\n  Line,\\n  Section,\\n  Select,\\n  Text,\\n  Title\\n} from '../../../components'\\n\\nimport actionCreators from './actions.js'\\n\\nconst DictGrid = styled(Grid)`\\n  grid-auto-rows: ${props => props.gridautorows};\\n  grid-template-columns: ${props => props.gridtemplatecolumns};\\n  grid-template-rows: ${props => props.gridtemplaterows};\\n  max-height: ${props => props.maxheight};\\n  max-width: ${props => props.maxwidth};\\n  overflow-x: ${props => props.overflowx};\\n  overflow-y: ${props => props.overflowy};\\n  width: ${props => props.width};\\n`\\n\\nconst Delete = styled(Button)`\\n  &:hover {\\n    background: red;\\n  }\\n`\\n\\nDictGrid.defaultProps = {\\n  gridtemplatecolumns: '.05fr .05fr .05fr .05fr'\\n}\\n\\nconst DictInput = styled(Input)`\\n  width: 100%;\\n`\\n\\nconst DictBox = styled(Box)`\\n  display:flex;\\n  flex-direction:row;\\n  height: ${props => props.height};\\n  padding: ${props => props.padding};\\n`\\nDictBox.defaultProps = {\\n  padding: '0 5px 0 0 '\\n}\\n\\nclass Team extends Component {\\n  constructor(props) {\\n    super(props)\\n    this.state = {\\n      search: {\\n        language: 'english',\\n        level: '1'\\n      },\\n      change: '',\\n      deleteWord: false,\\n      counter: 0,\\n      newWord: {\\n        language: 'english',\\n        level: '1',\\n        category: 'alphabet',\\n        word: '',\\n        roman: '',\\n        name: '',\\n        partsOfSpeech: '',\\n        audioUrl: ''\\n      },\\n      updatedWord: {}\\n    }\\n\\n    this.fetchWords = this.fetchWords.bind(this)\\n    this.createWord = this.createWord.bind(this)\\n    this.onAudioLangChg = this.onAudioLangChg.bind(this)\\n    this.onAudioCategoryChg = this.onAudioCategoryChg.bind(this)\\n    this.selectSearchChange = this.selectSearchChange.bind(this)\\n    this.selectnewWordChange = this.selectnewWordChange.bind(this)\\n    this.selectUpdatedWordChange = this.selectUpdatedWordChange.bind(this)\\n    this.onChange = this.onChange.bind(this)\\n  }\\n\\n  componentDidMount() {\\n    this.setState({\\n      newWord: {\\n        ...this.state.newWord,\\n        audioUrl: `/audio/${this.state.newWord.language}/${this.state.newWord\\n          .category}/`\\n      }\\n    })\\n  }\\n\\n  onChange(e) {\\n    this.setState({\\n      change: e.target.value\\n    })\\n  }\\n\\n  onAudioLangChg(e) {\\n    this.setState({\\n      newWord: {\\n        ...this.state.newWord,\\n        audioUrl: `/audio/${e.target.value}/${this.state.newWord.category}/`\\n      }\\n    })\\n  }\\n\\n  onAudioCategoryChg(e) {\\n    this.setState({\\n      newWord: {\\n        ...this.state.newWord,\\n        audioUrl: `/audio/${this.state.newWord.language}/${e.target.value}/`\\n      }\\n    })\\n  }\\n\\n  selectSearchChange(e) {\\n    this.setState({\\n      search: {\\n        ...this.state.search,\\n        [e.target.name]: e.target.value\\n      }\\n    })\\n  }\\n\\n  selectnewWordChange(e) {\\n    this.setState({\\n      newWord: {\\n        ...this.state.newWord,\\n        [e.target.name]: e.target.value\\n      }\\n    })\\n  }\\n\\n  selectUpdatedWordChange(e) {\\n    this.setState({\\n      updatedWord: {\\n        ...this.state.updatedWord,\\n        [e.target.name]: e.target.value\\n      }\\n    })\\n  }\\n\\n  fetchWords() {\\n    const level = this.state.search.level\\n    const lang = this.state.search.language\\n    this.props.actions.fetchWords(level, lang)\\n  }\\n\\n  createWord(e) {\\n    e.preventDefault()\\n    let newWord = this.state.newWord\\n    // confirm('Confirm Creation')\\n    this.props.actions.createWord(newWord)\\n    // TODO: clear the props after creating a word\\n  }\\n\\n  updateWord(gotWord, e) {\\n    const {\\n      id,\\n      _id,\\n      language,\\n      level,\\n      category,\\n      word,\\n      roman,\\n      name,\\n      partsOfSpeech,\\n      audioUrl\\n    } = gotWord\\n    this.setState(\\n      {\\n        updatedWord: {\\n          id,\\n          _id,\\n          language,\\n          level,\\n          category,\\n          word,\\n          roman,\\n          name,\\n          partsOfSpeech,\\n          audioUrl,\\n          ...this.state.updatedWord\\n        }\\n      },\\n      () => {\\n        this.props.actions.updateWord(this.state.updatedWord)\\n      }\\n    )\\n    e.preventDefault()\\n    // confirm('Confirm Creation')\\n  }\\n\\n  deleteWord(word, e) {\\n    e.preventDefault()\\n    // confirm('Confirm Creation')\\n    this.props.actions.deleteWord(word)\\n  }\\n\\n  render() {\\n    let dict = this.props.vocabReducer[Object.keys(this.props.vocabReducer)[0]]\\n    // let dict = this.props.vocabReducer\\n    if (dict) {\\n      var words = dict.words\\n    }\\n    let counter = 0\\n    return (\\n      <Container gridtemplatecolumns=\\\"1fr\\\">\\n        <Section>\\n          <Title>Team (under construction)</Title>\\n          <Line color=\\\"black\\\" width=\\\"100%\\\" />\\n          <Title>Builder</Title>\\n          <Line color=\\\"black\\\" width=\\\"100%\\\" />\\n          <DictGrid\\n            gridtemplatecolumns=\\\"200px 70px 200px 200px 200px 200px 200px 400px 200px \\\"\\n            maxwidth=\\\"1240px\\\"\\n            overflowx=\\\"scroll\\\">\\n            <Column alignitems=\\\"flex-start\\\">\\n              <Text fontsize=\\\"1.4rem\\\">language</Text>\\n            </Column>\\n            <Column alignitems=\\\"flex-start\\\">\\n              <Text fontsize=\\\"1.4rem\\\">level</Text>\\n            </Column>\\n            <Column alignitems=\\\"flex-start\\\">\\n              <Text fontsize=\\\"1.4rem\\\">category</Text>\\n            </Column>\\n            <Column alignitems=\\\"flex-start\\\">\\n              <Text fontsize=\\\"1.4rem\\\">word</Text>\\n            </Column>\\n            <Column alignitems=\\\"flex-start\\\">\\n              <Text fontsize=\\\"1.4rem\\\">roman</Text>\\n            </Column>\\n            <Column alignitems=\\\"flex-start\\\">\\n              <Text fontsize=\\\"1.4rem\\\">name</Text>\\n            </Column>\\n            <Column alignitems=\\\"flex-start\\\">\\n              <Text fontsize=\\\"1.4rem\\\">Parts of Speech</Text>\\n            </Column>\\n            <Column alignitems=\\\"flex-start\\\">\\n              <Text fontsize=\\\"1.4rem\\\">audio url</Text>\\n            </Column>\\n            <Column alignitems=\\\"center\\\">\\n              <Text fontsize=\\\"1.4rem\\\">edit</Text>\\n            </Column>\\n            <DictBox>\\n              <Select\\n                name=\\\"language\\\"\\n                onChange={this.selectnewWordChange}\\n                onClick={this.onAudioLangChg}\\n                width=\\\"100%\\\"\\n                height=\\\"40px\\\">\\n                <option name=\\\"language\\\" value=\\\"english\\\">english</option>\\n                <option name=\\\"language\\\" value=\\\"korean\\\">korean</option>\\n                <option name=\\\"language\\\" value=\\\"spanish\\\">spanish</option>\\n                <option name=\\\"language\\\" value=\\\"french\\\">french</option>\\n              </Select>\\n            </DictBox>\\n            <DictBox>\\n              <Select\\n                name=\\\"level\\\"\\n                onChange={this.selectnewWordChange}\\n                width=\\\"100%\\\"\\n                height=\\\"40px\\\">\\n                <option value=\\\"1\\\">1</option>\\n                <option value=\\\"2\\\">2</option>\\n                <option value=\\\"3\\\">3</option>\\n                <option value=\\\"4\\\">4</option>\\n                <option value=\\\"5\\\">5</option>\\n                <option value=\\\"6\\\">6</option>\\n                <option value=\\\"7\\\">7</option>\\n              </Select>\\n            </DictBox>\\n            <DictBox>\\n              <Select\\n                name=\\\"category\\\"\\n                onChange={this.selectnewWordChange}\\n                onClick={this.onAudioCategoryChg}\\n                width=\\\"100%\\\"\\n                height=\\\"40px\\\">\\n                <option value=\\\"alphabet\\\">alphabet</option>\\n                <option value=\\\"dipthongs\\\">alphabet</option>\\n                <option value=\\\"word\\\">word</option>\\n                <option value=\\\"body parts\\\">body parts</option>\\n              </Select>\\n            </DictBox>\\n            <DictBox>\\n              <DictInput name=\\\"word\\\" onChange={this.selectnewWordChange} />\\n            </DictBox>\\n            <DictBox>\\n              <DictInput name=\\\"roman\\\" onChange={this.selectnewWordChange} />\\n            </DictBox>\\n            <DictBox>\\n              <DictInput name=\\\"name\\\" onChange={this.selectnewWordChange} />\\n            </DictBox>\\n            <DictBox>\\n              <Select\\n                name=\\\"partsOfSpeech\\\"\\n                onChange={this.selectnewWordChange}\\n                width=\\\"100%\\\"\\n                height=\\\"40px\\\">\\n                <option value=\\\"\\\" />\\n                <option value=\\\"noun\\\">noun</option>\\n                <option value=\\\"pronoun\\\">pronoun</option>\\n                <option value=\\\"verb\\\">verb</option>\\n                <option value=\\\"adverb\\\">adverb</option>\\n                <option value=\\\"adjective\\\">adjective</option>\\n                <option value=\\\"conjunction\\\">conjunction</option>\\n                <option value=\\\"preposition\\\">preposition</option>\\n                <option value=\\\"interjection\\\">interjection</option>\\n                <option value=\\\"determiner\\\">interjection</option>\\n              </Select>\\n            </DictBox>\\n            <DictBox>\\n              <DictInput\\n                name=\\\"audioUrl\\\"\\n                value={this.state.newWord.audioUrl}\\n                onChange={this.selectnewWordChange}\\n              />\\n            </DictBox>\\n            <DictBox>\\n              <Button width=\\\"100px\\\" height=\\\"24px\\\" onClick={this.createWord}>\\n                Create Word\\n              </Button>\\n            </DictBox>\\n          </DictGrid>\\n          <Title>Search</Title>\\n          <Line color=\\\"black\\\" width=\\\"100%\\\" />\\n          <DictGrid\\n            gridtemplatecolumns=\\\"200px 70px 200px 200px\\\"\\n            maxwidth=\\\"1240px\\\"\\n            overflowx=\\\"scroll\\\">\\n            <Column alignitems=\\\"flex-start\\\">\\n              <Text fontsize=\\\"1.4rem\\\">language</Text>\\n            </Column>\\n            <Column alignitems=\\\"flex-start\\\">\\n              <Text fontsize=\\\"1.4rem\\\">level</Text>\\n            </Column>\\n            <Column alignitems=\\\"flex-start\\\">\\n              <Text fontsize=\\\"1.4rem\\\">word</Text>\\n            </Column>\\n            <Column alignitems=\\\"center\\\">\\n              <Text fontsize=\\\"1.4rem\\\">edit</Text>\\n            </Column>\\n            <DictBox>\\n              <Select\\n                name=\\\"language\\\"\\n                onChange={this.selectSearchChange}\\n                width=\\\"100%\\\"\\n                height=\\\"40px\\\">\\n                <option name=\\\"language\\\" value=\\\"english\\\">english</option>\\n                <option name=\\\"language\\\" value=\\\"korean\\\">korean</option>\\n                <option name=\\\"language\\\" value=\\\"spanish\\\">spanish</option>\\n                <option name=\\\"language\\\" value=\\\"french\\\">french</option>\\n              </Select>\\n            </DictBox>\\n            <DictBox>\\n              <Select\\n                name=\\\"level\\\"\\n                onChange={this.selectSearchChange}\\n                width=\\\"100%\\\"\\n                height=\\\"40px\\\">\\n                <option value=\\\"1\\\">1</option>\\n                <option value=\\\"2\\\">2</option>\\n                <option value=\\\"3\\\">3</option>\\n                <option value=\\\"4\\\">4</option>\\n                <option value=\\\"5\\\">5</option>\\n                <option value=\\\"6\\\">6</option>\\n                <option value=\\\"7\\\">7</option>\\n              </Select>\\n            </DictBox>\\n            <DictBox>\\n              <DictInput name=\\\"word\\\" onChange={this.selectSearchChange} />\\n            </DictBox>\\n            <DictBox display=\\\"flex\\\" flexdirection=\\\"row\\\">\\n              <Button width=\\\"65px\\\" height=\\\"24px\\\" onClick={this.fetchWords}>\\n                Search\\n              </Button>\\n            </DictBox>\\n          </DictGrid>\\n        </Section>\\n        <Section width=\\\"100%\\\">\\n          <Title>Results <span>(Total: ?)</span></Title>\\n          <Line color=\\\"black\\\" width=\\\"100%\\\" />\\n          <Box\\n            display=\\\"block\\\"\\n            height=\\\"600px\\\"\\n            maxwidth=\\\"1240px\\\"\\n            overflow=\\\"scroll\\\">\\n            <DictGrid\\n              gridtemplatecolumns=\\\"100px 400px 400px 200px 70px 200px 200px 200px 200px 200px 500px 200px 200px 400px 200px\\\"\\n              width=\\\"4000px\\\">\\n              <Column alignitems=\\\"flex-start\\\">\\n                <Text fontsize=\\\"1.4rem\\\">count</Text>\\n              </Column>\\n              <Column alignitems=\\\"center\\\">\\n                <Text fontsize=\\\"1.4rem\\\">_id</Text>\\n              </Column>\\n              <Column alignitems=\\\"center\\\">\\n                <Text fontsize=\\\"1.4rem\\\">id</Text>\\n              </Column>\\n              <Column alignitems=\\\"flex-start\\\">\\n                <Text fontsize=\\\"1.4rem\\\">language</Text>\\n              </Column>\\n              <Column alignitems=\\\"flex-start\\\">\\n                <Text fontsize=\\\"1.4rem\\\">level</Text>\\n              </Column>\\n              <Column alignitems=\\\"flex-start\\\">\\n                <Text fontsize=\\\"1.4rem\\\">category</Text>\\n              </Column>\\n              <Column alignitems=\\\"flex-start\\\">\\n                <Text fontsize=\\\"1.4rem\\\">word</Text>\\n              </Column>\\n              <Column alignitems=\\\"flex-start\\\">\\n                <Text fontsize=\\\"1.4rem\\\">roman</Text>\\n              </Column>\\n              <Column alignitems=\\\"flex-start\\\">\\n                <Text fontsize=\\\"1.4rem\\\">name</Text>\\n              </Column>\\n              <Column alignitems=\\\"flex-start\\\">\\n                <Text fontsize=\\\"1.4rem\\\">Parts of Speech</Text>\\n              </Column>\\n              <Column alignitems=\\\"flex-start\\\">\\n                <Text fontsize=\\\"1.4rem\\\">audio url</Text>\\n              </Column>\\n              <Column alignitems=\\\"center\\\">\\n                <Text fontsize=\\\"1.4rem\\\">Edit</Text>\\n              </Column>\\n            </DictGrid>\\n            {words\\n              ? words.map((item, i) => {\\n                  counter++\\n                  return (\\n                    <DictGrid\\n                      gridtemplatecolumns=\\\"100px 400px 400px 200px 70px 200px 200px 200px 200px 200px 500px 200px 200px 400px 200px\\\"\\n                      width=\\\"4000px\\\">\\n                      <DictBox>\\n                        <span>{counter}</span>\\n                      </DictBox>\\n                      <DictBox>\\n                        <DictInput\\n                          name=\\\"id\\\"\\n                          onChange={this.selectUpdatedWordChange}\\n                          placeholder={item.id}\\n                        />\\n                      </DictBox>\\n                      <DictBox>\\n                        <DictInput\\n                          name=\\\"_id\\\"\\n                          onChange={this.selectUpdatedWordChange}\\n                          placeholder={item._id}\\n                        />\\n                      </DictBox>\\n                      <DictBox>\\n                        <DictInput\\n                          name=\\\"language\\\"\\n                          onChange={this.selectUpdatedWordChange}\\n                          placeholder={item.language}\\n                        />\\n                      </DictBox>\\n                      <DictBox>\\n                        <DictInput\\n                          name=\\\"level\\\"\\n                          onChange={this.selectUpdatedWordChange}\\n                          placeholder={item.level}\\n                        />\\n                      </DictBox>\\n                      <DictBox>\\n                        <DictInput\\n                          name=\\\"category\\\"\\n                          onChange={this.selectUpdatedWordChange}\\n                          placeholder={item.category}\\n                        />\\n                      </DictBox>\\n                      <DictBox>\\n                        <DictInput\\n                          name=\\\"word\\\"\\n                          onChange={this.selectUpdatedWordChange}\\n                          placeholder={item.word}\\n                        />\\n                      </DictBox>\\n                      <DictBox>\\n                        <DictInput\\n                          name=\\\"roman\\\"\\n                          onChange={this.selectUpdatedWordChange}\\n                          placeholder={item.roman}\\n                        />\\n                      </DictBox>\\n                      <DictBox>\\n                        <DictInput\\n                          name=\\\"name\\\"\\n                          onChange={this.selectUpdatedWordChange}\\n                          placeholder={item.name}\\n                        />\\n                      </DictBox>\\n                      <DictBox>\\n                        <DictInput\\n                          name=\\\"partsOfSpeech\\\"\\n                          onChange={this.selectUpdatedWordChange}\\n                          placeholder={item.partsOfSpeech}\\n                        />\\n                      </DictBox>\\n                      <DictBox>\\n                        <DictInput\\n                          name=\\\"audioUrl\\\"\\n                          onChange={this.selectUpdatedWordChange}\\n                          placeholder={item.audioUrl}\\n                        />\\n                      </DictBox>\\n                      <DictBox>\\n                        <div>\\n                          <Button\\n                            hovercolor=\\\"white\\\"\\n                            hoverbackground=\\\"blue\\\"\\n                            onClick={e => this.updateWord(item, e)}>\\n                            update\\n                          </Button>\\n                          |{' '}\\n                          <Button\\n                            hovercolor=\\\"white\\\"\\n                            hoverbackground=\\\"blue\\\"\\n                            onClick={e => this.deleteWord(item, e)}>\\n                            delete\\n                          </Button>\\n                        </div>\\n                      </DictBox>\\n                    </DictGrid>\\n                  )\\n                })\\n              : null}\\n          </Box>\\n        </Section>\\n      </Container>\\n    )\\n  }\\n}\\n\\nconst mapStateToProps = state => {\\n  return {\\n    vocabReducer: state.vocabReducer\\n  }\\n}\\n\\nconst mapDispatchToProps = dispatch => {\\n  let fetchWords = actionCreators.fetch\\n  let createWord = actionCreators.create\\n  let deleteWord = actionCreators.delete\\n  let updateWord = actionCreators.update\\n  return {\\n    actions: bindActionCreators(\\n      {\\n        fetchWords,\\n        createWord,\\n        deleteWord,\\n        updateWord\\n      },\\n      dispatch\\n    )\\n  }\\n}\\n\\nexport default connect(mapStateToProps, mapDispatchToProps)(Team)\\n\"]}"]}