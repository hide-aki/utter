type Grammar {
	rule: String
	example: String
	translation: String
	audioUrl: String
}

type Example {
	example: String
	translation: String
	audioUrl: String
}

type Phrases {
	type: String
	formality: String
	phrase: String
	translation: String
	audioUrl: String
}

type Level {
	courseId: String
  createdAt: Int
	examples: [Example]
	grammar: [Grammar]
  _id: ID
	level: Int
	notes: String 
	phrases: [Phrases]
  updatedAt: String
  title: String
	vocabulary: [Vocabulary]
}

input LevelUpdateInput {
  _id: ID
  level: Int 
  title: String
}

input LevelCreateInput {
	courseId: String
  level: Int 
  title: String
}

type LevelPayload {
	level: Level
  errors: [Error]
}

type PaginatedLevels {
  levels: [Level]
}

extend type Query {
  getLevel(levelId: String!): Level!
  getLevels(
		courseId: String!
  ): PaginatedLevels 
  getLevelCount: Int
}

extend type Mutation {
  levelCreate(input: LevelCreateInput!): LevelPayload! 
	levelDelete(_id: ID): LevelPayload 
  levelUpdate(input: LevelUpdateInput!): LevelPayload!
}
