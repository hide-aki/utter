type  Vocabulary {
		word: String
		translation: String
		audioUrl: String
  }

type Grammar {
      rule: String
      example: String
      translation: String
      audioUrl: String
    }

type Example {
      example: String
      translation: String
      audioUrl: String
    }

type Phrases {
      type: String
      formality: String
      phrase: String
      translation: String
      audioUrl: String
    }

type Level {
	courseId: String
  createdAt: Int
	examples: [Example]
	grammar: [Grammar]
  id: ID
	level: Int!
	notes: String 
	phrases: [Phrases]
  updatedAt: String
  title: String!
	vocabulary: [Vocabulary]
}

input LevelUpdated {
  id: ID
  level: Int 
  title: String
}

input LevelCreateInput {
	courseId: String
  id: ID
  level: Int 
  title: String
}

type PaginatedLevels {
  levels: [Level]
}

extend type Query {
  getLevel(levelId: String!): Level!
  getLevels(
		courseId: String!
  ): PaginatedLevels 
  getLevelCount: Int
}

extend type Mutation {
  levelCreate(input: LevelCreateInput!): Level! 
	levelDelete(resourceID: String!): Boolean @hasScope(scope: "level:delete")
  levelUpdate(input: LevelUpdated!): Level!
}
