type User {
  id: ID!
  email: String!
  password: String!
  contacts: [String]
  username: String!
  createdAt: String
  updatedAt: String
}

type AuthPayload {
  token: String
  user: User
}

input UpdatedUserInput {
  age: Int
  email: String
  firstName: String
  lastName: String
  nativeLang: String
  contacts: [String]
  isDeleted: Boolean
  roles: [String]
  username: String
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
}

input SignupInput {
  email: String!
  password: String!
  username: String!
}

type Query {
  getUserById(id: ID!): User!
  getUserByUsername(input: String!): User
}

type Mutation {
  createUser(input: CreateUserInput!): User
  login(identifier: String!, password: String!): AuthPayload
  signup(input: SignupInput!): AuthPayload
  updateMe(input: UpdatedUserInput!): User!
}
