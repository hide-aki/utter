{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/normalize-scroll-left/lib/main.js"],"names":["Object","defineProperty","exports","value","cachedType","inDOM","window","document","createElement","detectScrollType","body","dummy","appendChild","createTextNode","dir","style","fontSize","width","height","position","top","overflow","scrollLeft","removeChild","_setScrollType","type","getNormalizedScrollLeft","element","direction","Number","NaN","scrollWidth","clientWidth","setNormalizedScrollLeft"],"mappings":"4FACAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAE9C,IACAC,EADAC,IAAA,oBAAAC,gBAAAC,WAAAD,OAAAC,SAAAC,eAOA,SAAAC,IACA,GAAAL,EACA,OAAAA,EAEA,IAAAC,IAAAC,OAAAC,SAAAG,KACA,sBAEA,IAAAC,EAAAL,OAAAC,SAAAC,cAAA,OAqBA,OApBAG,EAAAC,YAAAL,SAAAM,eAAA,SACAF,EAAAG,IAAA,MACAH,EAAAI,MAAAC,SAAA,OACAL,EAAAI,MAAAE,MAAA,MACAN,EAAAI,MAAAG,OAAA,MACAP,EAAAI,MAAAI,SAAA,WACAR,EAAAI,MAAAK,IAAA,UACAT,EAAAI,MAAAM,SAAA,SACAd,SAAAG,KAAAE,YAAAD,GACAP,EAAA,UACAO,EAAAW,WAAA,EACAlB,EAAA,WAGAO,EAAAW,WAAA,EACA,IAAAX,EAAAW,aACAlB,EAAA,aAGAG,SAAAG,KAAAa,YAAAZ,GACAP,EA9BAF,EAAAsB,eAHA,SAAAC,GACArB,EAAAqB,GAkCAvB,EAAAO,mBAoBAP,EAAAwB,wBAlBA,SAAAC,EAAAC,GACA,IAAAN,EAAAK,EAAAL,WAEA,WAAAM,EACA,OAAAN,EAEA,IAAAG,EAAAhB,IACA,qBAAAgB,EACA,OAAAI,OAAAC,IAEA,OAAAL,GACA,eACA,OAAAE,EAAAI,YAAAJ,EAAAK,YAAAV,EACA,cACA,OAAAK,EAAAI,YAAAJ,EAAAK,YAAAV,EAEA,OAAAA,GAyBApB,EAAA+B,wBAtBA,SAAAN,EAAAL,EAAAM,GAEA,WAAAA,EAAA,CAIA,IAAAH,EAAAhB,IACA,qBAAAgB,EAGA,OAAAA,GACA,eACAE,EAAAL,WAAAK,EAAAK,YAAAL,EAAAI,YAAAT,EACA,MACA,cACAK,EAAAL,WAAAK,EAAAI,YAAAJ,EAAAK,YAAAV,EACA,MACA,QACAK,EAAAL,mBAfAK,EAAAL","file":"bundle.npm.normalize-scroll-left.6c190e489daef8c08e19.js","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Based on https://github.com/react-bootstrap/dom-helpers/blob/master/src/util/inDOM.js\r\nvar inDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\r\nvar cachedType;\r\nfunction _setScrollType(type) {\r\n    cachedType = type;\r\n}\r\nexports._setScrollType = _setScrollType;\r\n// Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type\r\nfunction detectScrollType() {\r\n    if (cachedType) {\r\n        return cachedType;\r\n    }\r\n    if (!inDOM || !window.document.body) {\r\n        return 'indeterminate';\r\n    }\r\n    var dummy = window.document.createElement('div');\r\n    dummy.appendChild(document.createTextNode('ABCD'));\r\n    dummy.dir = 'rtl';\r\n    dummy.style.fontSize = '14px';\r\n    dummy.style.width = '4px';\r\n    dummy.style.height = '1px';\r\n    dummy.style.position = 'absolute';\r\n    dummy.style.top = '-1000px';\r\n    dummy.style.overflow = 'scroll';\r\n    document.body.appendChild(dummy);\r\n    cachedType = 'reverse';\r\n    if (dummy.scrollLeft > 0) {\r\n        cachedType = 'default';\r\n    }\r\n    else {\r\n        dummy.scrollLeft = 1;\r\n        if (dummy.scrollLeft === 0) {\r\n            cachedType = 'negative';\r\n        }\r\n    }\r\n    document.body.removeChild(dummy);\r\n    return cachedType;\r\n}\r\nexports.detectScrollType = detectScrollType;\r\n// Based on https://stackoverflow.com/a/24394376\r\nfunction getNormalizedScrollLeft(element, direction) {\r\n    var scrollLeft = element.scrollLeft;\r\n    // Perform the calculations only when direction is rtl to avoid messing up the ltr bahavior\r\n    if (direction !== 'rtl') {\r\n        return scrollLeft;\r\n    }\r\n    var type = detectScrollType();\r\n    if (type === 'indeterminate') {\r\n        return Number.NaN;\r\n    }\r\n    switch (type) {\r\n        case 'negative':\r\n            return element.scrollWidth - element.clientWidth + scrollLeft;\r\n        case 'reverse':\r\n            return element.scrollWidth - element.clientWidth - scrollLeft;\r\n    }\r\n    return scrollLeft;\r\n}\r\nexports.getNormalizedScrollLeft = getNormalizedScrollLeft;\r\nfunction setNormalizedScrollLeft(element, scrollLeft, direction) {\r\n    // Perform the calculations only when direction is rtl to avoid messing up the ltr bahavior\r\n    if (direction !== 'rtl') {\r\n        element.scrollLeft = scrollLeft;\r\n        return;\r\n    }\r\n    var type = detectScrollType();\r\n    if (type === 'indeterminate') {\r\n        return;\r\n    }\r\n    switch (type) {\r\n        case 'negative':\r\n            element.scrollLeft = element.clientWidth - element.scrollWidth + scrollLeft;\r\n            break;\r\n        case 'reverse':\r\n            element.scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;\r\n            break;\r\n        default:\r\n            element.scrollLeft = scrollLeft;\r\n            break;\r\n    }\r\n}\r\nexports.setNormalizedScrollLeft = setNormalizedScrollLeft;\r\n"],"sourceRoot":""}