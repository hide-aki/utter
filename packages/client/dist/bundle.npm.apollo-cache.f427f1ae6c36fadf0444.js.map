{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-cache/lib/utils.js","webpack:////var/www/html/utter/node_modules/apollo-cache/lib/cache.js"],"names":["queryFromPojo","obj","kind","definitions","operation","name","value","selectionSet","selectionSetFromObj","Array","isArray","selections","Object","keys","forEach","key","field","undefined","push","justTypenameQuery","variableDefinitions","directives","alias","arguments","__webpack_require__","d","__webpack_exports__","cache_ApolloCache","ApolloCache","prototype","transformDocument","document","transformForLink","readQuery","options","optimistic","this","read","query","variables","readFragment","fragments","fragment","fragmentName","rootId","id","writeQuery","write","dataId","result","data","writeFragment","writeData","_a","typename","typenameResult","e","__typename","dataToWrite","assign","typeCondition"],"mappings":"4GAAO,SAAAA,EAAAC,GAcP,MAJA,CACAC,KAAA,WACAC,YAAA,CAXA,CACAD,KAAA,sBACAE,UAAA,QACAC,KAAA,CACAH,KAAA,OACAI,MAAA,wBAEAC,aAAAC,EAAAP,MA8BA,SAAAO,EAAAP,GACA,oBAAAA,GACA,kBAAAA,GACA,iBAAAA,GAFA,MAGAA,EAEA,YAEA,GAAAQ,MAAAC,QAAAT,GACA,OAAAO,EAAAP,EAAA,IAEA,IAAAU,EAAA,GAiBA,OAhBAC,OAAAC,KAAAZ,GAAAa,QAAA,SAAAC,GACA,IACAC,EAAA,CACAd,KAAA,QACAG,KAAA,CACAH,KAAA,OACAI,MAAAS,GAEAR,aAPAC,EAAAP,EAAAc,UAOAE,GAEAN,EAAAO,KAAAF,KAEA,CACAd,KAAA,eACAS,cAIO,IAAAQ,EAAA,CACPjB,KAAA,WACAC,YAAA,CACA,CACAD,KAAA,sBACAE,UAAA,QACAC,KAAA,KACAe,oBAAA,KACAC,WAAA,GACAd,aAAA,CACAL,KAAA,eACAS,WAAA,CACA,CACAT,KAAA,QACAoB,MAAA,KACAjB,KAAA,CACAH,KAAA,OACAI,MAAA,cAEAiB,UAAA,GACAF,WAAA,GACAd,aAAA,WCzFAiB,EAAAC,EAAAC,EAAA,sBAAAC,IAEA,IAAIA,EAAW,WACf,SAAAC,KAkEA,OAhEAA,EAAAC,UAAAC,kBAAA,SAAAC,GACA,OAAAA,GAEAH,EAAAC,UAAAG,iBAAA,SAAAD,GACA,OAAAA,GAEAH,EAAAC,UAAAI,UAAA,SAAAC,EAAAC,GAEA,YADA,IAAAA,IAAoCA,GAAA,GACpCC,KAAAC,KAAA,CACAC,MAAAJ,EAAAI,MACAC,UAAAL,EAAAK,UACAJ,gBAGAP,EAAAC,UAAAW,aAAA,SAAAN,EAAAC,GAEA,YADA,IAAAA,IAAoCA,GAAA,GACpCC,KAAAC,KAAA,CACAC,MAAmB1B,OAAA6B,EAAA,EAAA7B,CAAwBsB,EAAAQ,SAAAR,EAAAS,cAC3CJ,UAAAL,EAAAK,UACAK,OAAAV,EAAAW,GACAV,gBAGAP,EAAAC,UAAAiB,WAAA,SAAAZ,GACAE,KAAAW,MAAA,CACAC,OAAA,aACAC,OAAAf,EAAAgB,KACAZ,MAAAJ,EAAAI,MACAC,UAAAL,EAAAK,aAGAX,EAAAC,UAAAsB,cAAA,SAAAjB,GACAE,KAAAW,MAAA,CACAC,OAAAd,EAAAW,GACAI,OAAAf,EAAAgB,KACAX,UAAAL,EAAAK,UACAD,MAAmB1B,OAAA6B,EAAA,EAAA7B,CAAwBsB,EAAAQ,SAAAR,EAAAS,iBAG3Cf,EAAAC,UAAAuB,UAAA,SAAAC,GACA,ID7BOpD,EAAAqD,EC6BPT,EAAAQ,EAAAR,GAAAK,EAAAG,EAAAH,KACA,YAAAL,EAAA,CACA,IAAAU,EAAA,KACA,IACAA,EAAAnB,KAAAC,KAAA,CACAO,OAAAC,EACAV,YAAA,EACAG,MAA2BnB,IAG3B,MAAAqC,IAEA,IAAAC,EAAAF,KAAAE,YAAA,eACAC,EAAA9C,OAAA+C,OAAA,CAA6CF,cAAyBP,GACtEd,KAAAe,cAAA,CACAN,KACAH,UD7COzC,EC6CmCyD,ED7CnCJ,EC6CmCG,ED7B1C,CACAvD,KAAA,WACAC,YAAA,CAjBA,CACAD,KAAA,qBACA0D,cAAA,CACA1D,KAAA,YACAG,KAAA,CACAH,KAAA,OACAI,MAAAgD,GAAA,eAGAjD,KAAA,CACAH,KAAA,OACAI,MAAA,wBAEAC,aAAAC,EAAAP,OCgCAiD,KAAAQ,SAIAtB,KAAAU,WAAA,CAA6BR,MAAQtC,EAAakD,aAGlDtB,EAnEe","file":"bundle.npm.apollo-cache.f427f1ae6c36fadf0444.js","sourcesContent":["export function queryFromPojo(obj) {\n    var op = {\n        kind: 'OperationDefinition',\n        operation: 'query',\n        name: {\n            kind: 'Name',\n            value: 'GeneratedClientQuery',\n        },\n        selectionSet: selectionSetFromObj(obj),\n    };\n    var out = {\n        kind: 'Document',\n        definitions: [op],\n    };\n    return out;\n}\nexport function fragmentFromPojo(obj, typename) {\n    var frag = {\n        kind: 'FragmentDefinition',\n        typeCondition: {\n            kind: 'NamedType',\n            name: {\n                kind: 'Name',\n                value: typename || '__FakeType',\n            },\n        },\n        name: {\n            kind: 'Name',\n            value: 'GeneratedClientQuery',\n        },\n        selectionSet: selectionSetFromObj(obj),\n    };\n    var out = {\n        kind: 'Document',\n        definitions: [frag],\n    };\n    return out;\n}\nfunction selectionSetFromObj(obj) {\n    if (typeof obj === 'number' ||\n        typeof obj === 'boolean' ||\n        typeof obj === 'string' ||\n        typeof obj === 'undefined' ||\n        obj === null) {\n        return null;\n    }\n    if (Array.isArray(obj)) {\n        return selectionSetFromObj(obj[0]);\n    }\n    var selections = [];\n    Object.keys(obj).forEach(function (key) {\n        var nestedSelSet = selectionSetFromObj(obj[key]);\n        var field = {\n            kind: 'Field',\n            name: {\n                kind: 'Name',\n                value: key,\n            },\n            selectionSet: nestedSelSet || undefined,\n        };\n        selections.push(field);\n    });\n    var selectionSet = {\n        kind: 'SelectionSet',\n        selections: selections,\n    };\n    return selectionSet;\n}\nexport var justTypenameQuery = {\n    kind: 'Document',\n    definitions: [\n        {\n            kind: 'OperationDefinition',\n            operation: 'query',\n            name: null,\n            variableDefinitions: null,\n            directives: [],\n            selectionSet: {\n                kind: 'SelectionSet',\n                selections: [\n                    {\n                        kind: 'Field',\n                        alias: null,\n                        name: {\n                            kind: 'Name',\n                            value: '__typename',\n                        },\n                        arguments: [],\n                        directives: [],\n                        selectionSet: null,\n                    },\n                ],\n            },\n        },\n    ],\n};\n//# sourceMappingURL=utils.js.map","import { getFragmentQueryDocument } from 'apollo-utilities';\nimport { justTypenameQuery, queryFromPojo, fragmentFromPojo } from './utils';\nvar ApolloCache = (function () {\n    function ApolloCache() {\n    }\n    ApolloCache.prototype.transformDocument = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.transformForLink = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.read({\n            query: options.query,\n            variables: options.variables,\n            optimistic: optimistic,\n        });\n    };\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.read({\n            query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n            variables: options.variables,\n            rootId: options.id,\n            optimistic: optimistic,\n        });\n    };\n    ApolloCache.prototype.writeQuery = function (options) {\n        this.write({\n            dataId: 'ROOT_QUERY',\n            result: options.data,\n            query: options.query,\n            variables: options.variables,\n        });\n    };\n    ApolloCache.prototype.writeFragment = function (options) {\n        this.write({\n            dataId: options.id,\n            result: options.data,\n            variables: options.variables,\n            query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n        });\n    };\n    ApolloCache.prototype.writeData = function (_a) {\n        var id = _a.id, data = _a.data;\n        if (typeof id !== 'undefined') {\n            var typenameResult = null;\n            try {\n                typenameResult = this.read({\n                    rootId: id,\n                    optimistic: false,\n                    query: justTypenameQuery,\n                });\n            }\n            catch (e) {\n            }\n            var __typename = (typenameResult && typenameResult.__typename) || '__ClientData';\n            var dataToWrite = Object.assign({ __typename: __typename }, data);\n            this.writeFragment({\n                id: id,\n                fragment: fragmentFromPojo(dataToWrite, __typename),\n                data: dataToWrite,\n            });\n        }\n        else {\n            this.writeQuery({ query: queryFromPojo(data), data: data });\n        }\n    };\n    return ApolloCache;\n}());\nexport { ApolloCache };\n//# sourceMappingURL=cache.js.map"],"sourceRoot":""}