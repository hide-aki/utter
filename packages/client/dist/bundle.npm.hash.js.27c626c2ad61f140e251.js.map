{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/hash.js/lib/hash/sha/256.js","webpack:////var/www/html/utter/node_modules/hash.js/lib/hash/utils.js","webpack:////var/www/html/utter/node_modules/hash.js/lib/hash/common.js","webpack:////var/www/html/utter/node_modules/hash.js/lib/hash/sha/common.js"],"names":["utils","__webpack_require__","common","shaCommon","assert","sum32","sum32_4","sum32_5","ch32","maj32","s0_256","s1_256","g0_256","g1_256","BlockHash","sha256_K","SHA256","this","call","h","k","W","Array","inherits","module","exports","blockSize","outSize","hmacStrength","padLength","prototype","_update","msg","start","i","length","a","b","c","d","e","f","g","T1","T2","_digest","enc","toHex32","split32","isSurrogatePair","charCodeAt","htonl","w","zero2","word","zero8","toArray","isArray","slice","res","replace","push","parseInt","p","toHex","toString","endian","join32","end","len","m","rotr32","rotl32","sum32_3","sum64","buf","pos","ah","al","bh","lo","hi","sum64_hi","bl","sum64_lo","sum64_4_hi","ch","cl","dh","dl","carry","sum64_4_lo","sum64_5_hi","eh","el","sum64_5_lo","rotr64_hi","num","rotr64_lo","shr64_hi","shr64_lo","pending","pendingTotal","constructor","_delta8","_delta32","update","concat","r","digest","_pad","bytes","t","x","y","z","p32","ft_1","s"],"mappings":"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","file":"bundle.npm.hash.js.27c626c2ad61f140e251.js","sourcesContent":["'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n"],"sourceRoot":""}