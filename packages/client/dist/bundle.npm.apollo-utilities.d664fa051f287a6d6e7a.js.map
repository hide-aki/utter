{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-utilities/node_modules/ts-invariant/lib/invariant.esm.js","webpack:////var/www/html/utter/node_modules/apollo-utilities/lib/bundle.esm.js"],"names":["__webpack_require__","d","__webpack_exports__","InvariantError","invariant","tslib__WEBPACK_IMPORTED_MODULE_0__","genericMessage","_a","Object","setPrototypeOf","obj","proto","__proto__","_super","message","_this","call","this","framesToPop","name","prototype","Error","condition","warn","args","_i","arguments","length","console","apply","error","process","getDirectiveInfoFromField","shouldInclude","hasDirectives","hasClientExports","getFragmentQueryDocument","getMutationDefinition","getOperationDefinition","getOperationName","getFragmentDefinitions","getQueryDefinition","getMainDefinition","createFragmentMap","getDefaultValues","addTypenameToDocument","removeConnectionDirectiveFromDocument","buildQueryFromSelectionSet","removeClientSetsFromDocument","storeKeyNameFromField","getStoreKeyName","argumentsObjectFromField","resultKeyNameFromField","isField","isInlineFragment","isIdValue","toIdValue","isJsonValue","assign","cloneDeep","isProduction","isTest","tryFunctionOrLogError","graphQLResultHasError","isEqual","mergeDeep","mergeDeepArray","graphql_language_visitor__WEBPACK_IMPORTED_MODULE_0__","ts_invariant__WEBPACK_IMPORTED_MODULE_1__","tslib__WEBPACK_IMPORTED_MODULE_2__","fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_3__","fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_3___default","n","valueToObjectRepresentation","argObj","value","variables","kind","isIntValue","isFloatValue","Number","isBooleanValue","isStringValue","isObjectValue","nestedArgObj_1","fields","map","isVariable","variableValue","isListValue","values","listValue","nestedArgArrayObj","isEnumValue","isNullValue","field","directivesObj","directives","forEach","directive","KNOWN_DIRECTIVES","fieldName","filterKeys","sort","queryArgs_1","filteredArgs_1","key","JSON","stringify","completeFieldName","stringifiedArgs","keys","indexOf","argObj_1","alias","selection","idObject","type","generated","idConfig","id","typename","undefined","jsonObject","directiveObj_1","res","directiveArguments","directiveName","ifArgument","ifValue","evaledValue","names","doc","Directive","node","push","getDirectiveNames","some","document","fragmentName","actualFragmentName","fragments","definitions","definition","operation","selectionSet","selections","concat","target","sources","source","checkDocument","mutationDef","filter","operations","x","queryDef","queryDoc","fragmentDefinition","symTable","fragment","variableDefinitions","defaultValues","defaultValue","variable","defaultValueObj","filterInPlace","array","test","context","elem","i","TYPENAME_FIELD","nullIfDocIsEmpty","isEmpty","op","every","fragmentDef","getFragmentDefinition","getDirectiveMatcher","dir","removeDirectivesFromDocument","variablesInUse","create","variablesToRemove","fragmentSpreadsInUse","fragmentSpreadsToRemove","modifiedDoc","Variable","enter","_key","parent","Field","remove","arg","getAllFragmentSpreadsFromSelectionSet","allFragments","frag","FragmentSpread","v","config","argMatcher","argument","aConfig","getArgumentMatcher","OperationDefinition","varDef","shouldRemoveField","argConfig","argMatchCount_1","Argument","removeArgumentsFromDocument","fs","def","FragmentDefinition","removeFragmentSpreadFromDocument","SelectionSet","lastIndexOf","connectionRemoveConfig","willRemove","toString","cloneDeepHelper","val","seen","has","get","copy_1","slice","set","child","copy_2","getPrototypeOf","Map","isEnv","env","f","e","result","errors","a","b","Date","getTime","hasOwnProperty","count","pastCopies","shallowCopyForMerge","mergeHelper","isObject","isExtensible","sourceKey","sourceValue","targetValue","Array","isArray"],"mappings":"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","file":"bundle.npm.apollo-utilities.d664fa051f287a6d6e7a.js","sourcesContent":["import { __extends } from 'tslib';\n\nvar genericMessage = \"Invariant Violation\";\r\nvar _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {\r\n    obj.__proto__ = proto;\r\n    return obj;\r\n} : _a;\r\nvar InvariantError = /** @class */ (function (_super) {\r\n    __extends(InvariantError, _super);\r\n    function InvariantError(message) {\r\n        if (message === void 0) { message = genericMessage; }\r\n        var _this = _super.call(this, message) || this;\r\n        _this.framesToPop = 1;\r\n        _this.name = genericMessage;\r\n        setPrototypeOf(_this, InvariantError.prototype);\r\n        return _this;\r\n    }\r\n    return InvariantError;\r\n}(Error));\r\nfunction invariant(condition, message) {\r\n    if (!condition) {\r\n        throw new InvariantError(message);\r\n    }\r\n}\r\n(function (invariant) {\r\n    function warn() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return console.warn.apply(console, args);\r\n    }\r\n    invariant.warn = warn;\r\n    function error() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return console.error.apply(console, args);\r\n    }\r\n    invariant.error = error;\r\n})(invariant || (invariant = {}));\r\nvar invariant$1 = invariant;\n\nexport default invariant$1;\nexport { InvariantError, invariant };\n","import { visit } from 'graphql/language/visitor';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { __assign } from 'tslib';\nimport stringify from 'fast-json-stable-stringify';\n\nfunction isScalarValue(value) {\n    return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\nfunction isNumberValue(value) {\n    return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\nfunction isStringValue(value) {\n    return value.kind === 'StringValue';\n}\nfunction isBooleanValue(value) {\n    return value.kind === 'BooleanValue';\n}\nfunction isIntValue(value) {\n    return value.kind === 'IntValue';\n}\nfunction isFloatValue(value) {\n    return value.kind === 'FloatValue';\n}\nfunction isVariable(value) {\n    return value.kind === 'Variable';\n}\nfunction isObjectValue(value) {\n    return value.kind === 'ObjectValue';\n}\nfunction isListValue(value) {\n    return value.kind === 'ListValue';\n}\nfunction isEnumValue(value) {\n    return value.kind === 'EnumValue';\n}\nfunction isNullValue(value) {\n    return value.kind === 'NullValue';\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    }\n    else {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\"\" +\n            'is not supported. Use variables instead of inline arguments to ' +\n            'overcome this limitation.');\n    }\n}\nfunction storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function (directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function (_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    'connection',\n    'include',\n    'skip',\n    'client',\n    'rest',\n    'export',\n];\nfunction getStoreKeyName(fieldName, args, directives) {\n    if (directives &&\n        directives['connection'] &&\n        directives['connection']['key']) {\n        if (directives['connection']['filter'] &&\n            directives['connection']['filter'].length > 0) {\n            var filterKeys = directives['connection']['filter']\n                ? directives['connection']['filter']\n                : [];\n            filterKeys.sort();\n            var queryArgs_1 = args;\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function (key) {\n                filteredArgs_1[key] = queryArgs_1[key];\n            });\n            return directives['connection']['key'] + \"(\" + JSON.stringify(filteredArgs_1) + \")\";\n        }\n        else {\n            return directives['connection']['key'];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        var stringifiedArgs = stringify(args);\n        completeFieldName += \"(\" + stringifiedArgs + \")\";\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function (key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)\n                return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\" + key + \"(\" + JSON.stringify(directives[key]) + \")\";\n            }\n            else {\n                completeFieldName += \"@\" + key;\n            }\n        });\n    }\n    return completeFieldName;\n}\nfunction argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nfunction resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nfunction isField(selection) {\n    return selection.kind === 'Field';\n}\nfunction isInlineFragment(selection) {\n    return selection.kind === 'InlineFragment';\n}\nfunction isIdValue(idObject) {\n    return idObject &&\n        idObject.type === 'id' &&\n        typeof idObject.generated === 'boolean';\n}\nfunction toIdValue(idConfig, generated) {\n    if (generated === void 0) { generated = false; }\n    return __assign({ type: 'id', generated: generated }, (typeof idConfig === 'string'\n        ? { id: idConfig, typename: undefined }\n        : idConfig));\n}\nfunction isJsonValue(jsonObject) {\n    return (jsonObject != null &&\n        typeof jsonObject === 'object' &&\n        jsonObject.type === 'json');\n}\nfunction defaultValueFromVariable(node) {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"Variable nodes are not supported by valueFromNode\");\n}\nfunction valueFromNode(node, onVariable) {\n    if (onVariable === void 0) { onVariable = defaultValueFromVariable; }\n    switch (node.kind) {\n        case 'Variable':\n            return onVariable(node);\n        case 'NullValue':\n            return null;\n        case 'IntValue':\n            return parseInt(node.value, 10);\n        case 'FloatValue':\n            return parseFloat(node.value);\n        case 'ListValue':\n            return node.values.map(function (v) { return valueFromNode(v, onVariable); });\n        case 'ObjectValue': {\n            var value = {};\n            for (var _i = 0, _a = node.fields; _i < _a.length; _i++) {\n                var field = _a[_i];\n                value[field.name.value] = valueFromNode(field.value, onVariable);\n            }\n            return value;\n        }\n        default:\n            return node.value;\n    }\n}\n\nfunction getDirectiveInfoFromField(field, variables) {\n    if (field.directives && field.directives.length) {\n        var directiveObj_1 = {};\n        field.directives.forEach(function (directive) {\n            directiveObj_1[directive.name.value] = argumentsObjectFromField(directive, variables);\n        });\n        return directiveObj_1;\n    }\n    return null;\n}\nfunction shouldInclude(selection, variables) {\n    if (variables === void 0) { variables = {}; }\n    if (!selection.directives) {\n        return true;\n    }\n    var res = true;\n    selection.directives.forEach(function (directive) {\n        if (directive.name.value !== 'skip' && directive.name.value !== 'include') {\n            return;\n        }\n        var directiveArguments = directive.arguments || [];\n        var directiveName = directive.name.value;\n        process.env.NODE_ENV === \"production\" ? invariant(directiveArguments.length === 1) : invariant(directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n        var ifArgument = directiveArguments[0];\n        process.env.NODE_ENV === \"production\" ? invariant(ifArgument.name && ifArgument.name.value === 'if') : invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n        var ifValue = directiveArguments[0].value;\n        var evaledValue = false;\n        if (!ifValue || ifValue.kind !== 'BooleanValue') {\n            process.env.NODE_ENV === \"production\" ? invariant(ifValue.kind === 'Variable') : invariant(ifValue.kind === 'Variable', \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n            evaledValue = variables[ifValue.name.value];\n            process.env.NODE_ENV === \"production\" ? invariant(evaledValue !== void 0) : invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directiveName + \" directive.\");\n        }\n        else {\n            evaledValue = ifValue.value;\n        }\n        if (directiveName === 'skip') {\n            evaledValue = !evaledValue;\n        }\n        if (!evaledValue) {\n            res = false;\n        }\n    });\n    return res;\n}\nfunction getDirectiveNames(doc) {\n    var names = [];\n    visit(doc, {\n        Directive: function (node) {\n            names.push(node.name.value);\n        },\n    });\n    return names;\n}\nfunction hasDirectives(names, doc) {\n    return getDirectiveNames(doc).some(function (name) { return names.indexOf(name) > -1; });\n}\nfunction hasClientExports(document) {\n    return (document &&\n        hasDirectives(['client'], document) &&\n        hasDirectives(['export'], document));\n}\n\nfunction getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" +\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n        }\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === 'undefined') {\n        process.env.NODE_ENV === \"production\" ? invariant(fragments.length === 1) : invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = __assign({}, document, { definitions: [\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ].concat(document.definitions) });\n    return query;\n}\n\nfunction assign(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    sources.forEach(function (source) {\n        if (typeof source === 'undefined' || source === null) {\n            return;\n        }\n        Object.keys(source).forEach(function (key) {\n            target[key] = source[key];\n        });\n    });\n    return target;\n}\n\nfunction getMutationDefinition(doc) {\n    checkDocument(doc);\n    var mutationDef = doc.definitions.filter(function (definition) {\n        return definition.kind === 'OperationDefinition' &&\n            definition.operation === 'mutation';\n    })[0];\n    process.env.NODE_ENV === \"production\" ? invariant(mutationDef) : invariant(mutationDef, 'Must contain a mutation definition.');\n    return mutationDef;\n}\nfunction checkDocument(doc) {\n    process.env.NODE_ENV === \"production\" ? invariant(doc && doc.kind === 'Document') : invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })\n        .map(function (definition) {\n        if (definition.kind !== 'OperationDefinition') {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n        }\n        return definition;\n    });\n    process.env.NODE_ENV === \"production\" ? invariant(operations.length <= 1) : invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n    return doc;\n}\nfunction getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];\n}\nfunction getOperationDefinitionOrDie(document) {\n    var def = getOperationDefinition(document);\n    process.env.NODE_ENV === \"production\" ? invariant(def) : invariant(def, \"GraphQL document is missing an operation\");\n    return def;\n}\nfunction getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\nfunction getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });\n}\nfunction getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    process.env.NODE_ENV === \"production\" ? invariant(queryDef && queryDef.operation === 'query') : invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.');\n    return queryDef;\n}\nfunction getFragmentDefinition(doc) {\n    process.env.NODE_ENV === \"production\" ? invariant(doc.kind === 'Document') : invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    process.env.NODE_ENV === \"production\" ? invariant(doc.definitions.length <= 1) : invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.');\n    var fragmentDef = doc.definitions[0];\n    process.env.NODE_ENV === \"production\" ? invariant(fragmentDef.kind === 'FragmentDefinition') : invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.');\n    return fragmentDef;\n}\nfunction getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === 'OperationDefinition') {\n            var operation = definition.operation;\n            if (operation === 'query' ||\n                operation === 'mutation' ||\n                operation === 'subscription') {\n                return definition;\n            }\n        }\n        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\nfunction createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nfunction getDefaultValues(definition) {\n    if (definition &&\n        definition.variableDefinitions &&\n        definition.variableDefinitions.length) {\n        var defaultValues = definition.variableDefinitions\n            .filter(function (_a) {\n            var defaultValue = _a.defaultValue;\n            return defaultValue;\n        })\n            .map(function (_a) {\n            var variable = _a.variable, defaultValue = _a.defaultValue;\n            var defaultValueObj = {};\n            valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);\n            return defaultValueObj;\n        });\n        return assign.apply(void 0, [{}].concat(defaultValues));\n    }\n    return {};\n}\nfunction variablesInOperation(operation) {\n    var names = new Set();\n    if (operation.variableDefinitions) {\n        for (var _i = 0, _a = operation.variableDefinitions; _i < _a.length; _i++) {\n            var definition = _a[_i];\n            names.add(definition.variable.name.value);\n        }\n    }\n    return names;\n}\n\nfunction filterInPlace(array, test, context) {\n    var target = 0;\n    array.forEach(function (elem, i) {\n        if (test.call(this, elem, i, array)) {\n            array[target++] = elem;\n        }\n    }, context);\n    array.length = target;\n    return array;\n}\n\nvar TYPENAME_FIELD = {\n    kind: 'Field',\n    name: {\n        kind: 'Name',\n        value: '__typename',\n    },\n};\nfunction isEmpty(op, fragments) {\n    return op.selectionSet.selections.every(function (selection) {\n        return selection.kind === 'FragmentSpread' &&\n            isEmpty(fragments[selection.name.value], fragments);\n    });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc)))\n        ? null\n        : doc;\n}\nfunction getDirectiveMatcher(directives) {\n    return function directiveMatcher(directive) {\n        return directives.some(function (dir) {\n            return (dir.name && dir.name === directive.name.value) ||\n                (dir.test && dir.test(directive));\n        });\n    };\n}\nfunction removeDirectivesFromDocument(directives, doc) {\n    var variablesInUse = Object.create(null);\n    var variablesToRemove = [];\n    var fragmentSpreadsInUse = Object.create(null);\n    var fragmentSpreadsToRemove = [];\n    var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n        Variable: {\n            enter: function (node, _key, parent) {\n                if (parent.kind !== 'VariableDefinition') {\n                    variablesInUse[node.name.value] = true;\n                }\n            },\n        },\n        Field: {\n            enter: function (node) {\n                if (directives && node.directives) {\n                    var shouldRemoveField = directives.some(function (directive) { return directive.remove; });\n                    if (shouldRemoveField &&\n                        node.directives &&\n                        node.directives.some(getDirectiveMatcher(directives))) {\n                        if (node.arguments) {\n                            node.arguments.forEach(function (arg) {\n                                if (arg.value.kind === 'Variable') {\n                                    variablesToRemove.push({\n                                        name: arg.value.name.value,\n                                    });\n                                }\n                            });\n                        }\n                        if (node.selectionSet) {\n                            getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                                fragmentSpreadsToRemove.push({\n                                    name: frag.name.value,\n                                });\n                            });\n                        }\n                        return null;\n                    }\n                }\n            },\n        },\n        FragmentSpread: {\n            enter: function (node) {\n                fragmentSpreadsInUse[node.name.value] = true;\n            },\n        },\n        Directive: {\n            enter: function (node) {\n                if (getDirectiveMatcher(directives)(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n    if (modifiedDoc &&\n        filterInPlace(variablesToRemove, function (v) { return !variablesInUse[v.name]; }).length) {\n        modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n    }\n    if (modifiedDoc &&\n        filterInPlace(fragmentSpreadsToRemove, function (fs) { return !fragmentSpreadsInUse[fs.name]; })\n            .length) {\n        modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n    }\n    return modifiedDoc;\n}\nfunction addTypenameToDocument(doc) {\n    return visit(checkDocument(doc), {\n        SelectionSet: {\n            enter: function (node, _key, parent) {\n                if (parent &&\n                    parent.kind === 'OperationDefinition') {\n                    return;\n                }\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                var skip = selections.some(function (selection) {\n                    return (selection.kind === 'Field' &&\n                        (selection.name.value === '__typename' ||\n                            selection.name.value.lastIndexOf('__', 0) === 0));\n                });\n                if (skip) {\n                    return;\n                }\n                return __assign({}, node, { selections: selections.concat([TYPENAME_FIELD]) });\n            },\n        },\n    });\n}\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === 'connection';\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {\n                console.warn('Removing an @connection directive even though it does not have a key. ' +\n                    'You may want to use the key parameter to specify a store key.');\n            }\n        }\n        return willRemove;\n    },\n};\nfunction removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    return (selectionSet &&\n        selectionSet.selections &&\n        selectionSet.selections.some(function (selection) {\n            return hasDirectivesInSelection(directives, selection, nestedCheck);\n        }));\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (selection.kind !== 'Field' || !selection) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return (selection.directives.some(getDirectiveMatcher(directives)) ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nfunction getDirectivesFromDocument(directives, doc) {\n    checkDocument(doc);\n    var parentPath;\n    return nullIfDocIsEmpty(visit(doc, {\n        SelectionSet: {\n            enter: function (node, _key, _parent, path) {\n                var currentPath = path.join('-');\n                if (!parentPath ||\n                    currentPath === parentPath ||\n                    !currentPath.startsWith(parentPath)) {\n                    if (node.selections) {\n                        var selectionsWithDirectives = node.selections.filter(function (selection) { return hasDirectivesInSelection(directives, selection); });\n                        if (hasDirectivesInSelectionSet(directives, node, false)) {\n                            parentPath = currentPath;\n                        }\n                        return __assign({}, node, { selections: selectionsWithDirectives });\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            },\n        },\n    }));\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function (aConfig) {\n            return argument.value &&\n                argument.value.kind === 'Variable' &&\n                argument.value.name &&\n                (aConfig.name === argument.value.name.value ||\n                    (aConfig.test && aConfig.test(argument)));\n        });\n    };\n}\nfunction removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty(visit(doc, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign({}, node, { variableDefinitions: node.variableDefinitions.filter(function (varDef) {\n                        return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });\n                    }) });\n            },\n        },\n        Field: {\n            enter: function (node) {\n                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    node.arguments.forEach(function (arg) {\n                        if (argMatcher(arg)) {\n                            argMatchCount_1 += 1;\n                        }\n                    });\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            },\n        },\n        Argument: {\n            enter: function (node) {\n                if (argMatcher(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n}\nfunction removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function (def) { return def.name === node.name.value; })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty(visit(doc, {\n        FragmentSpread: { enter: enter },\n        FragmentDefinition: { enter: enter },\n    }));\n}\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n    var allFragments = [];\n    selectionSet.selections.forEach(function (selection) {\n        if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') &&\n            selection.selectionSet) {\n            getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) { return allFragments.push(frag); });\n        }\n        else if (selection.kind === 'FragmentSpread') {\n            allFragments.push(selection);\n        }\n    });\n    return allFragments;\n}\nfunction buildQueryFromSelectionSet(document) {\n    var definition = getMainDefinition(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === 'query') {\n        return document;\n    }\n    var modifiedDoc = visit(document, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign({}, node, { operation: 'query' });\n            },\n        },\n    });\n    return modifiedDoc;\n}\nfunction removeClientSetsFromDocument(document) {\n    checkDocument(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function (directive) { return directive.name.value === 'client'; },\n            remove: true,\n        },\n    ], document);\n    if (modifiedDoc) {\n        modifiedDoc = visit(modifiedDoc, {\n            FragmentDefinition: {\n                enter: function (node) {\n                    if (node.selectionSet) {\n                        var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n                            return (selection.kind === 'Field' &&\n                                selection.name.value === '__typename');\n                        });\n                        if (isTypenameOnly) {\n                            return null;\n                        }\n                    }\n                },\n            },\n        });\n    }\n    return modifiedDoc;\n}\n\nvar toString = Object.prototype.toString;\nfunction cloneDeep(value) {\n    return cloneDeepHelper(value, new Map());\n}\nfunction cloneDeepHelper(val, seen) {\n    switch (toString.call(val)) {\n        case \"[object Array]\": {\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_1 = val.slice(0);\n            seen.set(val, copy_1);\n            copy_1.forEach(function (child, i) {\n                copy_1[i] = cloneDeepHelper(child, seen);\n            });\n            return copy_1;\n        }\n        case \"[object Object]\": {\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_2 = Object.create(Object.getPrototypeOf(val));\n            seen.set(val, copy_2);\n            Object.keys(val).forEach(function (key) {\n                copy_2[key] = cloneDeepHelper(val[key], seen);\n            });\n            return copy_2;\n        }\n        default:\n            return val;\n    }\n}\n\nfunction getEnv() {\n    if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n        return process.env.NODE_ENV;\n    }\n    return 'development';\n}\nfunction isEnv(env) {\n    return getEnv() === env;\n}\nfunction isProduction() {\n    return isEnv('production') === true;\n}\nfunction isDevelopment() {\n    return isEnv('development') === true;\n}\nfunction isTest() {\n    return isEnv('test') === true;\n}\n\nfunction tryFunctionOrLogError(f) {\n    try {\n        return f();\n    }\n    catch (e) {\n        if (console.error) {\n            console.error(e);\n        }\n    }\n}\nfunction graphQLResultHasError(result) {\n    return result.errors && result.errors.length;\n}\n\nfunction isEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime();\n    }\n    if (a != null &&\n        typeof a === 'object' &&\n        b != null &&\n        typeof b === 'object') {\n        for (var key in a) {\n            if (Object.prototype.hasOwnProperty.call(a, key)) {\n                if (!Object.prototype.hasOwnProperty.call(b, key)) {\n                    return false;\n                }\n                if (!isEqual(a[key], b[key])) {\n                    return false;\n                }\n            }\n        }\n        for (var key in b) {\n            if (Object.prototype.hasOwnProperty.call(b, key) &&\n                !Object.prototype.hasOwnProperty.call(a, key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction deepFreeze(o) {\n    Object.freeze(o);\n    Object.getOwnPropertyNames(o).forEach(function (prop) {\n        if (o[prop] !== null &&\n            (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n            !Object.isFrozen(o[prop])) {\n            deepFreeze(o[prop]);\n        }\n    });\n    return o;\n}\nfunction maybeDeepFreeze(obj) {\n    if (isDevelopment() || isTest()) {\n        var symbolIsPolyfilled = typeof Symbol === 'function' && typeof Symbol('') === 'string';\n        if (!symbolIsPolyfilled) {\n            return deepFreeze(obj);\n        }\n    }\n    return obj;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction mergeDeep() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\nfunction mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var pastCopies = [];\n        target = shallowCopyForMerge(target, pastCopies);\n        for (var i = 1; i < count; ++i) {\n            target = mergeHelper(target, sources[i], pastCopies);\n        }\n    }\n    return target;\n}\nfunction isObject(obj) {\n    return obj !== null && typeof obj === 'object';\n}\nfunction mergeHelper(target, source, pastCopies) {\n    if (isObject(source) && isObject(target)) {\n        if (Object.isExtensible && !Object.isExtensible(target)) {\n            target = shallowCopyForMerge(target, pastCopies);\n        }\n        Object.keys(source).forEach(function (sourceKey) {\n            var sourceValue = source[sourceKey];\n            if (hasOwnProperty.call(target, sourceKey)) {\n                var targetValue = target[sourceKey];\n                if (sourceValue !== targetValue) {\n                    target[sourceKey] = mergeHelper(shallowCopyForMerge(targetValue, pastCopies), sourceValue, pastCopies);\n                }\n            }\n            else {\n                target[sourceKey] = sourceValue;\n            }\n        });\n        return target;\n    }\n    return source;\n}\nfunction shallowCopyForMerge(value, pastCopies) {\n    if (value !== null &&\n        typeof value === 'object' &&\n        pastCopies.indexOf(value) < 0) {\n        if (Array.isArray(value)) {\n            value = value.slice(0);\n        }\n        else {\n            value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n        }\n        pastCopies.push(value);\n    }\n    return value;\n}\n\nvar haveWarned = Object.create({});\nfunction warnOnceInDevelopment(msg, type) {\n    if (type === void 0) { type = 'warn'; }\n    if (isProduction()) {\n        return;\n    }\n    if (!haveWarned[msg]) {\n        if (!isTest()) {\n            haveWarned[msg] = true;\n        }\n        switch (type) {\n            case 'error':\n                console.error(msg);\n                break;\n            default:\n                console.warn(msg);\n        }\n    }\n}\n\nfunction stripSymbols(data) {\n    return JSON.parse(JSON.stringify(data));\n}\n\nexport { getDirectiveInfoFromField, shouldInclude, getDirectiveNames, hasDirectives, hasClientExports, getFragmentQueryDocument, getMutationDefinition, checkDocument, getOperationDefinition, getOperationDefinitionOrDie, getOperationName, getFragmentDefinitions, getQueryDefinition, getFragmentDefinition, getMainDefinition, createFragmentMap, getDefaultValues, variablesInOperation, removeDirectivesFromDocument, addTypenameToDocument, removeConnectionDirectiveFromDocument, getDirectivesFromDocument, removeArgumentsFromDocument, removeFragmentSpreadFromDocument, buildQueryFromSelectionSet, removeClientSetsFromDocument, isScalarValue, isNumberValue, valueToObjectRepresentation, storeKeyNameFromField, getStoreKeyName, argumentsObjectFromField, resultKeyNameFromField, isField, isInlineFragment, isIdValue, toIdValue, isJsonValue, valueFromNode, assign, cloneDeep, getEnv, isEnv, isProduction, isDevelopment, isTest, tryFunctionOrLogError, graphQLResultHasError, isEqual, maybeDeepFreeze, mergeDeep, mergeDeepArray, warnOnceInDevelopment, stripSymbols };\n//# sourceMappingURL=bundle.esm.js.map\n"],"sourceRoot":""}