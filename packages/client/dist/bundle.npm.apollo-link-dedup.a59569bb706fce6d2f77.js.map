{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-link-dedup/lib/bundle.esm.js"],"names":["__webpack_require__","d","__webpack_exports__","DedupLink","tslib__WEBPACK_IMPORTED_MODULE_0__","apollo_link__WEBPACK_IMPORTED_MODULE_1__","_super","_this","apply","this","arguments","inFlightRequestObservables","Map","subscribers","Object","prototype","request","operation","forward","getContext","forceFetch","key","toKey","cleanup","operationKey","delete","get","subscription_1","singleObserver_1","sharedObserver","observer","prev","next","error","complete","set","concat","bind","subscribe","result","previous","forEach","err","unsubscribe"],"mappings":"4FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,QAAAK,EAAAL,EAAA,QAGAG,EAAA,SAAAG,GAEA,SAAAH,IACA,IAAAI,EAAA,OAAAD,KAAAE,MAAAC,KAAAC,YAAAD,KAGA,OAFAF,EAAAI,2BAAA,IAAAC,IACAL,EAAAM,YAAA,IAAAD,IACAL,EAqDA,OA1DIO,OAAAV,EAAA,EAAAU,CAASX,EAAAG,GAObH,EAAAY,UAAAC,QAAA,SAAAC,EAAAC,GACA,IAAAX,EAAAE,KACA,GAAAQ,EAAAE,aAAAC,WACA,OAAAF,EAAAD,GAEA,IAAAI,EAAAJ,EAAAK,QACAC,EAAA,SAAAC,GAGA,OAFAjB,EAAAI,2BAAAc,OAAAD,GACAjB,EAAAM,YAAAa,IAAAF,IAGA,IAAAf,KAAAE,2BAAAe,IAAAL,GAAA,CACA,IACAM,EADAC,EAAAV,EAAAD,GAEAY,EAAA,IAAqCxB,EAAA,EAAU,SAAAyB,GAC/C,IAAAC,EAAAxB,EAAAM,YAAAa,IAAAL,GA0BA,OAzBAU,IACAA,EAAA,CAA4BC,KAAA,GAAAC,MAAA,GAAAC,SAAA,KAC5B3B,EAAAM,YAAAsB,IAAAd,EAAA,CACAW,KAAAD,EAAAC,KAAAI,OAAA,CAAAN,EAAAE,KAAAK,KAAAP,KACAG,MAAAF,EAAAE,MAAAG,OAAA,CAAAN,EAAAG,MAAAI,KAAAP,KACAI,SAAAH,EAAAG,SAAAE,OAAA,CAAAN,EAAAI,SAAAG,KAAAP,OAEAH,IACAA,EAAAC,EAAAU,UAAA,CACAN,KAAA,SAAAO,GACA,IAAAC,EAAAjB,EAAAF,GACAd,EAAAM,YAAAY,OAAAJ,GACAmB,IACAA,EAAAR,KAAAS,QAAA,SAAAT,GAAuE,OAAAA,EAAAO,KACvEC,EAAAN,SAAAO,QAAA,SAAAP,GAA+E,OAAAA,QAG/ED,MAAA,SAAAA,GACA,IAAAO,EAAAjB,EAAAF,GACAd,EAAAM,YAAAY,OAAAJ,GACAmB,GACAA,EAAAP,MAAAQ,QAAA,SAAAC,GAAuE,OAAAA,EAAAT,SAIvE,WACAN,GACAA,EAAAgB,cACApC,EAAAI,2BAAAc,OAAAJ,MAGAZ,KAAAE,2BAAAwB,IAAAd,EAAAQ,GAEA,OAAApB,KAAAE,2BAAAe,IAAAL,IAEAlB,EA3DA,CAHAH,EAAA,QA+DE","file":"bundle.npm.apollo-link-dedup.a59569bb706fce6d2f77.js","sourcesContent":["import { __extends } from 'tslib';\nimport { Observable, ApolloLink } from 'apollo-link';\n\nvar DedupLink = (function (_super) {\n    __extends(DedupLink, _super);\n    function DedupLink() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inFlightRequestObservables = new Map();\n        _this.subscribers = new Map();\n        return _this;\n    }\n    DedupLink.prototype.request = function (operation, forward) {\n        var _this = this;\n        if (operation.getContext().forceFetch) {\n            return forward(operation);\n        }\n        var key = operation.toKey();\n        var cleanup = function (operationKey) {\n            _this.inFlightRequestObservables.delete(operationKey);\n            var prev = _this.subscribers.get(operationKey);\n            return prev;\n        };\n        if (!this.inFlightRequestObservables.get(key)) {\n            var singleObserver_1 = forward(operation);\n            var subscription_1;\n            var sharedObserver = new Observable(function (observer) {\n                var prev = _this.subscribers.get(key);\n                if (!prev)\n                    prev = { next: [], error: [], complete: [] };\n                _this.subscribers.set(key, {\n                    next: prev.next.concat([observer.next.bind(observer)]),\n                    error: prev.error.concat([observer.error.bind(observer)]),\n                    complete: prev.complete.concat([observer.complete.bind(observer)]),\n                });\n                if (!subscription_1) {\n                    subscription_1 = singleObserver_1.subscribe({\n                        next: function (result) {\n                            var previous = cleanup(key);\n                            _this.subscribers.delete(key);\n                            if (previous) {\n                                previous.next.forEach(function (next) { return next(result); });\n                                previous.complete.forEach(function (complete) { return complete(); });\n                            }\n                        },\n                        error: function (error) {\n                            var previous = cleanup(key);\n                            _this.subscribers.delete(key);\n                            if (previous)\n                                previous.error.forEach(function (err) { return err(error); });\n                        },\n                    });\n                }\n                return function () {\n                    if (subscription_1)\n                        subscription_1.unsubscribe();\n                    _this.inFlightRequestObservables.delete(key);\n                };\n            });\n            this.inFlightRequestObservables.set(key, sharedObserver);\n        }\n        return this.inFlightRequestObservables.get(key);\n    };\n    return DedupLink;\n}(ApolloLink));\n\nexport { DedupLink };\n//# sourceMappingURL=bundle.esm.js.map\n"],"sourceRoot":""}