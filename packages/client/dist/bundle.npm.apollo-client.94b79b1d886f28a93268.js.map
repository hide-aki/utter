{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-client/node_modules/ts-invariant/lib/invariant.esm.js","webpack:////var/www/html/utter/node_modules/apollo-client/bundle.esm.js"],"names":["genericMessage","invariant_esm_a","Object","setPrototypeOf","obj","proto","__proto__","invariant_esm_InvariantError","_super","InvariantError","message","_this","call","this","framesToPop","name","prototype","tslib_es6","Error","invariant","condition","warn","args","_i","arguments","length","console","apply","error","NetworkStatus","isNetworkRequestInFlight","networkStatus","__webpack_require__","d","__webpack_exports__","bundle_esm_ApolloClient","bundle_esm_ObservableQuery","isApolloError","bundle_esm_ApolloError","FetchType","bundle_esm_Observable","Observable","es","lib_bundle_esm","err","hasOwnProperty","generateErrorMessage","Array","isArray","graphQLErrors","forEach","graphQLError","errorMessage","networkError","replace","ApolloError","_a","extraInfo","ObservableQuery","queryManager","options","_b","shouldSubscribe","observer","onSubscribe","isTornDown","variables","queryId","generateQueryId","observers","subscriptionHandles","result","that","Promise","resolve","reject","subscription","next","some","obs","removeQuery","setTimeout","unsubscribe","subscribe","currentResult","getCurrentResult","undefined","data","lastError","lastResult","loading","storeValue","policy","queryStoreValue","queryStore","get","errorPolicy","assign","getCurrentQueryResult","partial","queryLoading","fetchPolicy","ready","errors","stale","lastResultSnapshot","bundle_esm","isDifferentFromLastResult","newResult","snapshot","getLastResult","getLastError","resetLastResults","refetch","isNetworkFetchPolicy","combinedOptions","fetchQuery","then","fetchMore","fetchMoreOptions","updateQuery","qid","query","normal","fetchMoreResult","previousResult","subscribeToMore","startGraphQLSubscription","document","subscriptionData","previous","onError","push","i","indexOf","splice","setOptions","opts","oldOptions","pollInterval","startPolling","stopPolling","tryFetch","setVariables","fetchResults","newVariables","mapFn","getQueryWithPreviousResult","dataStore","markUpdateQueryResult","broadcastQueries","stopPollingQuery","assertNotCacheFirstOrOnly","startPollingQuery","_subscription","_observer","stack","setUpQuery","filter","tearDownQuery","addObservableQuery","startQuery","queryListenerForObserver","sub","removeObservableQuery","stopQuery","obsQuery","MutationStore","store","getStore","mutationId","initMutation","mutation","markMutationError","markMutationResult","reset","bundle_esm_QueryStore","QueryStore","initQuery","previousQuery","isSetVariables","previousVariables","storePreviousVariables","isPoll","poll","isRefetch","metadata","fetchMoreForQueryId","markQueryResult","markQueryError","markQueryResultClient","complete","observableQueryIds","keys","reduce","res","key","bundle_esm_LocalState","LocalState","cache","client","resolvers","fragmentMatcher","addResolvers","setFragmentMatcher","resolverGroup","setResolvers","getResolvers","runResolvers","remoteResult","context","onlyRunForcedResolvers","_c","resolveDocument","localResult","getFragmentMatcher","clientQuery","serverQuery","prepareContext","getCacheKey","config","dataIdFromObject","addExportedVariables","buildRootValueFromCache","exportedVariables","shouldForceResolvers","forceResolvers","visitor","Directive","enter","node","value","arg","kind","shouldForceResolver","field","diff","optimistic","rootValue","mainDefinition","fragments","fragmentMap","definitionOperation","defaultOperationType","execContext","str","operation","charAt","toUpperCase","slice","resolveSelectionSet","selectionSet","resultsToMerge","execute","selection","fragment","typeCondition","resolveField","fieldResult","fragmentResult","all","selections","map","fieldName","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolverType","resolverMap","__typename","directives","directive","resolveSubSelectedArray","item","bundle_esm_QueryManager","QueryManager","link","queryDeduplication","onBroadcast","_d","ssrMode","_e","clientAwareness","localState","mutationStore","idCounter","queries","Map","fetchQueryRejectFns","queryIdsByName","pollingInfoByQueryId","nextPoll","deduplicator","apollo_link_lib_bundle_esm","from","apollo_link_dedup_lib_bundle_esm","getCache","stop","_info","stopQueryNoBroadcast","mutate","optimisticResponse","updateQueriesByName","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","update","generateUpdateQueriesInfo","updatedVariables","_f","_g","label","transformDocument","setQuery","ret","queryName","updater","sent","markMutationInit","storeResult","buildOperationForLink","completeMutation","markMutationComplete","refetchQueryPromises","refetchQueries_1","refetchQuery","queryOptions","promise","refetchQueryByName","of","self","handlingNext","updatedResult","catch","fetchType","updatedOptions","needToFetch","shouldFetch","requestId","cancel","networkResult","returnPartialData","generateRequestId","updateQueryWatch","lastRequestId","invalidated","invalidate","fetchRequest","getQuery","previouslyHadError","newData","observableQuery","shouldNotifyIfLoading","networkStatusChanged","errorStatusChanged","apolloError_1","isMissing","document_1","readResult","resultFromStore","e_1","error_1","Boolean","notifyOnNetworkStatusChange","e","trys","watchQuery","queryDefinition","variableDefinitions","defaultValues","transformedOptions","watchedQuery","set","delete","toString","stopQueryInStore","stopQueryInStoreNoBroadcast","addQueryListener","listener","listeners","concat","watch","callback","queryDef","definition","val","clearStore","resetIds","resetStore","reFetchObservableQueries","includeStandby","observableQueryPromises","getObservableQueryPromises","isCacheEnabled","transformedDoc","activeNextCalls_1","complete_1","handler_1","markSubscriptionResult","subscriptions","x","read","queryIdOrObservable","foundObserveableQuery","info","id","getLocalState","errorsFromStore","updatedContext","forceFetch","subscriber","refetchedQueries","prev","newInfo","extraContext","transformForLink","operationName","newContext","checkInFlight","interval","lastPollTimeMs","Date","now","schedulePoll","timeLimitMs","time","clearTimeout","timeout","nextTimeLimitMs","Infinity","updateLastPollTime","isFinite","bundle_esm_DataStore","DataStore","initialCache","ignoreErrors","writeWithErrors","write","dataId","optimistic_1","recordOptimisticTransaction","c","orig","cacheWrites_1","currentQueryResult","nextQueryResult","mutationResult","queryVariables","performTransaction","update_1","removeOptimistic","version","ApolloClient","defaultOptions","resetStoreCallbacks","clearStoreCallbacks","ssrForceFetchDelay","connectToDevTools","typeDefs","clientAwarenessName","clientAwarenessVersion","empty","supportedCache","supportedDirectives","forward","disableNetworkFetches","bind","window","__APOLLO_CLIENT__","initQueryManager","readQuery","initProxy","readFragment","writeQuery","writeFragment","writeData","__actionHookForDevTools","cb","devToolsHookCb","__requestRaw","payload","action","state","mutations","dataWithOptimisticResults","extract","fn","onResetStore","onClearStore","restore","serializedState","setLocalStateFragmentMatcher","proxy"],"mappings":"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","file":"bundle.npm.apollo-client.94b79b1d886f28a93268.js","sourcesContent":["import { __extends } from 'tslib';\n\nvar genericMessage = \"Invariant Violation\";\r\nvar _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {\r\n    obj.__proto__ = proto;\r\n    return obj;\r\n} : _a;\r\nvar InvariantError = /** @class */ (function (_super) {\r\n    __extends(InvariantError, _super);\r\n    function InvariantError(message) {\r\n        if (message === void 0) { message = genericMessage; }\r\n        var _this = _super.call(this, message) || this;\r\n        _this.framesToPop = 1;\r\n        _this.name = genericMessage;\r\n        setPrototypeOf(_this, InvariantError.prototype);\r\n        return _this;\r\n    }\r\n    return InvariantError;\r\n}(Error));\r\nfunction invariant(condition, message) {\r\n    if (!condition) {\r\n        throw new InvariantError(message);\r\n    }\r\n}\r\n(function (invariant) {\r\n    function warn() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return console.warn.apply(console, args);\r\n    }\r\n    invariant.warn = warn;\r\n    function error() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return console.error.apply(console, args);\r\n    }\r\n    invariant.error = error;\r\n})(invariant || (invariant = {}));\r\nvar invariant$1 = invariant;\n\nexport default invariant$1;\nexport { InvariantError, invariant };\n","import { __extends, __assign, __awaiter, __generator } from 'tslib';\nimport { cloneDeep, isEqual, tryFunctionOrLogError, mergeDeep, hasDirectives, removeClientSetsFromDocument, buildQueryFromSelectionSet, getMainDefinition, getFragmentDefinitions, createFragmentMap, mergeDeepArray, resultKeyNameFromField, argumentsObjectFromField, shouldInclude, isField, isInlineFragment, assign, getDefaultValues, getMutationDefinition, hasClientExports, graphQLResultHasError, getQueryDefinition, getOperationDefinition, getOperationName, removeConnectionDirectiveFromDocument } from 'apollo-utilities';\nimport { Observable as Observable$1, ApolloLink, execute } from 'apollo-link';\nimport $$observable from 'symbol-observable';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { DedupLink } from 'apollo-link-dedup';\nimport { visit, BREAK } from 'graphql/language/visitor';\n\nvar NetworkStatus;\n(function (NetworkStatus) {\n    NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\nfunction isNetworkRequestInFlight(networkStatus) {\n    return networkStatus < 7;\n}\n\nvar Observable = (function (_super) {\n    __extends(Observable, _super);\n    function Observable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Observable.prototype[$$observable] = function () {\n        return this;\n    };\n    Observable.prototype['@@observable'] = function () {\n        return this;\n    };\n    return Observable;\n}(Observable$1));\n\nfunction isApolloError(err) {\n    return err.hasOwnProperty('graphQLErrors');\n}\nvar generateErrorMessage = function (err) {\n    var message = '';\n    if (Array.isArray(err.graphQLErrors) && err.graphQLErrors.length !== 0) {\n        err.graphQLErrors.forEach(function (graphQLError) {\n            var errorMessage = graphQLError\n                ? graphQLError.message\n                : 'Error message not found.';\n            message += \"GraphQL error: \" + errorMessage + \"\\n\";\n        });\n    }\n    if (err.networkError) {\n        message += 'Network error: ' + err.networkError.message + '\\n';\n    }\n    message = message.replace(/\\n$/, '');\n    return message;\n};\nvar ApolloError = (function (_super) {\n    __extends(ApolloError, _super);\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.networkError = networkError || null;\n        if (!errorMessage) {\n            _this.message = generateErrorMessage(_this);\n        }\n        else {\n            _this.message = errorMessage;\n        }\n        _this.extraInfo = extraInfo;\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error));\n\nvar FetchType;\n(function (FetchType) {\n    FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n    FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n    FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n})(FetchType || (FetchType = {}));\n\nvar hasError = function (storeValue, policy) {\n    if (policy === void 0) { policy = 'none'; }\n    return storeValue &&\n        ((storeValue.graphQLErrors &&\n            storeValue.graphQLErrors.length > 0 &&\n            policy === 'none') ||\n            storeValue.networkError);\n};\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, options = _a.options, _b = _a.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;\n        var _this = _super.call(this, function (observer) {\n            return _this.onSubscribe(observer);\n        }) || this;\n        _this.isTornDown = false;\n        _this.options = options;\n        _this.variables = options.variables || {};\n        _this.queryId = queryManager.generateQueryId();\n        _this.shouldSubscribe = shouldSubscribe;\n        _this.queryManager = queryManager;\n        _this.observers = [];\n        _this.subscriptionHandles = [];\n        return _this;\n    }\n    ObservableQuery.prototype.result = function () {\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            var subscription;\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    if (!that.observers.some(function (obs) { return obs !== observer; })) {\n                        that.queryManager.removeQuery(that.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: function (error) {\n                    reject(error);\n                },\n            };\n            subscription = that.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.currentResult = function () {\n        var result = this.getCurrentResult();\n        if (result.data === undefined) {\n            result.data = {};\n        }\n        return result;\n    };\n    ObservableQuery.prototype.getCurrentResult = function () {\n        if (this.isTornDown) {\n            return {\n                data: this.lastError\n                    ? undefined\n                    : this.lastResult\n                        ? this.lastResult.data\n                        : undefined,\n                error: this.lastError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n            };\n        }\n        var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n        if (hasError(queryStoreValue, this.options.errorPolicy)) {\n            return {\n                data: undefined,\n                loading: false,\n                networkStatus: queryStoreValue.networkStatus,\n                error: new ApolloError({\n                    graphQLErrors: queryStoreValue.graphQLErrors,\n                    networkError: queryStoreValue.networkError,\n                }),\n            };\n        }\n        if (queryStoreValue && queryStoreValue.variables) {\n            this.options.variables = Object.assign({}, this.options.variables, queryStoreValue.variables);\n        }\n        var _a = this.queryManager.getCurrentQueryResult(this), data = _a.data, partial = _a.partial;\n        var queryLoading = !queryStoreValue ||\n            queryStoreValue.networkStatus === NetworkStatus.loading;\n        var loading = (this.options.fetchPolicy === 'network-only' && queryLoading) ||\n            (partial && this.options.fetchPolicy !== 'cache-only');\n        var networkStatus;\n        if (queryStoreValue) {\n            networkStatus = queryStoreValue.networkStatus;\n        }\n        else {\n            networkStatus = loading ? NetworkStatus.loading : NetworkStatus.ready;\n        }\n        var result = {\n            data: data,\n            loading: isNetworkRequestInFlight(networkStatus),\n            networkStatus: networkStatus,\n        };\n        if (queryStoreValue &&\n            queryStoreValue.graphQLErrors &&\n            this.options.errorPolicy === 'all') {\n            result.errors = queryStoreValue.graphQLErrors;\n        }\n        if (!partial) {\n            this.lastResult = __assign({}, result, { stale: false });\n            this.lastResultSnapshot = cloneDeep(this.lastResult);\n        }\n        return __assign({}, result, { partial: partial });\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n        var snapshot = this.lastResultSnapshot;\n        return !(snapshot &&\n            newResult &&\n            snapshot.networkStatus === newResult.networkStatus &&\n            snapshot.stale === newResult.stale &&\n            isEqual(snapshot.data, newResult.data));\n    };\n    ObservableQuery.prototype.getLastResult = function () {\n        return this.lastResult;\n    };\n    ObservableQuery.prototype.getLastError = function () {\n        return this.lastError;\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.lastResult;\n        delete this.lastResultSnapshot;\n        delete this.lastError;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'cache-only') {\n            return Promise.reject(new Error('cache-only fetchPolicy option should not be used together with query refetch.'));\n        }\n        if (!isEqual(this.variables, variables)) {\n            this.variables = Object.assign({}, this.variables, variables);\n        }\n        if (!isEqual(this.options.variables, this.variables)) {\n            this.options.variables = Object.assign({}, this.options.variables, this.variables);\n        }\n        var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n        var combinedOptions = __assign({}, this.options, { fetchPolicy: isNetworkFetchPolicy ? fetchPolicy : 'network-only' });\n        return this.queryManager\n            .fetchQuery(this.queryId, combinedOptions, FetchType.refetch)\n            .then(function (result) { return result; });\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(fetchMoreOptions.updateQuery) : invariant(fetchMoreOptions.updateQuery, 'updateQuery option is required. This function defines how to update the query data with the new results.');\n        var combinedOptions;\n        return Promise.resolve()\n            .then(function () {\n            var qid = _this.queryManager.generateQueryId();\n            if (fetchMoreOptions.query) {\n                combinedOptions = fetchMoreOptions;\n            }\n            else {\n                combinedOptions = __assign({}, _this.options, fetchMoreOptions, { variables: Object.assign({}, _this.variables, fetchMoreOptions.variables) });\n            }\n            combinedOptions.fetchPolicy = 'network-only';\n            return _this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, _this.queryId);\n        })\n            .then(function (fetchMoreResult) {\n            _this.updateQuery(function (previousResult) {\n                return fetchMoreOptions.updateQuery(previousResult, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables,\n                });\n            });\n            return fetchMoreResult;\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                if (options.updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return options.updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                console.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptionHandles.push(subscription);\n        return function () {\n            var i = _this.subscriptionHandles.indexOf(subscription);\n            if (i >= 0) {\n                _this.subscriptionHandles.splice(i, 1);\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (opts) {\n        var oldOptions = this.options;\n        this.options = Object.assign({}, this.options, opts);\n        if (opts.pollInterval) {\n            this.startPolling(opts.pollInterval);\n        }\n        else if (opts.pollInterval === 0) {\n            this.stopPolling();\n        }\n        var tryFetch = (oldOptions.fetchPolicy !== 'network-only' &&\n            opts.fetchPolicy === 'network-only') ||\n            (oldOptions.fetchPolicy === 'cache-only' &&\n                opts.fetchPolicy !== 'cache-only') ||\n            (oldOptions.fetchPolicy === 'standby' &&\n                opts.fetchPolicy !== 'standby') ||\n            false;\n        return this.setVariables(this.options.variables, tryFetch, opts.fetchResults);\n    };\n    ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n        if (tryFetch === void 0) { tryFetch = false; }\n        if (fetchResults === void 0) { fetchResults = true; }\n        this.isTornDown = false;\n        var newVariables = variables ? variables : this.variables;\n        if (isEqual(newVariables, this.variables) && !tryFetch) {\n            if (this.observers.length === 0 || !fetchResults) {\n                return new Promise(function (resolve) { return resolve(); });\n            }\n            return this.result();\n        }\n        else {\n            this.variables = newVariables;\n            this.options.variables = newVariables;\n            if (this.observers.length === 0) {\n                return new Promise(function (resolve) { return resolve(); });\n            }\n            return this.queryManager\n                .fetchQuery(this.queryId, __assign({}, this.options, { variables: this.variables }))\n                .then(function (result) { return result; });\n        }\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var _a = this.queryManager.getQueryWithPreviousResult(this.queryId), previousResult = _a.previousResult, variables = _a.variables, document = _a.document;\n        var newResult = tryFunctionOrLogError(function () {\n            return mapFn(previousResult, { variables: variables });\n        });\n        if (newResult) {\n            this.queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n            this.queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        this.queryManager.stopPollingQuery(this.queryId);\n        this.options.pollInterval = undefined;\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        assertNotCacheFirstOrOnly(this);\n        this.options.pollInterval = pollInterval;\n        this.queryManager.startPollingQuery(this.options, this.queryId);\n    };\n    ObservableQuery.prototype.onSubscribe = function (observer) {\n        var _this = this;\n        if (observer._subscription &&\n            observer._subscription._observer &&\n            !observer._subscription._observer.error) {\n            observer._subscription._observer.error = function (error) {\n                console.error('Unhandled error', error.message, error.stack);\n            };\n        }\n        this.observers.push(observer);\n        if (observer.next && this.lastResult)\n            observer.next(this.lastResult);\n        if (observer.error && this.lastError)\n            observer.error(this.lastError);\n        if (this.observers.length === 1)\n            this.setUpQuery();\n        return function () {\n            _this.observers = _this.observers.filter(function (obs) { return obs !== observer; });\n            if (_this.observers.length === 0) {\n                _this.tearDownQuery();\n            }\n        };\n    };\n    ObservableQuery.prototype.setUpQuery = function () {\n        var _this = this;\n        if (this.shouldSubscribe) {\n            this.queryManager.addObservableQuery(this.queryId, this);\n        }\n        if (!!this.options.pollInterval) {\n            assertNotCacheFirstOrOnly(this);\n            this.queryManager.startPollingQuery(this.options, this.queryId);\n        }\n        var observer = {\n            next: function (result) {\n                _this.lastResult = result;\n                _this.lastResultSnapshot = cloneDeep(result);\n                _this.observers.forEach(function (obs) { return obs.next && obs.next(result); });\n            },\n            error: function (error) {\n                _this.lastError = error;\n                _this.observers.forEach(function (obs) { return obs.error && obs.error(error); });\n            },\n        };\n        this.queryManager.startQuery(this.queryId, this.options, this.queryManager.queryListenerForObserver(this.queryId, this.options, observer));\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        this.isTornDown = true;\n        this.queryManager.stopPollingQuery(this.queryId);\n        this.subscriptionHandles.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptionHandles = [];\n        this.queryManager.removeObservableQuery(this.queryId);\n        this.queryManager.stopQuery(this.queryId);\n        this.observers = [];\n    };\n    return ObservableQuery;\n}(Observable));\nfunction assertNotCacheFirstOrOnly(obsQuery) {\n    var fetchPolicy = obsQuery.options.fetchPolicy;\n    process.env.NODE_ENV === \"production\" ? invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only') : invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n}\n\nvar MutationStore = (function () {\n    function MutationStore() {\n        this.store = {};\n    }\n    MutationStore.prototype.getStore = function () {\n        return this.store;\n    };\n    MutationStore.prototype.get = function (mutationId) {\n        return this.store[mutationId];\n    };\n    MutationStore.prototype.initMutation = function (mutationId, mutation, variables) {\n        this.store[mutationId] = {\n            mutation: mutation,\n            variables: variables || {},\n            loading: true,\n            error: null,\n        };\n    };\n    MutationStore.prototype.markMutationError = function (mutationId, error) {\n        var mutation = this.store[mutationId];\n        if (!mutation) {\n            return;\n        }\n        mutation.loading = false;\n        mutation.error = error;\n    };\n    MutationStore.prototype.markMutationResult = function (mutationId) {\n        var mutation = this.store[mutationId];\n        if (!mutation) {\n            return;\n        }\n        mutation.loading = false;\n        mutation.error = null;\n    };\n    MutationStore.prototype.reset = function () {\n        this.store = {};\n    };\n    return MutationStore;\n}());\n\nvar QueryStore = (function () {\n    function QueryStore() {\n        this.store = {};\n    }\n    QueryStore.prototype.getStore = function () {\n        return this.store;\n    };\n    QueryStore.prototype.get = function (queryId) {\n        return this.store[queryId];\n    };\n    QueryStore.prototype.initQuery = function (query) {\n        var previousQuery = this.store[query.queryId];\n        if (previousQuery &&\n            previousQuery.document !== query.document &&\n            !isEqual(previousQuery.document, query.document)) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError('Internal Error: may not update existing query string in store');\n        }\n        var isSetVariables = false;\n        var previousVariables = null;\n        if (query.storePreviousVariables &&\n            previousQuery &&\n            previousQuery.networkStatus !== NetworkStatus.loading) {\n            if (!isEqual(previousQuery.variables, query.variables)) {\n                isSetVariables = true;\n                previousVariables = previousQuery.variables;\n            }\n        }\n        var networkStatus;\n        if (isSetVariables) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        else if (query.isPoll) {\n            networkStatus = NetworkStatus.poll;\n        }\n        else if (query.isRefetch) {\n            networkStatus = NetworkStatus.refetch;\n        }\n        else {\n            networkStatus = NetworkStatus.loading;\n        }\n        var graphQLErrors = [];\n        if (previousQuery && previousQuery.graphQLErrors) {\n            graphQLErrors = previousQuery.graphQLErrors;\n        }\n        this.store[query.queryId] = {\n            document: query.document,\n            variables: query.variables,\n            previousVariables: previousVariables,\n            networkError: null,\n            graphQLErrors: graphQLErrors,\n            networkStatus: networkStatus,\n            metadata: query.metadata,\n        };\n        if (typeof query.fetchMoreForQueryId === 'string' &&\n            this.store[query.fetchMoreForQueryId]) {\n            this.store[query.fetchMoreForQueryId].networkStatus =\n                NetworkStatus.fetchMore;\n        }\n    };\n    QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].graphQLErrors =\n            result.errors && result.errors.length ? result.errors : [];\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = NetworkStatus.ready;\n        if (typeof fetchMoreForQueryId === 'string' &&\n            this.store[fetchMoreForQueryId]) {\n            this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n        }\n    };\n    QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = error;\n        this.store[queryId].networkStatus = NetworkStatus.error;\n        if (typeof fetchMoreForQueryId === 'string') {\n            this.markQueryResultClient(fetchMoreForQueryId, true);\n        }\n    };\n    QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = complete\n            ? NetworkStatus.ready\n            : NetworkStatus.loading;\n    };\n    QueryStore.prototype.stopQuery = function (queryId) {\n        delete this.store[queryId];\n    };\n    QueryStore.prototype.reset = function (observableQueryIds) {\n        var _this = this;\n        this.store = Object.keys(this.store)\n            .filter(function (queryId) {\n            return observableQueryIds.indexOf(queryId) > -1;\n        })\n            .reduce(function (res, key) {\n            res[key] = __assign({}, _this.store[key], { networkStatus: NetworkStatus.loading });\n            return res;\n        }, {});\n    };\n    return QueryStore;\n}());\n\nfunction capitalizeFirstLetter(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nvar LocalState = (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    LocalState.prototype.runResolvers = function (_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_c) {\n                if (document) {\n                    return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign({}, remoteResult, { data: localResult.result })); })];\n                }\n                return [2, remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    LocalState.prototype.clientQuery = function (document) {\n        if (hasDirectives(['client'], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n            process.env.NODE_ENV === \"production\" || invariant.warn('Found @client directives in query but no client resolvers were specified. ' +\n                'You can now pass apollo-link-state resolvers to the ApolloClient constructor.');\n        }\n        return null;\n    };\n    LocalState.prototype.serverQuery = function (document) {\n        return this.resolvers ? removeClientSetsFromDocument(document) : document;\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var cache = this.cache;\n        var newContext = __assign({}, context, { cache: cache, getCacheKey: function (obj) {\n                if (cache.config) {\n                    return cache.config.dataIdFromObject(obj);\n                }\n                else {\n                    process.env.NODE_ENV === \"production\" ? invariant(false) : invariant(false, 'To use context.getCacheKey, you need to use a cache that has ' +\n                        'a configurable dataIdFromObject, like apollo-cache-inmemory.');\n                }\n            } });\n        return newContext;\n    };\n    LocalState.prototype.addExportedVariables = function (document, variables, context) {\n        if (variables === void 0) { variables = {}; }\n        if (context === void 0) { context = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (document) {\n                    return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign({}, variables, data.exportedVariables)); })];\n                }\n                return [2, __assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === 'client' && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === 'always' &&\n                                arg.value.kind === 'BooleanValue' &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    LocalState.prototype.shouldForceResolver = function (field) {\n        return this.shouldForceResolvers(field);\n    };\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: buildQueryFromSelectionSet(document),\n            variables: variables,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) { context = {}; }\n        if (variables === void 0) { variables = {}; }\n        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n            return __generator(this, function (_b) {\n                mainDefinition = getMainDefinition(document);\n                fragments = getFragmentDefinitions(document);\n                fragmentMap = createFragmentMap(fragments);\n                definitionOperation = mainDefinition\n                    .operation;\n                defaultOperationType = definitionOperation\n                    ? capitalizeFirstLetter(definitionOperation)\n                    : 'Query';\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: __assign({}, context, { cache: cache,\n                        client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return __generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return __generator(this, function (_a) {\n                        if (!shouldInclude(selection, variables)) {\n                            return [2];\n                        }\n                        if (isField(selection)) {\n                            return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== 'undefined') {\n                                        resultsToMerge.push((_a = {},\n                                            _a[resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            fragment = fragmentMap[selection.name.value];\n                            process.env.NODE_ENV === \"production\" ? invariant(fragment) : invariant(fragment, \"No fragment named \" + selection.name.value);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2];\n                    });\n                }); };\n                return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return __generator(this, function (_a) {\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolver(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, { field: field }));\n                        }\n                    }\n                }\n                return [2, resultPromise.then(function (result) {\n                        if (result === void 0) { result = defaultResult; }\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === 'export' && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        if (result == null) {\n                            return result;\n                        }\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, result, execContext);\n                        }\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, item, execContext);\n            }\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n            }\n        }));\n    };\n    return LocalState;\n}());\n\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, store = _a.store, _c = _a.onBroadcast, onBroadcast = _c === void 0 ? function () { return undefined; } : _c, _d = _a.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _a.clientAwareness, clientAwareness = _e === void 0 ? {} : _e, localState = _a.localState;\n        this.mutationStore = new MutationStore();\n        this.queryStore = new QueryStore();\n        this.clientAwareness = {};\n        this.idCounter = 1;\n        this.queries = new Map();\n        this.fetchQueryRejectFns = new Map();\n        this.queryIdsByName = {};\n        this.pollingInfoByQueryId = new Map();\n        this.nextPoll = null;\n        this.link = link;\n        this.deduplicator = ApolloLink.from([new DedupLink(), link]);\n        this.queryDeduplication = queryDeduplication;\n        this.dataStore = store;\n        this.onBroadcast = onBroadcast;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: store.getCache() });\n        this.ssrMode = ssrMode;\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(new Error('QueryManager stopped while query was in flight'));\n        });\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueriesByName = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, fetchPolicy = _a.fetchPolicy, _e = _a.context, context = _e === void 0 ? {} : _e;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, cache, generateUpdateQueriesInfo, updatedVariables, _f;\n            var _this = this;\n            return __generator(this, function (_g) {\n                switch (_g.label) {\n                    case 0:\n                        process.env.NODE_ENV === \"production\" ? invariant(mutation) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n                        process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache') : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"fetchPolicy for mutations currently only supports the 'no-cache' policy\");\n                        mutationId = this.generateQueryId();\n                        cache = this.dataStore.getCache();\n                        (mutation = cache.transformDocument(mutation)),\n                            (variables = assign({}, getDefaultValues(getMutationDefinition(mutation)), variables));\n                        this.setQuery(mutationId, function () { return ({ document: mutation }); });\n                        generateUpdateQueriesInfo = function () {\n                            var ret = {};\n                            if (updateQueriesByName) {\n                                Object.keys(updateQueriesByName).forEach(function (queryName) {\n                                    return (_this.queryIdsByName[queryName] || []).forEach(function (queryId) {\n                                        ret[queryId] = {\n                                            updater: updateQueriesByName[queryName],\n                                            query: _this.queryStore.get(queryId),\n                                        };\n                                    });\n                                });\n                            }\n                            return ret;\n                        };\n                        if (!hasClientExports(mutation)) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        _f = _g.sent();\n                        return [3, 3];\n                    case 2:\n                        _f = variables;\n                        _g.label = 3;\n                    case 3:\n                        updatedVariables = _f;\n                        this.mutationStore.initMutation(mutationId, mutation, updatedVariables);\n                        this.dataStore.markMutationInit({\n                            mutationId: mutationId,\n                            document: mutation,\n                            variables: updatedVariables || {},\n                            updateQueries: generateUpdateQueriesInfo(),\n                            update: updateWithProxyFn,\n                            optimisticResponse: optimisticResponse,\n                        });\n                        this.broadcastQueries();\n                        return [2, new Promise(function (resolve, reject) {\n                                var storeResult;\n                                var error;\n                                var operation = _this.buildOperationForLink(mutation, updatedVariables, __assign({}, context, { optimisticResponse: optimisticResponse }));\n                                var completeMutation = function () {\n                                    if (error) {\n                                        _this.mutationStore.markMutationError(mutationId, error);\n                                    }\n                                    _this.dataStore.markMutationComplete({\n                                        mutationId: mutationId,\n                                        optimisticResponse: optimisticResponse,\n                                    });\n                                    _this.broadcastQueries();\n                                    if (error) {\n                                        return Promise.reject(error);\n                                    }\n                                    if (typeof refetchQueries === 'function') {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    var refetchQueryPromises = [];\n                                    for (var _i = 0, refetchQueries_1 = refetchQueries; _i < refetchQueries_1.length; _i++) {\n                                        var refetchQuery = refetchQueries_1[_i];\n                                        if (typeof refetchQuery === 'string') {\n                                            var promise = _this.refetchQueryByName(refetchQuery);\n                                            if (promise) {\n                                                refetchQueryPromises.push(promise);\n                                            }\n                                            continue;\n                                        }\n                                        var queryOptions = {\n                                            query: refetchQuery.query,\n                                            variables: refetchQuery.variables,\n                                            fetchPolicy: 'network-only',\n                                        };\n                                        if (refetchQuery.context) {\n                                            queryOptions.context = refetchQuery.context;\n                                        }\n                                        refetchQueryPromises.push(_this.query(queryOptions));\n                                    }\n                                    return Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                                        _this.setQuery(mutationId, function () { return ({ document: null }); });\n                                        if (errorPolicy === 'ignore' &&\n                                            storeResult &&\n                                            graphQLResultHasError(storeResult)) {\n                                            delete storeResult.errors;\n                                        }\n                                        return storeResult;\n                                    });\n                                };\n                                var clientQuery = _this.localState.clientQuery(operation.query);\n                                var serverQuery = _this.localState.serverQuery(operation.query);\n                                if (serverQuery) {\n                                    operation.query = serverQuery;\n                                }\n                                var obs = serverQuery\n                                    ? execute(_this.link, operation)\n                                    : Observable.of({\n                                        data: {},\n                                    });\n                                var self = _this;\n                                var complete = false;\n                                var handlingNext = false;\n                                obs.subscribe({\n                                    next: function (result) { return __awaiter(_this, void 0, void 0, function () {\n                                        var updatedResult, context, variables;\n                                        return __generator(this, function (_a) {\n                                            switch (_a.label) {\n                                                case 0:\n                                                    handlingNext = true;\n                                                    if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                                        handlingNext = false;\n                                                        error = new ApolloError({\n                                                            graphQLErrors: result.errors,\n                                                        });\n                                                        return [2];\n                                                    }\n                                                    self.mutationStore.markMutationResult(mutationId);\n                                                    updatedResult = result;\n                                                    context = operation.context, variables = operation.variables;\n                                                    if (!(clientQuery && hasDirectives(['client'], clientQuery))) return [3, 2];\n                                                    return [4, self.localState\n                                                            .runResolvers({\n                                                            document: clientQuery,\n                                                            remoteResult: result,\n                                                            context: context,\n                                                            variables: variables,\n                                                        })\n                                                            .catch(function (error) {\n                                                            handlingNext = false;\n                                                            reject(error);\n                                                            return result;\n                                                        })];\n                                                case 1:\n                                                    updatedResult = _a.sent();\n                                                    _a.label = 2;\n                                                case 2:\n                                                    if (fetchPolicy !== 'no-cache') {\n                                                        self.dataStore.markMutationResult({\n                                                            mutationId: mutationId,\n                                                            result: updatedResult,\n                                                            document: mutation,\n                                                            variables: updatedVariables || {},\n                                                            updateQueries: generateUpdateQueriesInfo(),\n                                                            update: updateWithProxyFn,\n                                                        });\n                                                    }\n                                                    storeResult = updatedResult;\n                                                    handlingNext = false;\n                                                    if (complete) {\n                                                        completeMutation().then(resolve, reject);\n                                                    }\n                                                    return [2];\n                                            }\n                                        });\n                                    }); },\n                                    error: function (err) {\n                                        self.mutationStore.markMutationError(mutationId, err);\n                                        self.dataStore.markMutationComplete({\n                                            mutationId: mutationId,\n                                            optimisticResponse: optimisticResponse,\n                                        });\n                                        self.broadcastQueries();\n                                        self.setQuery(mutationId, function () { return ({ document: null }); });\n                                        reject(new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                    complete: function () {\n                                        if (!handlingNext) {\n                                            completeMutation().then(resolve, reject);\n                                        }\n                                        complete = true;\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, variables, _b, metadata, _c, fetchPolicy, _d, context, cache, query, updatedVariables, _e, updatedOptions, storeResult, needToFetch, _f, complete, result, shouldFetch, requestId, cancel, shouldDispatchClientResult, networkResult;\n            var _this = this;\n            return __generator(this, function (_g) {\n                switch (_g.label) {\n                    case 0:\n                        _a = options.variables, variables = _a === void 0 ? {} : _a, _b = options.metadata, metadata = _b === void 0 ? null : _b, _c = options.fetchPolicy, fetchPolicy = _c === void 0 ? 'cache-first' : _c, _d = options.context, context = _d === void 0 ? {} : _d;\n                        cache = this.dataStore.getCache();\n                        query = cache.transformDocument(options.query);\n                        if (!hasClientExports(query)) return [3, 2];\n                        return [4, this.localState.addExportedVariables(query, variables, context)];\n                    case 1:\n                        _e = _g.sent();\n                        return [3, 3];\n                    case 2:\n                        _e = variables;\n                        _g.label = 3;\n                    case 3:\n                        updatedVariables = _e;\n                        updatedOptions = __assign({}, options, { variables: updatedVariables });\n                        needToFetch = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n                        if (fetchType !== FetchType.refetch &&\n                            fetchPolicy !== 'network-only' &&\n                            fetchPolicy !== 'no-cache') {\n                            _f = this.dataStore.getCache().diff({\n                                query: query,\n                                variables: updatedVariables,\n                                returnPartialData: true,\n                                optimistic: false,\n                            }), complete = _f.complete, result = _f.result;\n                            needToFetch = !complete || fetchPolicy === 'cache-and-network';\n                            storeResult = result;\n                        }\n                        shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n                        if (hasDirectives(['live'], query))\n                            shouldFetch = true;\n                        requestId = this.generateRequestId();\n                        cancel = this.updateQueryWatch(queryId, query, updatedOptions);\n                        this.setQuery(queryId, function () { return ({\n                            document: query,\n                            lastRequestId: requestId,\n                            invalidated: true,\n                            cancel: cancel,\n                        }); });\n                        this.invalidate(true, fetchMoreForQueryId);\n                        this.queryStore.initQuery({\n                            queryId: queryId,\n                            document: query,\n                            storePreviousVariables: shouldFetch,\n                            variables: updatedVariables,\n                            isPoll: fetchType === FetchType.poll,\n                            isRefetch: fetchType === FetchType.refetch,\n                            metadata: metadata,\n                            fetchMoreForQueryId: fetchMoreForQueryId,\n                        });\n                        this.broadcastQueries();\n                        shouldDispatchClientResult = !shouldFetch || fetchPolicy === 'cache-and-network';\n                        if (shouldDispatchClientResult) {\n                            this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n                            this.invalidate(true, queryId, fetchMoreForQueryId);\n                            this.broadcastQueries(this.localState.shouldForceResolvers(query));\n                        }\n                        if (shouldFetch) {\n                            networkResult = this.fetchRequest({\n                                requestId: requestId,\n                                queryId: queryId,\n                                document: query,\n                                options: updatedOptions,\n                                fetchMoreForQueryId: fetchMoreForQueryId,\n                            }).catch(function (error) {\n                                if (isApolloError(error)) {\n                                    throw error;\n                                }\n                                else {\n                                    var lastRequestId = _this.getQuery(queryId).lastRequestId;\n                                    if (requestId >= (lastRequestId || 1)) {\n                                        _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n                                        _this.invalidate(true, queryId, fetchMoreForQueryId);\n                                        _this.broadcastQueries();\n                                    }\n                                    throw new ApolloError({ networkError: error });\n                                }\n                            });\n                            if (fetchPolicy !== 'cache-and-network') {\n                                return [2, networkResult];\n                            }\n                            else {\n                                networkResult.catch(function () { });\n                            }\n                        }\n                        return [2, Promise.resolve({ data: storeResult })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n        var _this = this;\n        var previouslyHadError = false;\n        return function (queryStoreValue, newData, forceResolvers) { return __awaiter(_this, void 0, void 0, function () {\n            var observableQuery, fetchPolicy, errorPolicy, lastResult, lastError, shouldNotifyIfLoading, networkStatusChanged, errorStatusChanged, apolloError_1, data, isMissing, document_1, readResult, resultFromStore, query, variables, context, updatedResult, e_1, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.invalidate(false, queryId);\n                        if (!queryStoreValue)\n                            return [2];\n                        observableQuery = this.getQuery(queryId).observableQuery;\n                        fetchPolicy = observableQuery\n                            ? observableQuery.options.fetchPolicy\n                            : options.fetchPolicy;\n                        if (fetchPolicy === 'standby')\n                            return [2];\n                        errorPolicy = observableQuery\n                            ? observableQuery.options.errorPolicy\n                            : options.errorPolicy;\n                        lastResult = observableQuery\n                            ? observableQuery.getLastResult()\n                            : null;\n                        lastError = observableQuery ? observableQuery.getLastError() : null;\n                        shouldNotifyIfLoading = (!newData && queryStoreValue.previousVariables != null) ||\n                            fetchPolicy === 'cache-only' ||\n                            fetchPolicy === 'cache-and-network';\n                        networkStatusChanged = Boolean(lastResult &&\n                            queryStoreValue.networkStatus !== lastResult.networkStatus);\n                        errorStatusChanged = errorPolicy &&\n                            (lastError && lastError.graphQLErrors) !==\n                                queryStoreValue.graphQLErrors &&\n                            errorPolicy !== 'none';\n                        if (!(!isNetworkRequestInFlight(queryStoreValue.networkStatus) ||\n                            (networkStatusChanged && options.notifyOnNetworkStatusChange) ||\n                            shouldNotifyIfLoading)) return [3, 8];\n                        if (((!errorPolicy || errorPolicy === 'none') &&\n                            queryStoreValue.graphQLErrors &&\n                            queryStoreValue.graphQLErrors.length > 0) ||\n                            queryStoreValue.networkError) {\n                            apolloError_1 = new ApolloError({\n                                graphQLErrors: queryStoreValue.graphQLErrors,\n                                networkError: queryStoreValue.networkError,\n                            });\n                            previouslyHadError = true;\n                            if (observer.error) {\n                                try {\n                                    observer.error(apolloError_1);\n                                }\n                                catch (e) {\n                                    setTimeout(function () {\n                                        throw e;\n                                    }, 0);\n                                }\n                            }\n                            else {\n                                setTimeout(function () {\n                                    throw apolloError_1;\n                                }, 0);\n                                if (process.env.NODE_ENV !== 'production') {\n                                    console.info('An unhandled error was thrown because no error handler is registered ' +\n                                        'for the query ' +\n                                        JSON.stringify(queryStoreValue.document));\n                                }\n                            }\n                            return [2];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 7, , 8]);\n                        data = void 0;\n                        isMissing = void 0;\n                        if (newData) {\n                            if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n                                this.setQuery(queryId, function () { return ({ newData: null }); });\n                            }\n                            data = newData.result;\n                            isMissing = !newData.complete || false;\n                        }\n                        else {\n                            if (lastResult && lastResult.data && !errorStatusChanged) {\n                                data = lastResult.data;\n                                isMissing = false;\n                            }\n                            else {\n                                document_1 = this.getQuery(queryId).document;\n                                readResult = this.dataStore.getCache().diff({\n                                    query: document_1,\n                                    variables: queryStoreValue.previousVariables ||\n                                        queryStoreValue.variables,\n                                    optimistic: true,\n                                });\n                                data = readResult.result;\n                                isMissing = !readResult.complete;\n                            }\n                        }\n                        resultFromStore = void 0;\n                        if (isMissing && fetchPolicy !== 'cache-only') {\n                            resultFromStore = {\n                                data: lastResult && lastResult.data,\n                                loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n                                networkStatus: queryStoreValue.networkStatus,\n                                stale: true,\n                            };\n                        }\n                        else {\n                            resultFromStore = {\n                                data: data,\n                                loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n                                networkStatus: queryStoreValue.networkStatus,\n                                stale: false,\n                            };\n                        }\n                        if (errorPolicy === 'all' &&\n                            queryStoreValue.graphQLErrors &&\n                            queryStoreValue.graphQLErrors.length > 0) {\n                            resultFromStore.errors = queryStoreValue.graphQLErrors;\n                        }\n                        if (!observer.next) return [3, 6];\n                        if (!(previouslyHadError ||\n                            !observableQuery ||\n                            observableQuery.isDifferentFromLastResult(resultFromStore))) return [3, 6];\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 5, , 6]);\n                        if (!forceResolvers) return [3, 4];\n                        query = options.query, variables = options.variables, context = options.context;\n                        return [4, this.localState.runResolvers({\n                                document: query,\n                                remoteResult: resultFromStore,\n                                context: context,\n                                variables: variables,\n                                onlyRunForcedResolvers: forceResolvers,\n                            })];\n                    case 3:\n                        updatedResult = _a.sent();\n                        resultFromStore = __assign({}, resultFromStore, updatedResult);\n                        _a.label = 4;\n                    case 4:\n                        observer.next(resultFromStore);\n                        return [3, 6];\n                    case 5:\n                        e_1 = _a.sent();\n                        setTimeout(function () {\n                            throw e_1;\n                        }, 0);\n                        return [3, 6];\n                    case 6:\n                        previouslyHadError = false;\n                        return [3, 8];\n                    case 7:\n                        error_1 = _a.sent();\n                        previouslyHadError = true;\n                        if (observer.error)\n                            observer.error(new ApolloError({ networkError: error_1 }));\n                        return [2];\n                    case 8: return [2];\n                }\n            });\n        }); };\n    };\n    QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n        if (shouldSubscribe === void 0) { shouldSubscribe = true; }\n        process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'standby') : invariant(options.fetchPolicy !== 'standby', 'client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n        var queryDefinition = getQueryDefinition(options.query);\n        if (queryDefinition.variableDefinitions &&\n            queryDefinition.variableDefinitions.length) {\n            var defaultValues = getDefaultValues(queryDefinition);\n            options.variables = assign({}, defaultValues, options.variables);\n        }\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var transformedOptions = __assign({}, options);\n        return new ObservableQuery({\n            queryManager: this,\n            options: transformedOptions,\n            shouldSubscribe: shouldSubscribe,\n        });\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(options.query) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.');\n        process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document') : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n        return new Promise(function (resolve, reject) {\n            var watchedQuery = _this.watchQuery(options, false);\n            _this.fetchQueryRejectFns.set(\"query:\" + watchedQuery.queryId, reject);\n            watchedQuery\n                .result()\n                .then(resolve, reject)\n                .then(function () {\n                return _this.fetchQueryRejectFns.delete(\"query:\" + watchedQuery.queryId);\n            });\n        });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        var queryId = this.idCounter.toString();\n        this.idCounter++;\n        return queryId;\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        this.stopPollingQuery(queryId);\n        this.queryStore.stopQuery(queryId);\n        this.invalidate(true, queryId);\n    };\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {\n        this.setQuery(queryId, function (_a) {\n            var _b = _a.listeners, listeners = _b === void 0 ? [] : _b;\n            return ({\n                listeners: listeners.concat([listener]),\n                invalidated: false,\n            });\n        });\n    };\n    QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n        var _this = this;\n        var cancel = this.getQuery(queryId).cancel;\n        if (cancel)\n            cancel();\n        var previousResult = function () {\n            var previousResult = null;\n            var observableQuery = _this.getQuery(queryId).observableQuery;\n            if (observableQuery) {\n                var lastResult = observableQuery.getLastResult();\n                if (lastResult) {\n                    previousResult = lastResult.data;\n                }\n            }\n            return previousResult;\n        };\n        return this.dataStore.getCache().watch({\n            query: document,\n            variables: options.variables,\n            optimistic: true,\n            previousResult: previousResult,\n            callback: function (newData) {\n                _this.setQuery(queryId, function () { return ({ invalidated: true, newData: newData }); });\n            },\n        });\n    };\n    QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n        this.setQuery(queryId, function () { return ({ observableQuery: observableQuery }); });\n        var queryDef = getQueryDefinition(observableQuery.options.query);\n        if (queryDef.name && queryDef.name.value) {\n            var queryName = queryDef.name.value;\n            this.queryIdsByName[queryName] = this.queryIdsByName[queryName] || [];\n            this.queryIdsByName[queryName].push(observableQuery.queryId);\n        }\n    };\n    QueryManager.prototype.removeObservableQuery = function (queryId) {\n        var _a = this.getQuery(queryId), observableQuery = _a.observableQuery, cancel = _a.cancel;\n        if (cancel)\n            cancel();\n        if (!observableQuery)\n            return;\n        var definition = getQueryDefinition(observableQuery.options.query);\n        var queryName = definition.name ? definition.name.value : null;\n        this.setQuery(queryId, function () { return ({ observableQuery: null }); });\n        if (queryName) {\n            this.queryIdsByName[queryName] = this.queryIdsByName[queryName].filter(function (val) {\n                return !(observableQuery.queryId === val);\n            });\n        }\n    };\n    QueryManager.prototype.clearStore = function () {\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(new Error('Store reset while query was in flight(not completed in link chain)'));\n        });\n        var resetIds = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery)\n                resetIds.push(queryId);\n        });\n        this.queryStore.reset(resetIds);\n        this.mutationStore.reset();\n        var reset = this.dataStore.reset();\n        return reset;\n    };\n    QueryManager.prototype.resetStore = function () {\n        var _this = this;\n        return this.clearStore().then(function () {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var observableQueryPromises = this.getObservableQueryPromises(includeStandby);\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.startQuery = function (queryId, options, listener) {\n        this.addQueryListener(queryId, listener);\n        this.fetchQuery(queryId, options)\n            .catch(function () { return undefined; });\n        return queryId;\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (options) {\n        var _this = this;\n        var query = options.query;\n        var isCacheEnabled = !(options.fetchPolicy && options.fetchPolicy === 'no-cache');\n        var cache = this.dataStore.getCache();\n        var transformedDoc = cache.transformDocument(query);\n        var variables = assign({}, getDefaultValues(getOperationDefinition(query)), options.variables);\n        var updatedVariables = variables;\n        var sub;\n        var observers = [];\n        var clientQuery = this.localState.clientQuery(transformedDoc);\n        return new Observable(function (observer) {\n            observers.push(observer);\n            if (observers.length === 1) {\n                var activeNextCalls_1 = 0;\n                var complete_1 = false;\n                var handler_1 = {\n                    next: function (result) { return __awaiter(_this, void 0, void 0, function () {\n                        var updatedResult;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    activeNextCalls_1 += 1;\n                                    updatedResult = result;\n                                    if (!(clientQuery && hasDirectives(['client'], clientQuery))) return [3, 2];\n                                    return [4, this.localState.runResolvers({\n                                            document: clientQuery,\n                                            remoteResult: result,\n                                            context: {},\n                                            variables: updatedVariables,\n                                        })];\n                                case 1:\n                                    updatedResult = _a.sent();\n                                    _a.label = 2;\n                                case 2:\n                                    if (isCacheEnabled) {\n                                        this.dataStore.markSubscriptionResult(updatedResult, transformedDoc, updatedVariables);\n                                        this.broadcastQueries();\n                                    }\n                                    observers.forEach(function (obs) {\n                                        if (graphQLResultHasError(updatedResult) && obs.error) {\n                                            obs.error(new ApolloError({\n                                                graphQLErrors: updatedResult.errors,\n                                            }));\n                                        }\n                                        else if (obs.next) {\n                                            obs.next(updatedResult);\n                                        }\n                                        activeNextCalls_1 -= 1;\n                                    });\n                                    if (activeNextCalls_1 === 0 && complete_1) {\n                                        handler_1.complete();\n                                    }\n                                    return [2];\n                            }\n                        });\n                    }); },\n                    error: function (error) {\n                        observers.forEach(function (obs) {\n                            if (obs.error) {\n                                obs.error(error);\n                            }\n                        });\n                    },\n                    complete: function () {\n                        if (activeNextCalls_1 === 0) {\n                            observers.forEach(function (obs) {\n                                if (obs.complete) {\n                                    obs.complete();\n                                }\n                            });\n                        }\n                        complete_1 = true;\n                    }\n                };\n                (function () { return __awaiter(_this, void 0, void 0, function () {\n                    var updatedVariables, _a, serverQuery, operation;\n                    return __generator(this, function (_b) {\n                        switch (_b.label) {\n                            case 0:\n                                if (!hasClientExports(transformedDoc)) return [3, 2];\n                                return [4, this.localState.addExportedVariables(transformedDoc, variables)];\n                            case 1:\n                                _a = _b.sent();\n                                return [3, 3];\n                            case 2:\n                                _a = variables;\n                                _b.label = 3;\n                            case 3:\n                                updatedVariables = _a;\n                                serverQuery = this.localState.serverQuery(transformedDoc);\n                                if (serverQuery) {\n                                    operation = this.buildOperationForLink(serverQuery, updatedVariables);\n                                    sub = execute(this.link, operation).subscribe(handler_1);\n                                }\n                                else {\n                                    sub = Observable.of({ data: {} }).subscribe(handler_1);\n                                }\n                                return [2];\n                        }\n                    });\n                }); })();\n            }\n            return function () {\n                observers = observers.filter(function (obs) { return obs !== observer; });\n                if (observers.length === 0 && sub) {\n                    sub.unsubscribe();\n                }\n            };\n        });\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        var subscriptions = this.getQuery(queryId).subscriptions;\n        this.fetchQueryRejectFns.delete(\"query:\" + queryId);\n        this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n        subscriptions.forEach(function (x) { return x.unsubscribe(); });\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n        if (optimistic === void 0) { optimistic = true; }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query, fetchPolicy = _a.fetchPolicy;\n        var lastResult = observableQuery.getLastResult();\n        var newData = this.getQuery(observableQuery.queryId).newData;\n        if (newData && newData.complete) {\n            return { data: newData.result, partial: false };\n        }\n        else if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n            return { data: undefined, partial: false };\n        }\n        else {\n            try {\n                var data = this.dataStore.getCache().read({\n                    query: query,\n                    variables: variables,\n                    previousResult: lastResult ? lastResult.data : undefined,\n                    optimistic: optimistic,\n                }) || undefined;\n                return { data: data, partial: false };\n            }\n            catch (e) {\n                return { data: undefined, partial: true };\n            }\n        }\n    };\n    QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n        var observableQuery;\n        if (typeof queryIdOrObservable === 'string') {\n            var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n            process.env.NODE_ENV === \"production\" ? invariant(foundObserveableQuery) : invariant(foundObserveableQuery, \"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n            observableQuery = foundObserveableQuery;\n        }\n        else {\n            observableQuery = queryIdOrObservable;\n        }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query;\n        var data = this.getCurrentQueryResult(observableQuery, false).data;\n        return {\n            previousResult: data,\n            variables: variables,\n            document: query,\n        };\n    };\n    QueryManager.prototype.broadcastQueries = function (forceResolvers) {\n        var _this = this;\n        if (forceResolvers === void 0) { forceResolvers = false; }\n        this.onBroadcast();\n        this.queries.forEach(function (info, id) {\n            if (!info.invalidated || !info.listeners)\n                return;\n            info.listeners\n                .filter(function (x) { return !!x; })\n                .forEach(function (listener) {\n                listener(_this.queryStore.get(id), info.newData, forceResolvers);\n            });\n        });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableQueryPromises = function (includeStandby) {\n        var _this = this;\n        var observableQueryPromises = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (!observableQuery)\n                return;\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (fetchPolicy !== 'cache-only' &&\n                (includeStandby || fetchPolicy !== 'standby')) {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.setQuery(queryId, function () { return ({ newData: null }); });\n            _this.invalidate(true, queryId);\n        });\n        return observableQueryPromises;\n    };\n    QueryManager.prototype.fetchRequest = function (_a) {\n        var _this = this;\n        var requestId = _a.requestId, queryId = _a.queryId, document = _a.document, options = _a.options, fetchMoreForQueryId = _a.fetchMoreForQueryId;\n        var variables = options.variables, context = options.context, _b = options.errorPolicy, errorPolicy = _b === void 0 ? 'none' : _b, fetchPolicy = options.fetchPolicy;\n        var resultFromStore;\n        var errorsFromStore;\n        return new Promise(function (resolve, reject) {\n            var obs;\n            var updatedContext = {};\n            var clientQuery = _this.localState.clientQuery(document);\n            var serverQuery = _this.localState.serverQuery(document);\n            if (serverQuery) {\n                var operation = _this.buildOperationForLink(serverQuery, variables, __assign({}, context, { forceFetch: !_this.queryDeduplication }));\n                updatedContext = operation.context;\n                obs = execute(_this.deduplicator, operation);\n            }\n            else {\n                updatedContext = _this.prepareContext(context);\n                obs = Observable.of({ data: {} });\n            }\n            _this.fetchQueryRejectFns.set(\"fetchRequest:\" + queryId, reject);\n            var complete = false;\n            var handlingNext = true;\n            var subscriber = {\n                next: function (result) { return __awaiter(_this, void 0, void 0, function () {\n                    var updatedResult, lastRequestId;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                handlingNext = true;\n                                updatedResult = result;\n                                lastRequestId = this.getQuery(queryId).lastRequestId;\n                                if (!(requestId >= (lastRequestId || 1))) return [3, 3];\n                                if (!(clientQuery && hasDirectives(['client'], clientQuery))) return [3, 2];\n                                return [4, this.localState\n                                        .runResolvers({\n                                        document: clientQuery,\n                                        remoteResult: result,\n                                        context: updatedContext,\n                                        variables: variables,\n                                    })\n                                        .catch(function (error) {\n                                        handlingNext = false;\n                                        reject(error);\n                                        return result;\n                                    })];\n                            case 1:\n                                updatedResult = _a.sent();\n                                _a.label = 2;\n                            case 2:\n                                if (fetchPolicy !== 'no-cache') {\n                                    try {\n                                        this.dataStore.markQueryResult(updatedResult, document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n                                    }\n                                    catch (e) {\n                                        handlingNext = false;\n                                        reject(e);\n                                        return [2];\n                                    }\n                                }\n                                else {\n                                    this.setQuery(queryId, function () { return ({\n                                        newData: { result: updatedResult.data, complete: true },\n                                    }); });\n                                }\n                                this.queryStore.markQueryResult(queryId, updatedResult, fetchMoreForQueryId);\n                                this.invalidate(true, queryId, fetchMoreForQueryId);\n                                this.broadcastQueries();\n                                _a.label = 3;\n                            case 3:\n                                if (updatedResult.errors && errorPolicy === 'none') {\n                                    handlingNext = false;\n                                    reject(new ApolloError({\n                                        graphQLErrors: updatedResult.errors,\n                                    }));\n                                    return [2];\n                                }\n                                else if (errorPolicy === 'all') {\n                                    errorsFromStore = updatedResult.errors;\n                                }\n                                if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n                                    resultFromStore = updatedResult.data;\n                                }\n                                else {\n                                    try {\n                                        resultFromStore = this.dataStore.getCache().read({\n                                            variables: variables,\n                                            query: document,\n                                            optimistic: false,\n                                        });\n                                    }\n                                    catch (e) { }\n                                }\n                                handlingNext = false;\n                                if (complete) {\n                                    subscriber.complete();\n                                }\n                                return [2];\n                        }\n                    });\n                }); },\n                error: function (error) {\n                    _this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n                    _this.setQuery(queryId, function (_a) {\n                        var subscriptions = _a.subscriptions;\n                        return ({\n                            subscriptions: subscriptions.filter(function (x) { return x !== subscription; }),\n                        });\n                    });\n                    reject(error);\n                },\n                complete: function () {\n                    if (!handlingNext) {\n                        _this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n                        _this.setQuery(queryId, function (_a) {\n                            var subscriptions = _a.subscriptions;\n                            return ({\n                                subscriptions: subscriptions.filter(function (x) { return x !== subscription; }),\n                            });\n                        });\n                        resolve({\n                            data: resultFromStore,\n                            errors: errorsFromStore,\n                            loading: false,\n                            networkStatus: NetworkStatus.ready,\n                            stale: false,\n                        });\n                    }\n                    complete = true;\n                },\n            };\n            var subscription = obs.subscribe(subscriber);\n            _this.setQuery(queryId, function (_a) {\n                var subscriptions = _a.subscriptions;\n                return ({\n                    subscriptions: subscriptions.concat([subscription]),\n                });\n            });\n        }).catch(function (error) {\n            _this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n            throw error;\n        });\n    };\n    QueryManager.prototype.refetchQueryByName = function (queryName) {\n        var _this = this;\n        var refetchedQueries = this.queryIdsByName[queryName];\n        if (refetchedQueries === undefined)\n            return;\n        return Promise.all(refetchedQueries\n            .map(function (id) { return _this.getQuery(id).observableQuery; })\n            .filter(function (x) { return !!x; })\n            .map(function (x) { return x.refetch(); }));\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        var requestId = this.idCounter;\n        this.idCounter++;\n        return requestId;\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        return (this.queries.get(queryId) || {\n            listeners: [],\n            invalidated: false,\n            document: null,\n            newData: null,\n            lastRequestId: null,\n            observableQuery: null,\n            subscriptions: [],\n        });\n    };\n    QueryManager.prototype.setQuery = function (queryId, updater) {\n        var prev = this.getQuery(queryId);\n        var newInfo = __assign({}, prev, updater(prev));\n        this.queries.set(queryId, newInfo);\n    };\n    QueryManager.prototype.invalidate = function (invalidated, queryId, fetchMoreForQueryId) {\n        if (queryId)\n            this.setQuery(queryId, function () { return ({ invalidated: invalidated }); });\n        if (fetchMoreForQueryId) {\n            this.setQuery(fetchMoreForQueryId, function () { return ({ invalidated: invalidated }); });\n        }\n    };\n    QueryManager.prototype.buildOperationForLink = function (document, variables, extraContext) {\n        var cache = this.dataStore.getCache();\n        return {\n            query: cache.transformForLink\n                ? cache.transformForLink(document)\n                : document,\n            variables: variables,\n            operationName: getOperationName(document) || undefined,\n            context: this.prepareContext(extraContext),\n        };\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign({}, newContext, { clientAwareness: this.clientAwareness });\n    };\n    QueryManager.prototype.checkInFlight = function (queryId) {\n        var query = this.queryStore.get(queryId);\n        return (query &&\n            query.networkStatus !== NetworkStatus.ready &&\n            query.networkStatus !== NetworkStatus.error);\n    };\n    QueryManager.prototype.startPollingQuery = function (options, queryId, listener) {\n        var pollInterval = options.pollInterval;\n        process.env.NODE_ENV === \"production\" ? invariant(pollInterval) : invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n        if (!this.ssrMode) {\n            this.pollingInfoByQueryId.set(queryId, {\n                interval: pollInterval,\n                lastPollTimeMs: Date.now() - 10,\n                options: __assign({}, options, { fetchPolicy: 'network-only' }),\n            });\n            if (listener) {\n                this.addQueryListener(queryId, listener);\n            }\n            this.schedulePoll(pollInterval);\n        }\n        return queryId;\n    };\n    QueryManager.prototype.stopPollingQuery = function (queryId) {\n        this.pollingInfoByQueryId.delete(queryId);\n    };\n    QueryManager.prototype.schedulePoll = function (timeLimitMs) {\n        var _this = this;\n        var now = Date.now();\n        if (this.nextPoll) {\n            if (timeLimitMs < this.nextPoll.time - now) {\n                clearTimeout(this.nextPoll.timeout);\n            }\n            else {\n                return;\n            }\n        }\n        this.nextPoll = {\n            time: now + timeLimitMs,\n            timeout: setTimeout(function () {\n                _this.nextPoll = null;\n                var nextTimeLimitMs = Infinity;\n                _this.pollingInfoByQueryId.forEach(function (info, queryId) {\n                    if (info.interval < nextTimeLimitMs) {\n                        nextTimeLimitMs = info.interval;\n                    }\n                    if (!_this.checkInFlight(queryId)) {\n                        if (Date.now() - info.lastPollTimeMs >= info.interval) {\n                            var updateLastPollTime = function () {\n                                info.lastPollTimeMs = Date.now();\n                            };\n                            _this.fetchQuery(queryId, info.options, FetchType.poll).then(updateLastPollTime, updateLastPollTime);\n                        }\n                    }\n                });\n                if (isFinite(nextTimeLimitMs)) {\n                    _this.schedulePoll(nextTimeLimitMs);\n                }\n            }, timeLimitMs),\n        };\n    };\n    return QueryManager;\n}());\n\nvar DataStore = (function () {\n    function DataStore(initialCache) {\n        this.cache = initialCache;\n    }\n    DataStore.prototype.getCache = function () {\n        return this.cache;\n    };\n    DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n        if (ignoreErrors === void 0) { ignoreErrors = false; }\n        var writeWithErrors = !graphQLResultHasError(result);\n        if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n            writeWithErrors = true;\n        }\n        if (!fetchMoreForQueryId && writeWithErrors) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n        if (!graphQLResultHasError(result)) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_SUBSCRIPTION',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markMutationInit = function (mutation) {\n        var _this = this;\n        if (mutation.optimisticResponse) {\n            var optimistic_1;\n            if (typeof mutation.optimisticResponse === 'function') {\n                optimistic_1 = mutation.optimisticResponse(mutation.variables);\n            }\n            else {\n                optimistic_1 = mutation.optimisticResponse;\n            }\n            var changeFn_1 = function () {\n                _this.markMutationResult({\n                    mutationId: mutation.mutationId,\n                    result: { data: optimistic_1 },\n                    document: mutation.document,\n                    variables: mutation.variables,\n                    updateQueries: mutation.updateQueries,\n                    update: mutation.update,\n                });\n            };\n            this.cache.recordOptimisticTransaction(function (c) {\n                var orig = _this.cache;\n                _this.cache = c;\n                try {\n                    changeFn_1();\n                }\n                finally {\n                    _this.cache = orig;\n                }\n            }, mutation.mutationId);\n        }\n    };\n    DataStore.prototype.markMutationResult = function (mutation) {\n        var _this = this;\n        if (!graphQLResultHasError(mutation.result)) {\n            var cacheWrites_1 = [];\n            cacheWrites_1.push({\n                result: mutation.result.data,\n                dataId: 'ROOT_MUTATION',\n                query: mutation.document,\n                variables: mutation.variables,\n            });\n            if (mutation.updateQueries) {\n                Object.keys(mutation.updateQueries)\n                    .filter(function (id) { return mutation.updateQueries[id]; })\n                    .forEach(function (queryId) {\n                    var _a = mutation.updateQueries[queryId], query = _a.query, updater = _a.updater;\n                    var _b = _this.cache.diff({\n                        query: query.document,\n                        variables: query.variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _b.result, complete = _b.complete;\n                    if (!complete) {\n                        return;\n                    }\n                    var nextQueryResult = tryFunctionOrLogError(function () {\n                        return updater(currentQueryResult, {\n                            mutationResult: mutation.result,\n                            queryName: getOperationName(query.document) || undefined,\n                            queryVariables: query.variables,\n                        });\n                    });\n                    if (nextQueryResult) {\n                        cacheWrites_1.push({\n                            result: nextQueryResult,\n                            dataId: 'ROOT_QUERY',\n                            query: query.document,\n                            variables: query.variables,\n                        });\n                    }\n                });\n            }\n            this.cache.performTransaction(function (c) {\n                cacheWrites_1.forEach(function (write) { return c.write(write); });\n            });\n            var update_1 = mutation.update;\n            if (update_1) {\n                this.cache.performTransaction(function (c) {\n                    tryFunctionOrLogError(function () { return update_1(c, mutation.result); });\n                });\n            }\n        }\n    };\n    DataStore.prototype.markMutationComplete = function (_a) {\n        var mutationId = _a.mutationId, optimisticResponse = _a.optimisticResponse;\n        if (!optimisticResponse)\n            return;\n        this.cache.removeOptimistic(mutationId);\n    };\n    DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n        this.cache.write({\n            result: newResult,\n            dataId: 'ROOT_QUERY',\n            variables: variables,\n            query: document,\n        });\n    };\n    DataStore.prototype.reset = function () {\n        return this.cache.reset();\n    };\n    return DataStore;\n}());\n\nvar version = \"2.5.1\";\n\nvar hasSuggestedDevtools = false;\nvar ApolloClient = (function () {\n    function ApolloClient(options) {\n        var _this = this;\n        this.defaultOptions = {};\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        this.clientAwareness = {};\n        var cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;\n        var link = options.link;\n        if (!link && resolvers) {\n            link = ApolloLink.empty();\n        }\n        if (!link || !cache) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"\\n        In order to initialize Apollo Client, you must specify link & cache properties on the config object.\\n        This is part of the required upgrade when migrating from Apollo Client 1.0 to Apollo Client 2.0.\\n        For more information, please visit:\\n          https://www.apollographql.com/docs/react/basics/setup.html\\n        to help you get started.\\n      \");\n        }\n        var supportedCache = new Map();\n        var supportedDirectives = new ApolloLink(function (operation, forward) {\n            var result = supportedCache.get(operation.query);\n            if (!result) {\n                result = removeConnectionDirectiveFromDocument(operation.query);\n                supportedCache.set(operation.query, result);\n                supportedCache.set(result, result);\n            }\n            operation.query = result;\n            return forward(operation);\n        });\n        this.link = supportedDirectives.concat(link);\n        this.cache = cache;\n        this.store = new DataStore(cache);\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.ssrMode = ssrMode;\n        this.defaultOptions = defaultOptions || {};\n        this.typeDefs = typeDefs;\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        var defaultConnectToDevTools = process.env.NODE_ENV !== 'production' &&\n            typeof window !== 'undefined' &&\n            !window.__APOLLO_CLIENT__;\n        if (typeof connectToDevTools === 'undefined'\n            ? defaultConnectToDevTools\n            : connectToDevTools && typeof window !== 'undefined') {\n            window.__APOLLO_CLIENT__ = this;\n        }\n        if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n            hasSuggestedDevtools = true;\n            if (typeof window !== 'undefined' &&\n                window.document &&\n                window.top === window.self) {\n                if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n                    if (window.navigator &&\n                        window.navigator.userAgent &&\n                        window.navigator.userAgent.indexOf('Chrome') > -1) {\n                        console.debug('Download the Apollo DevTools ' +\n                            'for a better development experience: ' +\n                            'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n                    }\n                }\n            }\n        }\n        this.version = version;\n        if (clientAwarenessName) {\n            this.clientAwareness.name = clientAwarenessName;\n        }\n        if (clientAwarenessVersion) {\n            this.clientAwareness.version = clientAwarenessVersion;\n        }\n        this.localState = new LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher,\n        });\n    }\n    ApolloClient.prototype.stop = function () {\n        if (this.queryManager) {\n            this.queryManager.stop();\n        }\n    };\n    ApolloClient.prototype.watchQuery = function (options) {\n        if (this.defaultOptions.watchQuery) {\n            options = __assign({}, this.defaultOptions.watchQuery, options);\n        }\n        if (this.disableNetworkFetches &&\n            (options.fetchPolicy === 'network-only' ||\n                options.fetchPolicy === 'cache-and-network')) {\n            options = __assign({}, options, { fetchPolicy: 'cache-first' });\n        }\n        return this.initQueryManager().watchQuery(options);\n    };\n    ApolloClient.prototype.query = function (options) {\n        if (this.defaultOptions.query) {\n            options = __assign({}, this.defaultOptions.query, options);\n        }\n        process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'cache-and-network') : invariant(options.fetchPolicy !== 'cache-and-network', 'cache-and-network fetchPolicy can only be used with watchQuery');\n        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n            options = __assign({}, options, { fetchPolicy: 'cache-first' });\n        }\n        return this.initQueryManager().query(options);\n    };\n    ApolloClient.prototype.mutate = function (options) {\n        if (this.defaultOptions.mutate) {\n            options = __assign({}, this.defaultOptions.mutate, options);\n        }\n        return this.initQueryManager().mutate(options);\n    };\n    ApolloClient.prototype.subscribe = function (options) {\n        return this.initQueryManager().startGraphQLSubscription(options);\n    };\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.initProxy().readQuery(options, optimistic);\n    };\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.initProxy().readFragment(options, optimistic);\n    };\n    ApolloClient.prototype.writeQuery = function (options) {\n        var result = this.initProxy().writeQuery(options);\n        this.initQueryManager().broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeFragment = function (options) {\n        var result = this.initProxy().writeFragment(options);\n        this.initQueryManager().broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeData = function (options) {\n        var result = this.initProxy().writeData(options);\n        this.initQueryManager().broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return execute(this.link, payload);\n    };\n    ApolloClient.prototype.initQueryManager = function () {\n        var _this = this;\n        if (!this.queryManager) {\n            this.queryManager = new QueryManager({\n                link: this.link,\n                store: this.store,\n                queryDeduplication: this.queryDeduplication,\n                ssrMode: this.ssrMode,\n                clientAwareness: this.clientAwareness,\n                localState: this.localState,\n                onBroadcast: function () {\n                    if (_this.devToolsHookCb) {\n                        _this.devToolsHookCb({\n                            action: {},\n                            state: {\n                                queries: _this.queryManager\n                                    ? _this.queryManager.queryStore.getStore()\n                                    : {},\n                                mutations: _this.queryManager\n                                    ? _this.queryManager.mutationStore.getStore()\n                                    : {},\n                            },\n                            dataWithOptimisticResults: _this.cache.extract(true),\n                        });\n                    }\n                },\n            });\n        }\n        return this.queryManager;\n    };\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.queryManager\n                ? _this.queryManager.clearStore()\n                : Promise.resolve(null);\n        })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () {\n            return _this.queryManager && _this.queryManager.reFetchObservableQueries\n                ? _this.queryManager.reFetchObservableQueries()\n                : Promise.resolve(null);\n        });\n    };\n    ApolloClient.prototype.clearStore = function () {\n        var _this = this;\n        var queryManager = this.queryManager;\n        return Promise.resolve()\n            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () {\n            return queryManager ? queryManager.clearStore() : Promise.resolve(null);\n        });\n    };\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.onClearStore = function (cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function () {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager\n            ? this.queryManager.reFetchObservableQueries(includeStandby)\n            : Promise.resolve(null);\n    };\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.initProxy().extract(optimistic);\n    };\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.initProxy().restore(serializedState);\n    };\n    ApolloClient.prototype.addResolvers = function (resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    ApolloClient.prototype.setResolvers = function (resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    ApolloClient.prototype.getResolvers = function () {\n        return this.localState.getResolvers();\n    };\n    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    ApolloClient.prototype.initProxy = function () {\n        if (!this.proxy) {\n            this.initQueryManager();\n            this.proxy = this.cache;\n        }\n        return this.proxy;\n    };\n    return ApolloClient;\n}());\n\nexport default ApolloClient;\nexport { ApolloClient, ObservableQuery, NetworkStatus, isApolloError, ApolloError, FetchType };\n//# sourceMappingURL=bundle.esm.js.map\n"],"sourceRoot":""}