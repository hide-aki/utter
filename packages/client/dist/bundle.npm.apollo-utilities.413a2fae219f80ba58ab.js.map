{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-utilities/lib/util/isEqual.js","webpack:////var/www/html/utter/node_modules/apollo-utilities/lib/util/cloneDeep.js","webpack:////var/www/html/utter/node_modules/apollo-utilities/lib/util/filterInPlace.js","webpack:////var/www/html/utter/node_modules/apollo-utilities/lib/transform.js","webpack:////var/www/html/utter/node_modules/apollo-utilities/lib/util/errorHandling.js","webpack:////var/www/html/utter/node_modules/apollo-utilities/lib/util/maybeDeepFreeze.js","webpack:////var/www/html/utter/node_modules/apollo-utilities/lib/util/stripSymbols.js","webpack:////var/www/html/utter/node_modules/apollo-utilities/lib/index.js","webpack:////var/www/html/utter/node_modules/apollo-utilities/lib/directives.js","webpack:////var/www/html/utter/node_modules/apollo-utilities/lib/util/warnOnce.js","webpack:////var/www/html/utter/node_modules/apollo-utilities/lib/util/assign.js","webpack:////var/www/html/utter/node_modules/apollo-utilities/lib/util/environment.js","webpack:////var/www/html/utter/node_modules/apollo-utilities/lib/getFromAST.js","webpack:////var/www/html/utter/node_modules/apollo-utilities/lib/storeUtils.js","webpack:////var/www/html/utter/node_modules/apollo-utilities/lib/fragments.js"],"names":["isEqual","a","b","Date","getTime","key","Object","prototype","hasOwnProperty","call","__webpack_require__","d","__webpack_exports__","cloneDeep","toString","value","cloneDeepHelper","val","seen","has","get","copy_1","slice","set","forEach","child","i","copy_2","create","getPrototypeOf","keys","Map","filterInPlace","array","test","context","target","elem","this","length","removeDirectivesFromDocument","addTypenameToDocument","removeConnectionDirectiveFromDocument","getDirectivesFromDocument","removeArgumentsFromDocument","removeFragmentSpreadFromDocument","TYPENAME_FIELD","kind","name","nullIfDocIsEmpty","doc","isEmpty","op","fragments","selectionSet","selections","every","selection","getFromAST","getDirectiveMatcher","directives","directive","some","dir","variablesInUse","variablesToRemove","fragmentSpreadsInUse","fragmentSpreadsToRemove","modifiedDoc","visitor","Variable","enter","node","_key","parent","Field","remove","arguments","arg","push","getAllFragmentSpreadsFromSelectionSet","allFragments","frag","FragmentSpread","Directive","v","fs","SelectionSet","lastIndexOf","tslib_es6","concat","connectionRemoveConfig","willRemove","console","warn","hasDirectivesInSelectionSet","nestedCheck","hasDirectivesInSelection","parentPath","_parent","path","currentPath","join","startsWith","selectionsWithDirectives","filter","config","argMatcher","argument","aConfig","getArgumentMatcher","OperationDefinition","variableDefinitions","varDef","variable","argConfig","argMatchCount_1","Argument","def","FragmentDefinition","tryFunctionOrLogError","f","e","error","graphQLResultHasError","result","errors","maybeDeepFreeze","obj","environment","Symbol","deepFreeze","o","freeze","getOwnPropertyNames","prop","isFrozen","stripSymbols","data","JSON","parse","stringify","transform","storeUtils","util_assign","errorHandling","warnOnce","getDirectiveInfoFromField","shouldInclude","getDirectiveNames","hasDirectives","graphql_language_visitor__WEBPACK_IMPORTED_MODULE_0__","_storeUtils__WEBPACK_IMPORTED_MODULE_1__","field","variables","directiveObj_1","res","directiveArguments","directiveName","Error","ifArgument","ifValue","evaledValue","undefined","names","indexOf","warnOnceInDevelopment","_environment__WEBPACK_IMPORTED_MODULE_0__","haveWarned","msg","type","assign","sources","_i","source","process","getEnv","isEnv","env","isProduction","isDevelopment","isTest","getMutationDefinition","checkDocument","getOperationDefinition","getOperationDefinitionOrDie","getOperationName","getFragmentDefinitions","getQueryDefinition","getFragmentDefinition","getMainDefinition","createFragmentMap","getDefaultValues","variablesInOperation","_util_assign__WEBPACK_IMPORTED_MODULE_0__","mutationDef","definitions","definition","operation","operations","map","document","x","queryDef","fragmentDef","queryDoc","fragmentDefinition","_a","symTable","fragment","defaultValues","defaultValue","defaultValueObj","apply","Set","add","isScalarValue","isNumberValue","valueToObjectRepresentation","storeKeyNameFromField","getStoreKeyName","argumentsObjectFromField","resultKeyNameFromField","isField","isInlineFragment","isIdValue","toIdValue","isJsonValue","valueFromNode","tslib__WEBPACK_IMPORTED_MODULE_0__","fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_1__","fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_1___default","n","argObj","isIntValue","isFloatValue","Number","isBooleanValue","isStringValue","isObjectValue","nestedArgObj_1","fields","isVariable","variableValue","isListValue","values","listValue","nestedArgArrayObj","isEnumValue","isNullValue","directivesObj","KNOWN_DIRECTIVES","fieldName","args","filterKeys","sort","queryArgs_1","filteredArgs_1","completeFieldName","stringifiedArgs","argObj_1","alias","idObject","generated","idConfig","id","typename","jsonObject","defaultValueFromVariable","onVariable","parseInt","parseFloat","getFragmentQueryDocument","fragmentName","actualFragmentName"],"mappings":"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","file":"bundle.npm.apollo-utilities.413a2fae219f80ba58ab.js","sourcesContent":["export function isEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime();\n    }\n    if (a != null &&\n        typeof a === 'object' &&\n        b != null &&\n        typeof b === 'object') {\n        for (var key in a) {\n            if (Object.prototype.hasOwnProperty.call(a, key)) {\n                if (!Object.prototype.hasOwnProperty.call(b, key)) {\n                    return false;\n                }\n                if (!isEqual(a[key], b[key])) {\n                    return false;\n                }\n            }\n        }\n        for (var key in b) {\n            if (Object.prototype.hasOwnProperty.call(b, key) &&\n                !Object.prototype.hasOwnProperty.call(a, key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=isEqual.js.map","var toString = Object.prototype.toString;\nexport function cloneDeep(value) {\n    return cloneDeepHelper(value, new Map());\n}\nfunction cloneDeepHelper(val, seen) {\n    switch (toString.call(val)) {\n        case \"[object Array]\": {\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_1 = val.slice(0);\n            seen.set(val, copy_1);\n            copy_1.forEach(function (child, i) {\n                copy_1[i] = cloneDeepHelper(child, seen);\n            });\n            return copy_1;\n        }\n        case \"[object Object]\": {\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_2 = Object.create(Object.getPrototypeOf(val));\n            seen.set(val, copy_2);\n            Object.keys(val).forEach(function (key) {\n                copy_2[key] = cloneDeepHelper(val[key], seen);\n            });\n            return copy_2;\n        }\n        default:\n            return val;\n    }\n}\n//# sourceMappingURL=cloneDeep.js.map","export function filterInPlace(array, test, context) {\n    var target = 0;\n    array.forEach(function (elem, i) {\n        if (test.call(this, elem, i, array)) {\n            array[target++] = elem;\n        }\n    }, context);\n    array.length = target;\n    return array;\n}\n//# sourceMappingURL=filterInPlace.js.map","import * as tslib_1 from \"tslib\";\nimport { visit } from 'graphql/language/visitor';\nimport { checkDocument, getOperationDefinitionOrDie, getFragmentDefinitions, createFragmentMap, } from './getFromAST';\nimport { filterInPlace } from './util/filterInPlace';\nvar TYPENAME_FIELD = {\n    kind: 'Field',\n    name: {\n        kind: 'Name',\n        value: '__typename',\n    },\n};\nfunction isEmpty(op, fragments) {\n    return op.selectionSet.selections.every(function (selection) {\n        return selection.kind === 'FragmentSpread' &&\n            isEmpty(fragments[selection.name.value], fragments);\n    });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty(getOperationDefinitionOrDie(doc), createFragmentMap(getFragmentDefinitions(doc))) ? null : doc;\n}\nfunction getDirectiveMatcher(directives) {\n    return function directiveMatcher(directive) {\n        return directives.some(function (dir) {\n            return (dir.name && dir.name === directive.name.value) ||\n                (dir.test && dir.test(directive));\n        });\n    };\n}\nexport function removeDirectivesFromDocument(directives, doc) {\n    var variablesInUse = Object.create(null);\n    var variablesToRemove = [];\n    var fragmentSpreadsInUse = Object.create(null);\n    var fragmentSpreadsToRemove = [];\n    var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n        Variable: {\n            enter: function (node, _key, parent) {\n                if (parent.kind !== 'VariableDefinition') {\n                    variablesInUse[node.name.value] = true;\n                }\n            },\n        },\n        Field: {\n            enter: function (node) {\n                var shouldRemoveField = directives.some(function (directive) { return directive.remove; });\n                if (shouldRemoveField &&\n                    node.directives &&\n                    node.directives.some(getDirectiveMatcher(directives))) {\n                    if (node.arguments) {\n                        node.arguments.forEach(function (arg) {\n                            if (arg.value.kind === 'Variable') {\n                                variablesToRemove.push({\n                                    name: arg.value.name.value,\n                                });\n                            }\n                        });\n                    }\n                    if (node.selectionSet) {\n                        getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                            fragmentSpreadsToRemove.push({\n                                name: frag.name.value,\n                            });\n                        });\n                    }\n                    return null;\n                }\n            },\n        },\n        FragmentSpread: {\n            enter: function (node) {\n                fragmentSpreadsInUse[node.name.value] = true;\n            },\n        },\n        Directive: {\n            enter: function (node) {\n                if (getDirectiveMatcher(directives)(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n    if (modifiedDoc &&\n        filterInPlace(variablesToRemove, function (v) { return !variablesInUse[v.name]; }).length) {\n        modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n    }\n    if (modifiedDoc &&\n        filterInPlace(fragmentSpreadsToRemove, function (fs) { return !fragmentSpreadsInUse[fs.name]; }).length) {\n        modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n    }\n    return modifiedDoc;\n}\nexport function addTypenameToDocument(doc) {\n    return visit(checkDocument(doc), {\n        SelectionSet: {\n            enter: function (node, _key, parent) {\n                if (parent &&\n                    parent.kind === 'OperationDefinition') {\n                    return;\n                }\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                var skip = selections.some(function (selection) {\n                    return (selection.kind === 'Field' &&\n                        (selection.name.value === '__typename' ||\n                            selection.name.value.lastIndexOf('__', 0) === 0));\n                });\n                if (skip) {\n                    return;\n                }\n                return tslib_1.__assign({}, node, { selections: selections.concat([TYPENAME_FIELD]) });\n            },\n        },\n    });\n}\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === 'connection';\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {\n                console.warn('Removing an @connection directive even though it does not have a key. ' +\n                    'You may want to use the key parameter to specify a store key.');\n            }\n        }\n        return willRemove;\n    },\n};\nexport function removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    return (selectionSet &&\n        selectionSet.selections &&\n        selectionSet.selections.some(function (selection) {\n            return hasDirectivesInSelection(directives, selection, nestedCheck);\n        }));\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (selection.kind !== 'Field' || !selection) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return (selection.directives.some(getDirectiveMatcher(directives)) ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nexport function getDirectivesFromDocument(directives, doc) {\n    checkDocument(doc);\n    var parentPath;\n    return nullIfDocIsEmpty(visit(doc, {\n        SelectionSet: {\n            enter: function (node, _key, _parent, path) {\n                var currentPath = path.join('-');\n                if (!parentPath ||\n                    currentPath === parentPath ||\n                    !currentPath.startsWith(parentPath)) {\n                    if (node.selections) {\n                        var selectionsWithDirectives = node.selections.filter(function (selection) {\n                            return hasDirectivesInSelection(directives, selection);\n                        });\n                        if (hasDirectivesInSelectionSet(directives, node, false)) {\n                            parentPath = currentPath;\n                        }\n                        return tslib_1.__assign({}, node, { selections: selectionsWithDirectives });\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            },\n        },\n    }));\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function (aConfig) {\n            return argument.value &&\n                argument.value.kind === 'Variable' &&\n                argument.value.name &&\n                (aConfig.name === argument.value.name.value ||\n                    (aConfig.test && aConfig.test(argument)));\n        });\n    };\n}\nexport function removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty(visit(doc, {\n        OperationDefinition: {\n            enter: function (node) {\n                return tslib_1.__assign({}, node, { variableDefinitions: node.variableDefinitions.filter(function (varDef) { return !config.some(function (arg) { return arg.name === varDef.variable.name.value; }); }) });\n            },\n        },\n        Field: {\n            enter: function (node) {\n                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    node.arguments.forEach(function (arg) {\n                        if (argMatcher(arg)) {\n                            argMatchCount_1 += 1;\n                        }\n                    });\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            },\n        },\n        Argument: {\n            enter: function (node) {\n                if (argMatcher(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n}\nexport function removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function (def) { return def.name === node.name.value; })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty(visit(doc, {\n        FragmentSpread: { enter: enter },\n        FragmentDefinition: { enter: enter },\n    }));\n}\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n    var allFragments = [];\n    selectionSet.selections.forEach(function (selection) {\n        if ((selection.kind === 'Field' ||\n            selection.kind === 'InlineFragment') &&\n            selection.selectionSet) {\n            getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) { return allFragments.push(frag); });\n        }\n        else if (selection.kind === 'FragmentSpread') {\n            allFragments.push(selection);\n        }\n    });\n    return allFragments;\n}\n//# sourceMappingURL=transform.js.map","export function tryFunctionOrLogError(f) {\n    try {\n        return f();\n    }\n    catch (e) {\n        if (console.error) {\n            console.error(e);\n        }\n    }\n}\nexport function graphQLResultHasError(result) {\n    return result.errors && result.errors.length;\n}\n//# sourceMappingURL=errorHandling.js.map","import { isDevelopment, isTest } from './environment';\nfunction deepFreeze(o) {\n    Object.freeze(o);\n    Object.getOwnPropertyNames(o).forEach(function (prop) {\n        if (o[prop] !== null &&\n            (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n            !Object.isFrozen(o[prop])) {\n            deepFreeze(o[prop]);\n        }\n    });\n    return o;\n}\nexport function maybeDeepFreeze(obj) {\n    if (isDevelopment() || isTest()) {\n        var symbolIsPolyfilled = typeof Symbol === 'function' && typeof Symbol('') === 'string';\n        if (!symbolIsPolyfilled) {\n            return deepFreeze(obj);\n        }\n    }\n    return obj;\n}\n//# sourceMappingURL=maybeDeepFreeze.js.map","export function stripSymbols(data) {\n    return JSON.parse(JSON.stringify(data));\n}\n//# sourceMappingURL=stripSymbols.js.map","export * from './directives';\nexport * from './fragments';\nexport * from './getFromAST';\nexport * from './transform';\nexport * from './storeUtils';\nexport * from './util/assign';\nexport * from './util/cloneDeep';\nexport * from './util/environment';\nexport * from './util/errorHandling';\nexport * from './util/isEqual';\nexport * from './util/maybeDeepFreeze';\nexport * from './util/warnOnce';\nexport * from './util/stripSymbols';\n//# sourceMappingURL=index.js.map","import { visit } from 'graphql/language/visitor';\nimport { argumentsObjectFromField } from './storeUtils';\nexport function getDirectiveInfoFromField(field, variables) {\n    if (field.directives && field.directives.length) {\n        var directiveObj_1 = {};\n        field.directives.forEach(function (directive) {\n            directiveObj_1[directive.name.value] = argumentsObjectFromField(directive, variables);\n        });\n        return directiveObj_1;\n    }\n    return null;\n}\nexport function shouldInclude(selection, variables) {\n    if (variables === void 0) { variables = {}; }\n    if (!selection.directives) {\n        return true;\n    }\n    var res = true;\n    selection.directives.forEach(function (directive) {\n        if (directive.name.value !== 'skip' && directive.name.value !== 'include') {\n            return;\n        }\n        var directiveArguments = directive.arguments || [];\n        var directiveName = directive.name.value;\n        if (directiveArguments.length !== 1) {\n            throw new Error(\"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n        }\n        var ifArgument = directiveArguments[0];\n        if (!ifArgument.name || ifArgument.name.value !== 'if') {\n            throw new Error(\"Invalid argument for the @\" + directiveName + \" directive.\");\n        }\n        var ifValue = directiveArguments[0].value;\n        var evaledValue = false;\n        if (!ifValue || ifValue.kind !== 'BooleanValue') {\n            if (ifValue.kind !== 'Variable') {\n                throw new Error(\"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n            }\n            else {\n                evaledValue = variables[ifValue.name.value];\n                if (evaledValue === undefined) {\n                    throw new Error(\"Invalid variable referenced in @\" + directiveName + \" directive.\");\n                }\n            }\n        }\n        else {\n            evaledValue = ifValue.value;\n        }\n        if (directiveName === 'skip') {\n            evaledValue = !evaledValue;\n        }\n        if (!evaledValue) {\n            res = false;\n        }\n    });\n    return res;\n}\nexport function getDirectiveNames(doc) {\n    var names = [];\n    visit(doc, {\n        Directive: function (node) {\n            names.push(node.name.value);\n        },\n    });\n    return names;\n}\nexport function hasDirectives(names, doc) {\n    return getDirectiveNames(doc).some(function (name) { return names.indexOf(name) > -1; });\n}\n//# sourceMappingURL=directives.js.map","import { isProduction, isTest } from './environment';\nvar haveWarned = Object.create({});\nexport function warnOnceInDevelopment(msg, type) {\n    if (type === void 0) { type = 'warn'; }\n    if (isProduction()) {\n        return;\n    }\n    if (!haveWarned[msg]) {\n        if (!isTest()) {\n            haveWarned[msg] = true;\n        }\n        switch (type) {\n            case 'error':\n                console.error(msg);\n                break;\n            default:\n                console.warn(msg);\n        }\n    }\n}\n//# sourceMappingURL=warnOnce.js.map","export function assign(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    sources.forEach(function (source) {\n        if (typeof source === 'undefined' || source === null) {\n            return;\n        }\n        Object.keys(source).forEach(function (key) {\n            target[key] = source[key];\n        });\n    });\n    return target;\n}\n//# sourceMappingURL=assign.js.map","export function getEnv() {\n    if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n        return process.env.NODE_ENV;\n    }\n    return 'development';\n}\nexport function isEnv(env) {\n    return getEnv() === env;\n}\nexport function isProduction() {\n    return isEnv('production') === true;\n}\nexport function isDevelopment() {\n    return isEnv('development') === true;\n}\nexport function isTest() {\n    return isEnv('test') === true;\n}\n//# sourceMappingURL=environment.js.map","import { assign } from './util/assign';\nimport { valueToObjectRepresentation } from './storeUtils';\nexport function getMutationDefinition(doc) {\n    checkDocument(doc);\n    var mutationDef = doc.definitions.filter(function (definition) {\n        return definition.kind === 'OperationDefinition' &&\n            definition.operation === 'mutation';\n    })[0];\n    if (!mutationDef) {\n        throw new Error('Must contain a mutation definition.');\n    }\n    return mutationDef;\n}\nexport function checkDocument(doc) {\n    if (doc.kind !== 'Document') {\n        throw new Error(\"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    }\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })\n        .map(function (definition) {\n        if (definition.kind !== 'OperationDefinition') {\n            throw new Error(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n        }\n        return definition;\n    });\n    if (operations.length > 1) {\n        throw new Error(\"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n    }\n    return doc;\n}\nexport function getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];\n}\nexport function getOperationDefinitionOrDie(document) {\n    var def = getOperationDefinition(document);\n    if (!def) {\n        throw new Error(\"GraphQL document is missing an operation\");\n    }\n    return def;\n}\nexport function getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\nexport function getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });\n}\nexport function getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    if (!queryDef || queryDef.operation !== 'query') {\n        throw new Error('Must contain a query definition.');\n    }\n    return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n    if (doc.kind !== 'Document') {\n        throw new Error(\"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    }\n    if (doc.definitions.length > 1) {\n        throw new Error('Fragment must have exactly one definition.');\n    }\n    var fragmentDef = doc.definitions[0];\n    if (fragmentDef.kind !== 'FragmentDefinition') {\n        throw new Error('Must be a fragment definition.');\n    }\n    return fragmentDef;\n}\nexport function getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === 'OperationDefinition') {\n            var operation = definition.operation;\n            if (operation === 'query' ||\n                operation === 'mutation' ||\n                operation === 'subscription') {\n                return definition;\n            }\n        }\n        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw new Error('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\nexport function createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nexport function getDefaultValues(definition) {\n    if (definition &&\n        definition.variableDefinitions &&\n        definition.variableDefinitions.length) {\n        var defaultValues = definition.variableDefinitions\n            .filter(function (_a) {\n            var defaultValue = _a.defaultValue;\n            return defaultValue;\n        })\n            .map(function (_a) {\n            var variable = _a.variable, defaultValue = _a.defaultValue;\n            var defaultValueObj = {};\n            valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);\n            return defaultValueObj;\n        });\n        return assign.apply(void 0, [{}].concat(defaultValues));\n    }\n    return {};\n}\nexport function variablesInOperation(operation) {\n    var names = new Set();\n    if (operation.variableDefinitions) {\n        for (var _i = 0, _a = operation.variableDefinitions; _i < _a.length; _i++) {\n            var definition = _a[_i];\n            names.add(definition.variable.name.value);\n        }\n    }\n    return names;\n}\n//# sourceMappingURL=getFromAST.js.map","import * as tslib_1 from \"tslib\";\nimport stringify from 'fast-json-stable-stringify';\nexport function isScalarValue(value) {\n    return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\nexport function isNumberValue(value) {\n    return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\nfunction isStringValue(value) {\n    return value.kind === 'StringValue';\n}\nfunction isBooleanValue(value) {\n    return value.kind === 'BooleanValue';\n}\nfunction isIntValue(value) {\n    return value.kind === 'IntValue';\n}\nfunction isFloatValue(value) {\n    return value.kind === 'FloatValue';\n}\nfunction isVariable(value) {\n    return value.kind === 'Variable';\n}\nfunction isObjectValue(value) {\n    return value.kind === 'ObjectValue';\n}\nfunction isListValue(value) {\n    return value.kind === 'ListValue';\n}\nfunction isEnumValue(value) {\n    return value.kind === 'EnumValue';\n}\nfunction isNullValue(value) {\n    return value.kind === 'NullValue';\n}\nexport function valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    }\n    else {\n        throw new Error(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\"\" +\n            'is not supported. Use variables instead of inline arguments to ' +\n            'overcome this limitation.');\n    }\n}\nexport function storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function (directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function (_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    'connection',\n    'include',\n    'skip',\n    'client',\n    'rest',\n    'export',\n];\nexport function getStoreKeyName(fieldName, args, directives) {\n    if (directives &&\n        directives['connection'] &&\n        directives['connection']['key']) {\n        if (directives['connection']['filter'] &&\n            directives['connection']['filter'].length > 0) {\n            var filterKeys = directives['connection']['filter']\n                ? directives['connection']['filter']\n                : [];\n            filterKeys.sort();\n            var queryArgs_1 = args;\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function (key) {\n                filteredArgs_1[key] = queryArgs_1[key];\n            });\n            return directives['connection']['key'] + \"(\" + JSON.stringify(filteredArgs_1) + \")\";\n        }\n        else {\n            return directives['connection']['key'];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        var stringifiedArgs = stringify(args);\n        completeFieldName += \"(\" + stringifiedArgs + \")\";\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function (key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)\n                return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\" + key + \"(\" + JSON.stringify(directives[key]) + \")\";\n            }\n            else {\n                completeFieldName += \"@\" + key;\n            }\n        });\n    }\n    return completeFieldName;\n}\nexport function argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nexport function resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nexport function isField(selection) {\n    return selection.kind === 'Field';\n}\nexport function isInlineFragment(selection) {\n    return selection.kind === 'InlineFragment';\n}\nexport function isIdValue(idObject) {\n    return idObject &&\n        idObject.type === 'id' &&\n        typeof idObject.generated === 'boolean';\n}\nexport function toIdValue(idConfig, generated) {\n    if (generated === void 0) { generated = false; }\n    return tslib_1.__assign({ type: 'id', generated: generated }, (typeof idConfig === 'string'\n        ? { id: idConfig, typename: undefined }\n        : idConfig));\n}\nexport function isJsonValue(jsonObject) {\n    return (jsonObject != null &&\n        typeof jsonObject === 'object' &&\n        jsonObject.type === 'json');\n}\nfunction defaultValueFromVariable(node) {\n    throw new Error(\"Variable nodes are not supported by valueFromNode\");\n}\nexport function valueFromNode(node, onVariable) {\n    if (onVariable === void 0) { onVariable = defaultValueFromVariable; }\n    switch (node.kind) {\n        case 'Variable':\n            return onVariable(node);\n        case 'NullValue':\n            return null;\n        case 'IntValue':\n            return parseInt(node.value, 10);\n        case 'FloatValue':\n            return parseFloat(node.value);\n        case 'ListValue':\n            return node.values.map(function (v) { return valueFromNode(v, onVariable); });\n        case 'ObjectValue': {\n            var value = {};\n            for (var _i = 0, _a = node.fields; _i < _a.length; _i++) {\n                var field = _a[_i];\n                value[field.name.value] = valueFromNode(field.value, onVariable);\n            }\n            return value;\n        }\n        default:\n            return node.value;\n    }\n}\n//# sourceMappingURL=storeUtils.js.map","import * as tslib_1 from \"tslib\";\nexport function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            throw new Error(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" +\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n        }\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === 'undefined') {\n        if (fragments.length !== 1) {\n            throw new Error(\"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n        }\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = tslib_1.__assign({}, document, { definitions: [\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ].concat(document.definitions) });\n    return query;\n}\n//# sourceMappingURL=fragments.js.map"],"sourceRoot":""}