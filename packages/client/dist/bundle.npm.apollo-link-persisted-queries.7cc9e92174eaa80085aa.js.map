{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-link-persisted-queries/lib/index.js"],"names":["__webpack_require__","d","__webpack_exports__","createPersistedQueryLink","apollo_link__WEBPACK_IMPORTED_MODULE_0__","graphql_language_printer__WEBPACK_IMPORTED_MODULE_1__","sha256","defaultOptions","generateHash","query","update","Object","digest","disable","_a","graphQLErrors","operation","some","message","response","getContext","status","useGETForHashedQueries","definitionIsMutation","kind","hasOwnProperty","prototype","hashesKey","Symbol","for","nextHashesChildKey","options","assign","supportsPersistedQueries","hashesChildKey","getQueryHash","call","defineProperty","value","create","enumerable","hashes","forward","Error","hashError","extensions","persistedQuery","version","sha256Hash","e","observer","subscription","originalFetchOptions","retried","setFetchOptions","retry","cb","networkError","errors","disablePayload","undefined","unsubscribe","setContext","http","includeQuery","includeExtensions","fetchOptions","subscribe","handler","next","error","complete","bind","definitions","operationIsQuery","_b","method"],"mappings":"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","file":"bundle.npm.apollo-link-persisted-queries.7cc9e92174eaa80085aa.js","sourcesContent":["import { ApolloLink, Observable } from 'apollo-link';\nvar sha256 = require('hash.js/lib/hash/sha/256');\nimport { print } from 'graphql/language/printer';\nexport var VERSION = 1;\nexport var defaultGenerateHash = function (query) {\n    return sha256()\n        .update(print(query))\n        .digest('hex');\n};\nexport var defaultOptions = {\n    generateHash: defaultGenerateHash,\n    disable: function (_a) {\n        var graphQLErrors = _a.graphQLErrors, operation = _a.operation;\n        if (graphQLErrors &&\n            graphQLErrors.some(function (_a) {\n                var message = _a.message;\n                return message === 'PersistedQueryNotSupported';\n            })) {\n            return true;\n        }\n        var response = operation.getContext().response;\n        if (response &&\n            response.status &&\n            (response.status === 400 || response.status === 500)) {\n            return true;\n        }\n        return false;\n    },\n    useGETForHashedQueries: false,\n};\nfunction definitionIsMutation(d) {\n    return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n}\nfunction operationIsQuery(operation) {\n    return !operation.query.definitions.some(definitionIsMutation);\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar hashesKeyString = '__createPersistedQueryLink_hashes';\nvar hashesKey = typeof Symbol === 'function'\n    ? Symbol.for(hashesKeyString)\n    : hashesKeyString;\nvar nextHashesChildKey = 0;\nexport var createPersistedQueryLink = function (options) {\n    if (options === void 0) { options = {}; }\n    var _a = Object.assign({}, defaultOptions, options), generateHash = _a.generateHash, disable = _a.disable, useGETForHashedQueries = _a.useGETForHashedQueries;\n    var supportsPersistedQueries = true;\n    var hashesChildKey = 'forLink' + nextHashesChildKey++;\n    function getQueryHash(query) {\n        if (!query || typeof query !== \"object\") {\n            return generateHash(query);\n        }\n        if (!hasOwnProperty.call(query, hashesKey)) {\n            Object.defineProperty(query, hashesKey, {\n                value: Object.create(null),\n                enumerable: false,\n            });\n        }\n        var hashes = query[hashesKey];\n        return hasOwnProperty.call(hashes, hashesChildKey)\n            ? hashes[hashesChildKey]\n            : hashes[hashesChildKey] = generateHash(query);\n    }\n    return new ApolloLink(function (operation, forward) {\n        if (!forward) {\n            throw new Error('PersistedQueryLink cannot be the last link in the chain.');\n        }\n        var query = operation.query;\n        var hashError;\n        if (supportsPersistedQueries) {\n            try {\n                operation.extensions.persistedQuery = {\n                    version: VERSION,\n                    sha256Hash: getQueryHash(query),\n                };\n            }\n            catch (e) {\n                hashError = e;\n            }\n        }\n        return new Observable(function (observer) {\n            if (hashError) {\n                observer.error(hashError);\n                return;\n            }\n            var subscription;\n            var retried = false;\n            var originalFetchOptions;\n            var setFetchOptions = false;\n            var retry = function (_a, cb) {\n                var response = _a.response, networkError = _a.networkError;\n                if (!retried && ((response && response.errors) || networkError)) {\n                    retried = true;\n                    var disablePayload = {\n                        response: response,\n                        networkError: networkError,\n                        operation: operation,\n                        graphQLErrors: response ? response.errors : undefined,\n                    };\n                    supportsPersistedQueries = !disable(disablePayload);\n                    if ((response &&\n                        response.errors &&\n                        response.errors.some(function (_a) {\n                            var message = _a.message;\n                            return message === 'PersistedQueryNotFound';\n                        })) ||\n                        !supportsPersistedQueries) {\n                        if (subscription)\n                            subscription.unsubscribe();\n                        operation.setContext({\n                            http: {\n                                includeQuery: true,\n                                includeExtensions: supportsPersistedQueries,\n                            },\n                        });\n                        if (setFetchOptions) {\n                            operation.setContext({ fetchOptions: originalFetchOptions });\n                        }\n                        subscription = forward(operation).subscribe(handler);\n                        return;\n                    }\n                }\n                cb();\n            };\n            var handler = {\n                next: function (response) {\n                    retry({ response: response }, function () { return observer.next(response); });\n                },\n                error: function (networkError) {\n                    retry({ networkError: networkError }, function () { return observer.error(networkError); });\n                },\n                complete: observer.complete.bind(observer),\n            };\n            operation.setContext({\n                http: {\n                    includeQuery: !supportsPersistedQueries,\n                    includeExtensions: supportsPersistedQueries,\n                },\n            });\n            if (useGETForHashedQueries &&\n                supportsPersistedQueries &&\n                operationIsQuery(operation)) {\n                operation.setContext(function (_a) {\n                    var _b = _a.fetchOptions, fetchOptions = _b === void 0 ? {} : _b;\n                    originalFetchOptions = fetchOptions;\n                    return {\n                        fetchOptions: Object.assign({}, fetchOptions, { method: 'GET' }),\n                    };\n                });\n                setFetchOptions = true;\n            }\n            subscription = forward(operation).subscribe(handler);\n            return function () {\n                if (subscription)\n                    subscription.unsubscribe();\n            };\n        });\n    });\n};\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}