{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-cache-inmemory/node_modules/ts-invariant/lib/invariant.esm.js","webpack:////var/www/html/utter/node_modules/apollo-cache-inmemory/lib/bundle.esm.js"],"names":["genericMessage","invariant_esm_a","Object","setPrototypeOf","obj","proto","__proto__","invariant_esm_InvariantError","_super","InvariantError","message","_this","call","this","framesToPop","name","prototype","tslib_es6","Error","invariant","condition","warn","args","_i","arguments","length","console","apply","error","__webpack_require__","d","__webpack_exports__","bundle_esm_InMemoryCache","testMap","Map","set","set_1","testSet","Set","add","add_1","frozen","freeze","delete","_a","wrap","method","seal","preventExtensions","haveWarned","shouldWarn","answer","lib_bundle_esm","HeuristicFragmentMatcher","ensureReady","Promise","resolve","canBypassInit","match","idValue","typeCondition","context","store","get","id","__typename","CacheKeyNode","IntrospectionFragmentMatcher","options","introspectionQueryResultData","possibleTypesMap","parseIntrospectionResult","isReady","bind","implementingTypes","indexOf","introspectionResultData","typeMap","__schema","types","forEach","type","kind","possibleTypes","map","implementingType","children","key","lookup","lookupArray","array","node","value","getOrCreate","create","hasOwn","hasOwnProperty","bundle_esm_DepTrackingCache","DepTrackingCache","data","depend","lib","dataId","disposable","makeCacheKey","toObject","dirty","clear","replace","newData","keys","defaultNormalizedCacheFactory","seed","bundle_esm_StoreReader","StoreReader","cacheKeyRoot","reader","executeStoreQuery","executeSelectionSet","query","rootValue","contextValue","variableValues","fragmentMatcher","JSON","stringify","selectionSet","execContext","readQueryFromStore","diffQueryAgainstStore","returnPartialData","result","variables","previousResult","_b","_c","rootId","fragmentMatcherFunction","config","queryDefinition","dataIdFromObject","cacheRedirects","execResult","generated","typename","hasMissingFields","missing","info","tolerable","complete","defaultFragmentMatcher","mainDefinition","fragments","fragmentMap","finalResult","objectsToMerge","object","handleMissing","push","selections","selection","fieldResult","executeField","fragment","fragmentExecResult","field","readStoreResult","fieldName","resultKey","directives","storeKeyName","fieldValue","resolver","getCacheKey","storeObj","json","readStoreResolver","Array","isArray","combineExecResults","executeSubSelectedArray","assertSelectionSetForIdValue","execResults","pop","childResult","item","ObjectCache","bundle_esm_WriteError","WriteError","bundle_esm_StoreWriter","StoreWriter","writeQueryToStore","writeResultToStore","document","operationDefinition","writeSelectionSetToStore","processedData","e","enhancedError","stack","enhanceErrorWithDocument","resultFieldKey","writeFieldToStore","isDefered","isClient","some","directive","matches","undefined","fakeContext","self","storeValue","storeObject","storeFieldName","generatedId","processArrayValue","valueDataId","isGeneratedId","semanticId","isDataProcessed","escapedId","hadTypename","hasTypename","typenameChanged","mergeWithGenerated","generatedKey","realKey","cache","real","madeChanges","realValue","newRealValue","index","itemDataId","defaultConfig","_id","addTypename","resultCaching","hasOwn$1","bundle_esm_OptimisticCacheLayer","OptimisticCacheLayer","optimisticId","parent","transaction","InMemoryCache","watches","typenameDocumentCache","silenceBroadcast","customResolvers","cacheResolvers","optimisticData","storeReader","storeWriter","maybeBroadcastWatch","c","optimistic","restore","extract","read","transformDocument","write","broadcastWatches","diff","watch","evict","reset","removeOptimistic","idToRemove","toReapply","removedCount","layer","layer_1","performTransaction","recordOptimisticTransaction","callback","bundle_esm"],"mappings":"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","file":"bundle.npm.apollo-cache-inmemory.ff0ca8f8fc544cc82ac2.js","sourcesContent":["import { __extends } from 'tslib';\n\nvar genericMessage = \"Invariant Violation\";\r\nvar _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {\r\n    obj.__proto__ = proto;\r\n    return obj;\r\n} : _a;\r\nvar InvariantError = /** @class */ (function (_super) {\r\n    __extends(InvariantError, _super);\r\n    function InvariantError(message) {\r\n        if (message === void 0) { message = genericMessage; }\r\n        var _this = _super.call(this, message) || this;\r\n        _this.framesToPop = 1;\r\n        _this.name = genericMessage;\r\n        setPrototypeOf(_this, InvariantError.prototype);\r\n        return _this;\r\n    }\r\n    return InvariantError;\r\n}(Error));\r\nfunction invariant(condition, message) {\r\n    if (!condition) {\r\n        throw new InvariantError(message);\r\n    }\r\n}\r\n(function (invariant) {\r\n    function warn() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return console.warn.apply(console, args);\r\n    }\r\n    invariant.warn = warn;\r\n    function error() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return console.error.apply(console, args);\r\n    }\r\n    invariant.error = error;\r\n})(invariant || (invariant = {}));\r\nvar invariant$1 = invariant;\n\nexport default invariant$1;\nexport { InvariantError, invariant };\n","import { __assign, __extends } from 'tslib';\nimport { ApolloCache } from 'apollo-cache';\nimport { isTest, getQueryDefinition, assign, getDefaultValues, isEqual, getMainDefinition, getFragmentDefinitions, createFragmentMap, shouldInclude, isField, resultKeyNameFromField, isInlineFragment, mergeDeepArray, argumentsObjectFromField, getDirectiveInfoFromField, isIdValue, getStoreKeyName, toIdValue, isJsonValue, getOperationDefinition, isProduction, storeKeyNameFromField, addTypenameToDocument } from 'apollo-utilities';\nimport { wrap as wrap$1 } from 'optimism';\nimport { invariant, InvariantError } from 'ts-invariant';\n\nvar testMap = new Map();\nif (testMap.set(1, 2) !== testMap) {\n    var set_1 = testMap.set;\n    Map.prototype.set = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        set_1.apply(this, args);\n        return this;\n    };\n}\nvar testSet = new Set();\nif (testSet.add(3) !== testSet) {\n    var add_1 = testSet.add;\n    Set.prototype.add = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        add_1.apply(this, args);\n        return this;\n    };\n}\nvar frozen = {};\nif (typeof Object.freeze === 'function') {\n    Object.freeze(frozen);\n}\ntry {\n    testMap.set(frozen, frozen).delete(frozen);\n}\ncatch (_a) {\n    var wrap = function (method) {\n        return method && (function (obj) {\n            try {\n                testMap.set(obj, obj).delete(obj);\n            }\n            finally {\n                return method.call(Object, obj);\n            }\n        });\n    };\n    Object.freeze = wrap(Object.freeze);\n    Object.seal = wrap(Object.seal);\n    Object.preventExtensions = wrap(Object.preventExtensions);\n}\n\nvar haveWarned = false;\nfunction shouldWarn() {\n    var answer = !haveWarned;\n    if (!isTest()) {\n        haveWarned = true;\n    }\n    return answer;\n}\nvar HeuristicFragmentMatcher = (function () {\n    function HeuristicFragmentMatcher() {\n    }\n    HeuristicFragmentMatcher.prototype.ensureReady = function () {\n        return Promise.resolve();\n    };\n    HeuristicFragmentMatcher.prototype.canBypassInit = function () {\n        return true;\n    };\n    HeuristicFragmentMatcher.prototype.match = function (idValue, typeCondition, context) {\n        var obj = context.store.get(idValue.id);\n        if (!obj && idValue.id === 'ROOT_QUERY') {\n            return true;\n        }\n        if (!obj) {\n            return false;\n        }\n        if (!obj.__typename) {\n            if (shouldWarn()) {\n                process.env.NODE_ENV === \"production\" || invariant.warn(\"You're using fragments in your queries, but either don't have the addTypename:\\n  true option set in Apollo Client, or you are trying to write a fragment to the store without the __typename.\\n   Please turn on the addTypename option and include __typename when writing fragments so that Apollo Client\\n   can accurately match fragments.\");\n                process.env.NODE_ENV === \"production\" || invariant.warn('Could not find __typename on Fragment ', typeCondition, obj);\n                process.env.NODE_ENV === \"production\" || invariant.warn(\"DEPRECATION WARNING: using fragments without __typename is unsupported behavior \" +\n                    \"and will be removed in future versions of Apollo client. You should fix this and set addTypename to true now.\");\n            }\n            return 'heuristic';\n        }\n        if (obj.__typename === typeCondition) {\n            return true;\n        }\n        if (shouldWarn()) {\n            process.env.NODE_ENV === \"production\" || invariant.error('You are using the simple (heuristic) fragment matcher, but your ' +\n                'queries contain union or interface types. Apollo Client will not be ' +\n                'able to accurately map fragments. To make this error go away, use ' +\n                'the `IntrospectionFragmentMatcher` as described in the docs: ' +\n                'https://www.apollographql.com/docs/react/advanced/fragments.html#fragment-matcher');\n        }\n        return 'heuristic';\n    };\n    return HeuristicFragmentMatcher;\n}());\nvar IntrospectionFragmentMatcher = (function () {\n    function IntrospectionFragmentMatcher(options) {\n        if (options && options.introspectionQueryResultData) {\n            this.possibleTypesMap = this.parseIntrospectionResult(options.introspectionQueryResultData);\n            this.isReady = true;\n        }\n        else {\n            this.isReady = false;\n        }\n        this.match = this.match.bind(this);\n    }\n    IntrospectionFragmentMatcher.prototype.match = function (idValue, typeCondition, context) {\n        process.env.NODE_ENV === \"production\" ? invariant(this.isReady) : invariant(this.isReady, 'FragmentMatcher.match() was called before FragmentMatcher.init()');\n        var obj = context.store.get(idValue.id);\n        if (!obj) {\n            return false;\n        }\n        process.env.NODE_ENV === \"production\" ? invariant(obj.__typename) : invariant(obj.__typename, \"Cannot match fragment because __typename property is missing: \" + JSON.stringify(obj));\n        if (obj.__typename === typeCondition) {\n            return true;\n        }\n        var implementingTypes = this.possibleTypesMap[typeCondition];\n        if (implementingTypes && implementingTypes.indexOf(obj.__typename) > -1) {\n            return true;\n        }\n        return false;\n    };\n    IntrospectionFragmentMatcher.prototype.parseIntrospectionResult = function (introspectionResultData) {\n        var typeMap = {};\n        introspectionResultData.__schema.types.forEach(function (type) {\n            if (type.kind === 'UNION' || type.kind === 'INTERFACE') {\n                typeMap[type.name] = type.possibleTypes.map(function (implementingType) { return implementingType.name; });\n            }\n        });\n        return typeMap;\n    };\n    return IntrospectionFragmentMatcher;\n}());\n\nvar CacheKeyNode = (function () {\n    function CacheKeyNode() {\n        this.children = null;\n        this.key = null;\n    }\n    CacheKeyNode.prototype.lookup = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return this.lookupArray(args);\n    };\n    CacheKeyNode.prototype.lookupArray = function (array) {\n        var node = this;\n        array.forEach(function (value) {\n            node = node.getOrCreate(value);\n        });\n        return node.key || (node.key = Object.create(null));\n    };\n    CacheKeyNode.prototype.getOrCreate = function (value) {\n        var map = this.children || (this.children = new Map());\n        var node = map.get(value);\n        if (!node) {\n            map.set(value, (node = new CacheKeyNode()));\n        }\n        return node;\n    };\n    return CacheKeyNode;\n}());\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar DepTrackingCache = (function () {\n    function DepTrackingCache(data) {\n        if (data === void 0) { data = Object.create(null); }\n        var _this = this;\n        this.data = data;\n        this.depend = wrap$1(function (dataId) { return _this.data[dataId]; }, {\n            disposable: true,\n            makeCacheKey: function (dataId) {\n                return dataId;\n            }\n        });\n    }\n    DepTrackingCache.prototype.toObject = function () {\n        return this.data;\n    };\n    DepTrackingCache.prototype.get = function (dataId) {\n        this.depend(dataId);\n        return this.data[dataId];\n    };\n    DepTrackingCache.prototype.set = function (dataId, value) {\n        var oldValue = this.data[dataId];\n        if (value !== oldValue) {\n            this.data[dataId] = value;\n            this.depend.dirty(dataId);\n        }\n    };\n    DepTrackingCache.prototype.delete = function (dataId) {\n        if (hasOwn.call(this.data, dataId)) {\n            delete this.data[dataId];\n            this.depend.dirty(dataId);\n        }\n    };\n    DepTrackingCache.prototype.clear = function () {\n        this.replace(null);\n    };\n    DepTrackingCache.prototype.replace = function (newData) {\n        var _this = this;\n        if (newData) {\n            Object.keys(newData).forEach(function (dataId) {\n                _this.set(dataId, newData[dataId]);\n            });\n            Object.keys(this.data).forEach(function (dataId) {\n                if (!hasOwn.call(newData, dataId)) {\n                    _this.delete(dataId);\n                }\n            });\n        }\n        else {\n            Object.keys(this.data).forEach(function (dataId) {\n                _this.delete(dataId);\n            });\n        }\n    };\n    return DepTrackingCache;\n}());\nfunction defaultNormalizedCacheFactory(seed) {\n    return new DepTrackingCache(seed);\n}\n\nvar StoreReader = (function () {\n    function StoreReader(cacheKeyRoot) {\n        if (cacheKeyRoot === void 0) { cacheKeyRoot = new CacheKeyNode; }\n        var _this = this;\n        this.cacheKeyRoot = cacheKeyRoot;\n        var reader = this;\n        var executeStoreQuery = reader.executeStoreQuery, executeSelectionSet = reader.executeSelectionSet;\n        this.executeStoreQuery = wrap$1(function (options) {\n            return executeStoreQuery.call(_this, options);\n        }, {\n            makeCacheKey: function (_a) {\n                var query = _a.query, rootValue = _a.rootValue, contextValue = _a.contextValue, variableValues = _a.variableValues, fragmentMatcher = _a.fragmentMatcher;\n                if (contextValue.store instanceof DepTrackingCache) {\n                    return reader.cacheKeyRoot.lookup(query, contextValue.store, fragmentMatcher, JSON.stringify(variableValues), rootValue.id);\n                }\n                return;\n            }\n        });\n        this.executeSelectionSet = wrap$1(function (options) {\n            return executeSelectionSet.call(_this, options);\n        }, {\n            makeCacheKey: function (_a) {\n                var selectionSet = _a.selectionSet, rootValue = _a.rootValue, execContext = _a.execContext;\n                if (execContext.contextValue.store instanceof DepTrackingCache) {\n                    return reader.cacheKeyRoot.lookup(selectionSet, execContext.contextValue.store, execContext.fragmentMatcher, JSON.stringify(execContext.variableValues), rootValue.id);\n                }\n                return;\n            }\n        });\n    }\n    StoreReader.prototype.readQueryFromStore = function (options) {\n        var optsPatch = { returnPartialData: false };\n        return this.diffQueryAgainstStore(__assign({}, options, optsPatch)).result;\n    };\n    StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n        var store = _a.store, query = _a.query, variables = _a.variables, previousResult = _a.previousResult, _b = _a.returnPartialData, returnPartialData = _b === void 0 ? true : _b, _c = _a.rootId, rootId = _c === void 0 ? 'ROOT_QUERY' : _c, fragmentMatcherFunction = _a.fragmentMatcherFunction, config = _a.config;\n        var queryDefinition = getQueryDefinition(query);\n        variables = assign({}, getDefaultValues(queryDefinition), variables);\n        var context = {\n            store: store,\n            dataIdFromObject: (config && config.dataIdFromObject) || null,\n            cacheRedirects: (config && config.cacheRedirects) || {},\n        };\n        var execResult = this.executeStoreQuery({\n            query: query,\n            rootValue: {\n                type: 'id',\n                id: rootId,\n                generated: true,\n                typename: 'Query',\n            },\n            contextValue: context,\n            variableValues: variables,\n            fragmentMatcher: fragmentMatcherFunction,\n        });\n        var hasMissingFields = execResult.missing && execResult.missing.length > 0;\n        if (hasMissingFields && !returnPartialData) {\n            execResult.missing.forEach(function (info) {\n                if (info.tolerable)\n                    return;\n                throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"Can't find field \" + info.fieldName + \" on object \" + JSON.stringify(info.object, null, 2) + \".\");\n            });\n        }\n        if (previousResult) {\n            if (isEqual(previousResult, execResult.result)) {\n                execResult.result = previousResult;\n            }\n        }\n        return {\n            result: execResult.result,\n            complete: !hasMissingFields,\n        };\n    };\n    StoreReader.prototype.executeStoreQuery = function (_a) {\n        var query = _a.query, rootValue = _a.rootValue, contextValue = _a.contextValue, variableValues = _a.variableValues, _b = _a.fragmentMatcher, fragmentMatcher = _b === void 0 ? defaultFragmentMatcher : _b;\n        var mainDefinition = getMainDefinition(query);\n        var fragments = getFragmentDefinitions(query);\n        var fragmentMap = createFragmentMap(fragments);\n        var execContext = {\n            query: query,\n            fragmentMap: fragmentMap,\n            contextValue: contextValue,\n            variableValues: variableValues,\n            fragmentMatcher: fragmentMatcher,\n        };\n        return this.executeSelectionSet({\n            selectionSet: mainDefinition.selectionSet,\n            rootValue: rootValue,\n            execContext: execContext,\n        });\n    };\n    StoreReader.prototype.executeSelectionSet = function (_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, rootValue = _a.rootValue, execContext = _a.execContext;\n        var fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;\n        var finalResult = { result: null };\n        var objectsToMerge = [];\n        var object = contextValue.store.get(rootValue.id);\n        var typename = (object && object.__typename) ||\n            (rootValue.id === 'ROOT_QUERY' && 'Query') ||\n            void 0;\n        function handleMissing(result) {\n            var _a;\n            if (result.missing) {\n                finalResult.missing = finalResult.missing || [];\n                (_a = finalResult.missing).push.apply(_a, result.missing);\n            }\n            return result.result;\n        }\n        selectionSet.selections.forEach(function (selection) {\n            var _a;\n            if (!shouldInclude(selection, variables)) {\n                return;\n            }\n            if (isField(selection)) {\n                var fieldResult = handleMissing(_this.executeField(object, typename, selection, execContext));\n                if (typeof fieldResult !== 'undefined') {\n                    objectsToMerge.push((_a = {},\n                        _a[resultKeyNameFromField(selection)] = fieldResult,\n                        _a));\n                }\n            }\n            else {\n                var fragment = void 0;\n                if (isInlineFragment(selection)) {\n                    fragment = selection;\n                }\n                else {\n                    fragment = fragmentMap[selection.name.value];\n                    if (!fragment) {\n                        throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"No fragment named \" + selection.name.value);\n                    }\n                }\n                var typeCondition = fragment.typeCondition.name.value;\n                var match = execContext.fragmentMatcher(rootValue, typeCondition, contextValue);\n                if (match) {\n                    var fragmentExecResult = _this.executeSelectionSet({\n                        selectionSet: fragment.selectionSet,\n                        rootValue: rootValue,\n                        execContext: execContext,\n                    });\n                    if (match === 'heuristic' && fragmentExecResult.missing) {\n                        fragmentExecResult = __assign({}, fragmentExecResult, { missing: fragmentExecResult.missing.map(function (info) {\n                                return __assign({}, info, { tolerable: true });\n                            }) });\n                    }\n                    objectsToMerge.push(handleMissing(fragmentExecResult));\n                }\n            }\n        });\n        finalResult.result = mergeDeepArray(objectsToMerge);\n        return finalResult;\n    };\n    StoreReader.prototype.executeField = function (object, typename, field, execContext) {\n        var variables = execContext.variableValues, contextValue = execContext.contextValue;\n        var fieldName = field.name.value;\n        var args = argumentsObjectFromField(field, variables);\n        var info = {\n            resultKey: resultKeyNameFromField(field),\n            directives: getDirectiveInfoFromField(field, variables),\n        };\n        var readStoreResult = readStoreResolver(object, typename, fieldName, args, contextValue, info);\n        if (Array.isArray(readStoreResult.result)) {\n            return this.combineExecResults(readStoreResult, this.executeSubSelectedArray(field, readStoreResult.result, execContext));\n        }\n        if (!field.selectionSet) {\n            assertSelectionSetForIdValue(field, readStoreResult.result);\n            return readStoreResult;\n        }\n        if (readStoreResult.result == null) {\n            return readStoreResult;\n        }\n        return this.combineExecResults(readStoreResult, this.executeSelectionSet({\n            selectionSet: field.selectionSet,\n            rootValue: readStoreResult.result,\n            execContext: execContext,\n        }));\n    };\n    StoreReader.prototype.combineExecResults = function () {\n        var execResults = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            execResults[_i] = arguments[_i];\n        }\n        var missing = null;\n        execResults.forEach(function (execResult) {\n            if (execResult.missing) {\n                missing = missing || [];\n                missing.push.apply(missing, execResult.missing);\n            }\n        });\n        return {\n            result: execResults.pop().result,\n            missing: missing,\n        };\n    };\n    StoreReader.prototype.executeSubSelectedArray = function (field, result, execContext) {\n        var _this = this;\n        var missing = null;\n        function handleMissing(childResult) {\n            if (childResult.missing) {\n                missing = missing || [];\n                missing.push.apply(missing, childResult.missing);\n            }\n            return childResult.result;\n        }\n        result = result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return handleMissing(_this.executeSubSelectedArray(field, item, execContext));\n            }\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    rootValue: item,\n                    execContext: execContext,\n                }));\n            }\n            assertSelectionSetForIdValue(field, item);\n            return item;\n        });\n        return { result: result, missing: missing };\n    };\n    return StoreReader;\n}());\nfunction assertSelectionSetForIdValue(field, value) {\n    if (!field.selectionSet && isIdValue(value)) {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"Missing selection set for object of type \" + value.typename + \" returned for query field \" + field.name.value);\n    }\n}\nfunction defaultFragmentMatcher() {\n    return true;\n}\nfunction assertIdValue(idValue) {\n    process.env.NODE_ENV === \"production\" ? invariant(isIdValue(idValue)) : invariant(isIdValue(idValue), \"Encountered a sub-selection on the query, but the store doesn't have an object reference. This should never happen during normal use unless you have custom code that is directly manipulating the store; please file an issue.\");\n}\nfunction readStoreResolver(object, typename, fieldName, args, context, _a) {\n    var resultKey = _a.resultKey, directives = _a.directives;\n    var storeKeyName = fieldName;\n    if (args || directives) {\n        storeKeyName = getStoreKeyName(storeKeyName, args, directives);\n    }\n    var fieldValue = void 0;\n    if (object) {\n        fieldValue = object[storeKeyName];\n        if (typeof fieldValue === 'undefined' &&\n            context.cacheRedirects &&\n            typeof typename === 'string') {\n            var type = context.cacheRedirects[typename];\n            if (type) {\n                var resolver = type[fieldName];\n                if (resolver) {\n                    fieldValue = resolver(object, args, {\n                        getCacheKey: function (storeObj) {\n                            return toIdValue({\n                                id: context.dataIdFromObject(storeObj),\n                                typename: storeObj.__typename,\n                            });\n                        },\n                    });\n                }\n            }\n        }\n    }\n    if (typeof fieldValue === 'undefined') {\n        return {\n            result: fieldValue,\n            missing: [{\n                    object: object,\n                    fieldName: storeKeyName,\n                    tolerable: false,\n                }],\n        };\n    }\n    if (isJsonValue(fieldValue)) {\n        fieldValue = fieldValue.json;\n    }\n    return {\n        result: fieldValue,\n    };\n}\n\nvar ObjectCache = (function () {\n    function ObjectCache(data) {\n        if (data === void 0) { data = Object.create(null); }\n        this.data = data;\n    }\n    ObjectCache.prototype.toObject = function () {\n        return this.data;\n    };\n    ObjectCache.prototype.get = function (dataId) {\n        return this.data[dataId];\n    };\n    ObjectCache.prototype.set = function (dataId, value) {\n        this.data[dataId] = value;\n    };\n    ObjectCache.prototype.delete = function (dataId) {\n        this.data[dataId] = void 0;\n    };\n    ObjectCache.prototype.clear = function () {\n        this.data = Object.create(null);\n    };\n    ObjectCache.prototype.replace = function (newData) {\n        this.data = newData || Object.create(null);\n    };\n    return ObjectCache;\n}());\nfunction defaultNormalizedCacheFactory$1(seed) {\n    return new ObjectCache(seed);\n}\n\nvar WriteError = (function (_super) {\n    __extends(WriteError, _super);\n    function WriteError() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'WriteError';\n        return _this;\n    }\n    return WriteError;\n}(Error));\nfunction enhanceErrorWithDocument(error, document) {\n    var enhancedError = new WriteError(\"Error writing result to store for query:\\n \" + JSON.stringify(document));\n    enhancedError.message += '\\n' + error.message;\n    enhancedError.stack = error.stack;\n    return enhancedError;\n}\nvar StoreWriter = (function () {\n    function StoreWriter() {\n    }\n    StoreWriter.prototype.writeQueryToStore = function (_a) {\n        var query = _a.query, result = _a.result, _b = _a.store, store = _b === void 0 ? defaultNormalizedCacheFactory() : _b, variables = _a.variables, dataIdFromObject = _a.dataIdFromObject, fragmentMatcherFunction = _a.fragmentMatcherFunction;\n        return this.writeResultToStore({\n            dataId: 'ROOT_QUERY',\n            result: result,\n            document: query,\n            store: store,\n            variables: variables,\n            dataIdFromObject: dataIdFromObject,\n            fragmentMatcherFunction: fragmentMatcherFunction,\n        });\n    };\n    StoreWriter.prototype.writeResultToStore = function (_a) {\n        var dataId = _a.dataId, result = _a.result, document = _a.document, _b = _a.store, store = _b === void 0 ? defaultNormalizedCacheFactory() : _b, variables = _a.variables, dataIdFromObject = _a.dataIdFromObject, fragmentMatcherFunction = _a.fragmentMatcherFunction;\n        var operationDefinition = getOperationDefinition(document);\n        try {\n            return this.writeSelectionSetToStore({\n                result: result,\n                dataId: dataId,\n                selectionSet: operationDefinition.selectionSet,\n                context: {\n                    store: store,\n                    processedData: {},\n                    variables: assign({}, getDefaultValues(operationDefinition), variables),\n                    dataIdFromObject: dataIdFromObject,\n                    fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n                    fragmentMatcherFunction: fragmentMatcherFunction,\n                },\n            });\n        }\n        catch (e) {\n            throw enhanceErrorWithDocument(e, document);\n        }\n    };\n    StoreWriter.prototype.writeSelectionSetToStore = function (_a) {\n        var _this = this;\n        var result = _a.result, dataId = _a.dataId, selectionSet = _a.selectionSet, context = _a.context;\n        var variables = context.variables, store = context.store, fragmentMap = context.fragmentMap;\n        selectionSet.selections.forEach(function (selection) {\n            if (!shouldInclude(selection, variables)) {\n                return;\n            }\n            if (isField(selection)) {\n                var resultFieldKey = resultKeyNameFromField(selection);\n                var value = result[resultFieldKey];\n                if (typeof value !== 'undefined') {\n                    _this.writeFieldToStore({\n                        dataId: dataId,\n                        value: value,\n                        field: selection,\n                        context: context,\n                    });\n                }\n                else {\n                    var isDefered = false;\n                    var isClient = false;\n                    if (selection.directives && selection.directives.length) {\n                        isDefered = selection.directives.some(function (directive) { return directive.name && directive.name.value === 'defer'; });\n                        isClient = selection.directives.some(function (directive) { return directive.name && directive.name.value === 'client'; });\n                    }\n                    if (!isDefered && !isClient && context.fragmentMatcherFunction) {\n                        process.env.NODE_ENV === \"production\" || invariant.warn(\"Missing field \" + resultFieldKey + \" in \" + JSON.stringify(result, null, 2).substring(0, 100));\n                    }\n                }\n            }\n            else {\n                var fragment = void 0;\n                if (isInlineFragment(selection)) {\n                    fragment = selection;\n                }\n                else {\n                    fragment = (fragmentMap || {})[selection.name.value];\n                    process.env.NODE_ENV === \"production\" ? invariant(fragment) : invariant(fragment, \"No fragment named \" + selection.name.value + \".\");\n                }\n                var matches = true;\n                if (context.fragmentMatcherFunction && fragment.typeCondition) {\n                    var idValue = toIdValue({ id: 'self', typename: undefined });\n                    var fakeContext = {\n                        store: new ObjectCache({ self: result }),\n                        cacheRedirects: {},\n                    };\n                    var match = context.fragmentMatcherFunction(idValue, fragment.typeCondition.name.value, fakeContext);\n                    if (!isProduction() && match === 'heuristic') {\n                        process.env.NODE_ENV === \"production\" || invariant.error('WARNING: heuristic fragment matching going on!');\n                    }\n                    matches = !!match;\n                }\n                if (matches) {\n                    _this.writeSelectionSetToStore({\n                        result: result,\n                        selectionSet: fragment.selectionSet,\n                        dataId: dataId,\n                        context: context,\n                    });\n                }\n            }\n        });\n        return store;\n    };\n    StoreWriter.prototype.writeFieldToStore = function (_a) {\n        var field = _a.field, value = _a.value, dataId = _a.dataId, context = _a.context;\n        var _b;\n        var variables = context.variables, dataIdFromObject = context.dataIdFromObject, store = context.store;\n        var storeValue;\n        var storeObject;\n        var storeFieldName = storeKeyNameFromField(field, variables);\n        if (!field.selectionSet || value === null) {\n            storeValue =\n                value != null && typeof value === 'object'\n                    ?\n                        { type: 'json', json: value }\n                    :\n                        value;\n        }\n        else if (Array.isArray(value)) {\n            var generatedId = dataId + \".\" + storeFieldName;\n            storeValue = this.processArrayValue(value, generatedId, field.selectionSet, context);\n        }\n        else {\n            var valueDataId = dataId + \".\" + storeFieldName;\n            var generated = true;\n            if (!isGeneratedId(valueDataId)) {\n                valueDataId = '$' + valueDataId;\n            }\n            if (dataIdFromObject) {\n                var semanticId = dataIdFromObject(value);\n                process.env.NODE_ENV === \"production\" ? invariant(!semanticId || !isGeneratedId(semanticId)) : invariant(!semanticId || !isGeneratedId(semanticId), 'IDs returned by dataIdFromObject cannot begin with the \"$\" character.');\n                if (semanticId ||\n                    (typeof semanticId === 'number' && semanticId === 0)) {\n                    valueDataId = semanticId;\n                    generated = false;\n                }\n            }\n            if (!isDataProcessed(valueDataId, field, context.processedData)) {\n                this.writeSelectionSetToStore({\n                    dataId: valueDataId,\n                    result: value,\n                    selectionSet: field.selectionSet,\n                    context: context,\n                });\n            }\n            var typename = value.__typename;\n            storeValue = toIdValue({ id: valueDataId, typename: typename }, generated);\n            storeObject = store.get(dataId);\n            var escapedId = storeObject && storeObject[storeFieldName];\n            if (escapedId !== storeValue && isIdValue(escapedId)) {\n                var hadTypename = escapedId.typename !== undefined;\n                var hasTypename = typename !== undefined;\n                var typenameChanged = hadTypename && hasTypename && escapedId.typename !== typename;\n                process.env.NODE_ENV === \"production\" ? invariant(!generated || escapedId.generated || typenameChanged) : invariant(!generated || escapedId.generated || typenameChanged, \"Store error: the application attempted to write an object with no provided id but the store already contains an id of \" + escapedId.id + \" for this object. The selectionSet that was trying to be written is:\\n\" + JSON.stringify(field));\n                process.env.NODE_ENV === \"production\" ? invariant(!hadTypename || hasTypename) : invariant(!hadTypename || hasTypename, \"Store error: the application attempted to write an object with no provided typename but the store already contains an object with typename of \" + escapedId.typename + \" for the object of id \" + escapedId.id + \". The selectionSet that was trying to be written is:\\n\" + JSON.stringify(field));\n                if (escapedId.generated) {\n                    if (typenameChanged) {\n                        if (!generated) {\n                            store.delete(escapedId.id);\n                        }\n                    }\n                    else {\n                        mergeWithGenerated(escapedId.id, storeValue.id, store);\n                    }\n                }\n            }\n        }\n        storeObject = store.get(dataId);\n        if (!storeObject || !isEqual(storeValue, storeObject[storeFieldName])) {\n            store.set(dataId, __assign({}, storeObject, (_b = {}, _b[storeFieldName] = storeValue, _b)));\n        }\n    };\n    StoreWriter.prototype.processArrayValue = function (value, generatedId, selectionSet, context) {\n        var _this = this;\n        return value.map(function (item, index) {\n            if (item === null) {\n                return null;\n            }\n            var itemDataId = generatedId + \".\" + index;\n            if (Array.isArray(item)) {\n                return _this.processArrayValue(item, itemDataId, selectionSet, context);\n            }\n            var generated = true;\n            if (context.dataIdFromObject) {\n                var semanticId = context.dataIdFromObject(item);\n                if (semanticId) {\n                    itemDataId = semanticId;\n                    generated = false;\n                }\n            }\n            if (!isDataProcessed(itemDataId, selectionSet, context.processedData)) {\n                _this.writeSelectionSetToStore({\n                    dataId: itemDataId,\n                    result: item,\n                    selectionSet: selectionSet,\n                    context: context,\n                });\n            }\n            return toIdValue({ id: itemDataId, typename: item.__typename }, generated);\n        });\n    };\n    return StoreWriter;\n}());\nfunction isGeneratedId(id) {\n    return id[0] === '$';\n}\nfunction mergeWithGenerated(generatedKey, realKey, cache) {\n    if (generatedKey === realKey) {\n        return false;\n    }\n    var generated = cache.get(generatedKey);\n    var real = cache.get(realKey);\n    var madeChanges = false;\n    Object.keys(generated).forEach(function (key) {\n        var value = generated[key];\n        var realValue = real[key];\n        if (isIdValue(value) &&\n            isGeneratedId(value.id) &&\n            isIdValue(realValue) &&\n            !isEqual(value, realValue) &&\n            mergeWithGenerated(value.id, realValue.id, cache)) {\n            madeChanges = true;\n        }\n    });\n    cache.delete(generatedKey);\n    var newRealValue = __assign({}, generated, real);\n    if (isEqual(newRealValue, real)) {\n        return madeChanges;\n    }\n    cache.set(realKey, newRealValue);\n    return true;\n}\nfunction isDataProcessed(dataId, field, processedData) {\n    if (!processedData) {\n        return false;\n    }\n    if (processedData[dataId]) {\n        if (processedData[dataId].indexOf(field) >= 0) {\n            return true;\n        }\n        else {\n            processedData[dataId].push(field);\n        }\n    }\n    else {\n        processedData[dataId] = [field];\n    }\n    return false;\n}\n\nvar defaultConfig = {\n    fragmentMatcher: new HeuristicFragmentMatcher(),\n    dataIdFromObject: defaultDataIdFromObject,\n    addTypename: true,\n    resultCaching: true,\n};\nfunction defaultDataIdFromObject(result) {\n    if (result.__typename) {\n        if (result.id !== undefined) {\n            return result.__typename + \":\" + result.id;\n        }\n        if (result._id !== undefined) {\n            return result.__typename + \":\" + result._id;\n        }\n    }\n    return null;\n}\nvar hasOwn$1 = Object.prototype.hasOwnProperty;\nvar OptimisticCacheLayer = (function (_super) {\n    __extends(OptimisticCacheLayer, _super);\n    function OptimisticCacheLayer(optimisticId, parent, transaction) {\n        var _this = _super.call(this, Object.create(null)) || this;\n        _this.optimisticId = optimisticId;\n        _this.parent = parent;\n        _this.transaction = transaction;\n        return _this;\n    }\n    OptimisticCacheLayer.prototype.toObject = function () {\n        return __assign({}, this.parent.toObject(), this.data);\n    };\n    OptimisticCacheLayer.prototype.get = function (dataId) {\n        return hasOwn$1.call(this.data, dataId)\n            ? this.data[dataId]\n            : this.parent.get(dataId);\n    };\n    return OptimisticCacheLayer;\n}(ObjectCache));\nvar InMemoryCache = (function (_super) {\n    __extends(InMemoryCache, _super);\n    function InMemoryCache(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this) || this;\n        _this.watches = new Set();\n        _this.typenameDocumentCache = new Map();\n        _this.cacheKeyRoot = new CacheKeyNode();\n        _this.silenceBroadcast = false;\n        _this.config = __assign({}, defaultConfig, config);\n        if (_this.config.customResolvers) {\n            process.env.NODE_ENV === \"production\" || invariant.warn('customResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating customResolvers in the next major version.');\n            _this.config.cacheRedirects = _this.config.customResolvers;\n        }\n        if (_this.config.cacheResolvers) {\n            process.env.NODE_ENV === \"production\" || invariant.warn('cacheResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating cacheResolvers in the next major version.');\n            _this.config.cacheRedirects = _this.config.cacheResolvers;\n        }\n        _this.addTypename = _this.config.addTypename;\n        _this.data = _this.config.resultCaching\n            ? new DepTrackingCache()\n            : new ObjectCache();\n        _this.optimisticData = _this.data;\n        _this.storeReader = new StoreReader(_this.cacheKeyRoot);\n        _this.storeWriter = new StoreWriter();\n        var cache = _this;\n        var maybeBroadcastWatch = cache.maybeBroadcastWatch;\n        _this.maybeBroadcastWatch = wrap$1(function (c) {\n            return maybeBroadcastWatch.call(_this, c);\n        }, {\n            makeCacheKey: function (c) {\n                if (c.optimistic) {\n                    return;\n                }\n                if (c.previousResult) {\n                    return;\n                }\n                if (cache.data instanceof DepTrackingCache) {\n                    return cache.cacheKeyRoot.lookup(c.query, JSON.stringify(c.variables));\n                }\n            }\n        });\n        return _this;\n    }\n    InMemoryCache.prototype.restore = function (data) {\n        if (data)\n            this.data.replace(data);\n        return this;\n    };\n    InMemoryCache.prototype.extract = function (optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return (optimistic ? this.optimisticData : this.data).toObject();\n    };\n    InMemoryCache.prototype.read = function (options) {\n        if (typeof options.rootId === 'string' &&\n            typeof this.data.get(options.rootId) === 'undefined') {\n            return null;\n        }\n        return this.storeReader.readQueryFromStore({\n            store: options.optimistic ? this.optimisticData : this.data,\n            query: this.transformDocument(options.query),\n            variables: options.variables,\n            rootId: options.rootId,\n            fragmentMatcherFunction: this.config.fragmentMatcher.match,\n            previousResult: options.previousResult,\n            config: this.config,\n        });\n    };\n    InMemoryCache.prototype.write = function (write) {\n        this.storeWriter.writeResultToStore({\n            dataId: write.dataId,\n            result: write.result,\n            variables: write.variables,\n            document: this.transformDocument(write.query),\n            store: this.data,\n            dataIdFromObject: this.config.dataIdFromObject,\n            fragmentMatcherFunction: this.config.fragmentMatcher.match,\n        });\n        this.broadcastWatches();\n    };\n    InMemoryCache.prototype.diff = function (query) {\n        return this.storeReader.diffQueryAgainstStore({\n            store: query.optimistic ? this.optimisticData : this.data,\n            query: this.transformDocument(query.query),\n            variables: query.variables,\n            returnPartialData: query.returnPartialData,\n            previousResult: query.previousResult,\n            fragmentMatcherFunction: this.config.fragmentMatcher.match,\n            config: this.config,\n        });\n    };\n    InMemoryCache.prototype.watch = function (watch) {\n        var _this = this;\n        this.watches.add(watch);\n        return function () {\n            _this.watches.delete(watch);\n        };\n    };\n    InMemoryCache.prototype.evict = function (query) {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"eviction is not implemented on InMemory Cache\");\n    };\n    InMemoryCache.prototype.reset = function () {\n        this.data.clear();\n        this.broadcastWatches();\n        return Promise.resolve();\n    };\n    InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n        var toReapply = [];\n        var removedCount = 0;\n        var layer = this.optimisticData;\n        while (layer instanceof OptimisticCacheLayer) {\n            if (layer.optimisticId === idToRemove) {\n                ++removedCount;\n            }\n            else {\n                toReapply.push(layer);\n            }\n            layer = layer.parent;\n        }\n        if (removedCount > 0) {\n            this.optimisticData = layer;\n            while (toReapply.length > 0) {\n                var layer_1 = toReapply.pop();\n                this.performTransaction(layer_1.transaction, layer_1.optimisticId);\n            }\n            this.broadcastWatches();\n        }\n    };\n    InMemoryCache.prototype.performTransaction = function (transaction, optimisticId) {\n        var _a = this, data = _a.data, silenceBroadcast = _a.silenceBroadcast;\n        this.silenceBroadcast = true;\n        if (typeof optimisticId === 'string') {\n            this.data = this.optimisticData = new OptimisticCacheLayer(optimisticId, this.optimisticData, transaction);\n        }\n        try {\n            transaction(this);\n        }\n        finally {\n            this.silenceBroadcast = silenceBroadcast;\n            this.data = data;\n        }\n        this.broadcastWatches();\n    };\n    InMemoryCache.prototype.recordOptimisticTransaction = function (transaction, id) {\n        return this.performTransaction(transaction, id);\n    };\n    InMemoryCache.prototype.transformDocument = function (document) {\n        if (this.addTypename) {\n            var result = this.typenameDocumentCache.get(document);\n            if (!result) {\n                result = addTypenameToDocument(document);\n                this.typenameDocumentCache.set(document, result);\n                this.typenameDocumentCache.set(result, result);\n            }\n            return result;\n        }\n        return document;\n    };\n    InMemoryCache.prototype.broadcastWatches = function () {\n        var _this = this;\n        if (!this.silenceBroadcast) {\n            this.watches.forEach(function (c) { return _this.maybeBroadcastWatch(c); });\n        }\n    };\n    InMemoryCache.prototype.maybeBroadcastWatch = function (c) {\n        c.callback(this.diff({\n            query: c.query,\n            variables: c.variables,\n            previousResult: c.previousResult && c.previousResult(),\n            optimistic: c.optimistic,\n        }));\n    };\n    return InMemoryCache;\n}(ApolloCache));\n\nexport { InMemoryCache, defaultDataIdFromObject, StoreReader, assertIdValue, WriteError, enhanceErrorWithDocument, StoreWriter, HeuristicFragmentMatcher, IntrospectionFragmentMatcher, ObjectCache, defaultNormalizedCacheFactory$1 as defaultNormalizedCacheFactory };\n//# sourceMappingURL=bundle.esm.js.map\n"],"sourceRoot":""}