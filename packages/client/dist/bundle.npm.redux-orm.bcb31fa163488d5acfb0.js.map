{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/redux-orm/es/constants.js","webpack:////var/www/html/utter/node_modules/redux-orm/es/utils.js","webpack:////var/www/html/utter/node_modules/redux-orm/es/QuerySet.js","webpack:////var/www/html/utter/node_modules/redux-orm/es/Session.js","webpack:////var/www/html/utter/node_modules/redux-orm/es/descriptors.js","webpack:////var/www/html/utter/node_modules/redux-orm/es/fields.js","webpack:////var/www/html/utter/node_modules/redux-orm/es/Model.js","webpack:////var/www/html/utter/node_modules/redux-orm/es/db/Table.js","webpack:////var/www/html/utter/node_modules/redux-orm/es/db/Database.js","webpack:////var/www/html/utter/node_modules/redux-orm/es/memoize.js","webpack:////var/www/html/utter/node_modules/redux-orm/es/redux.js","webpack:////var/www/html/utter/node_modules/redux-orm/es/ORM.js","webpack:////var/www/html/utter/node_modules/redux-orm/es/index.js"],"names":["UPDATE","DELETE","CREATE","FILTER","EXCLUDE","SUCCESS","warnDeprecated","msg","console","warn","bind","log","m2mName","declarationModelName","fieldName","string","charAt","toUpperCase","slice","m2mFromFieldName","m2mToFieldName","otherModelName","querySetDelegatorFactory","methodName","_getQuerySet","this","getQuerySet","apply","arguments","querySetGetterDelegatorFactory","getterName","attachQuerySetMethods","modelClass","querySetClass","leftToDefine","sharedMethods","subClass","func","currClass","Function","prototype","get_prototype_of_default","forEachSuperClass","cls","i","length","defined","descriptor","get_own_property_descriptor_default","get","define_property_default","value","splice","normalizeEntity","entity","getId","arrayDiffActions","sourceArr","targetArr","itemsInBoth","intersection_default","deleteItems","difference_default","addItems","delete","add","lib_default","a","getBatchToken","clauseFiltersByAttribute","_ref","attribute","type","payload","typeof_default","hasOwnProperty","attributeValue","undefined","QuerySet_QuerySet","QuerySet","clauses","opts","classCallCheck_default","assign_default","_opts","createClass_default","key","userOpts","constructor","_this","_evaluate","rows","map","id","withId","toString","join","ModelClass","props","Boolean","count","index","at","_new","lookupObj","normalizedLookupObj","mapValues_default","filterDescriptor","concat","excludeDescriptor","session","Error","modelName","_evaluated","_modelClass","querySpec","table","query","iteratees","orders","orderByDescriptor","mergeObj","_modelClass2","applyUpdate","action","_modelClass3","toModelArray","forEach","model","_onDelete","es_QuerySet","es_Session","Session","schema","db","state","withMutations","batchToken","getEmptyState","initialState","Object","lib","modelData","models","getModelClasses","sessionBoundModels","SessionBoundModel","construct_default","set_prototype_of_default","connect","modelIds","data","getDataForModel","accessedInstances","fullTableScanned","updateSpec","tx","_getTransaction","result","update","status","_markAccessedByQuery","includes","idAttribute","accessedIds","set_default","row","some","clause","markAccessed","markFullTableScanned","_this2","filter","reduce","_ref2","extends_default","defineProperty_default","_this3","_ref3","_ref4","forwardsManyToOneDescriptor","declaredToModelName","DeclaredToModel","getClass","toId","_fields","set","manyToManyDescriptor","declaredFromModelName","throughModelName","throughFields","reverse","_getClass4$session","DeclaredFromModel","ThroughModel","ThisModel","OtherModel","thisReferencingField","to","from","otherReferencingField","thisId","throughQs","referencedOtherIds","toRefArray","obj","qs","otherModelInstance","has","_len","entities","Array","_key","idsToAdd","existingQs","through","exists","existingIds","_ThroughModel$create","create","clear","remove","_len2","_key2","idsToRemove","entitiesToDelete","size","entitiesToDeleteIds","unexistingIds","toConsumableArray_default","includes_default","fields_DefaultFieldInstaller","_FieldInstallerTempla","DefaultFieldInstaller","possibleConstructorReturn_default","__proto__","inherits_default","field","createForwardsDescriptor","toModel","throughModel","virtualFields","createForwardsVirtualField","toModelName","backwardsFieldName","createBackwardsDescriptor","createBackwardsVirtualField","FieldInstallerTemplate","orm","references","installsForwardsDescriptor","installForwardsDescriptor","installsForwardsVirtualField","installForwardsVirtualField","installsBackwardsDescriptor","installBackwardsDescriptor","installsBackwardsVirtualField","installBackwardsVirtualField","_toModel","_throughModel","getThroughModelName","getBackwardsFieldName","fields_Field","Field","fields_Attribute","_Field","Attribute","call","getDefault","enumerable","configurable","attrDescriptor","fields_RelationalField","_Field2","RelationalField","args","relatedName","as","toLowerCase","_DefaultFieldInstalle","AliasedForwardsDescriptorInstaller","fields_ForeignKey","_RelationalField","ForeignKey","declaredFieldName","fields_ManyToMany","_RelationalField2","ManyToMany","getThroughFields","_throughFields","slicedToArray_default","fieldAName","fieldBName","fieldA","fields","throughModelFieldReferencing","otherModel","findKey_default","fields_OneToOne","_RelationalField3","OneToOne","forwardsOneToOneDescriptor","attr","fk","getByIdQuery","modelInstance","Model_Model","Model","_initFields","forOwn_default","fieldValue","keys_default","b","keysInA","propertyName","userMergeObj","m2mRelations","mergeKey","mergedFields","updatedModel","_refreshMany2Many","relationsEqual","every","name","fieldsEqual","equals","ref","relations","_this4","values","isArray","TypeError","normalizedNewIds","uniqueIds","uniq_default","fromField","toField","_field$throughFields2","_field$throughFields","diffActions","_name","_name2","idsToDelete","relatedQs","_findDatabaseRows","ids","_session","QuerySetClass","isSetUp","backend","options","userProps","_this5","declaredFieldNames","declaredVirtualFieldNames","valuePassed","instance","idExists","describe","es_Model","DEFAULT_OPTS","arrName","mapName","db_Table","Table","branch","accessId","getMeta","newMaxId","setMeta","accessList","sortBy_default","reducer","filter_default","reject_default","_payload","orderBy_default","mutable","setIn","batch","meta","entry","_ops$batch$merge2","workingState","_currMax","userPassedId","currMax","newMax","newId","hasId","_idSequencer","getMaxId","Math","max","_idSequencer2","setMaxId","finalEntry","push","created","merge","newMap","mapFunction","_ops$batch$merge3","arr","idx","indexOf","omit","Database_query","tables","tableName","Database_update","nextTableState","resultPayload","currTableState","insert","_table","_currTableState","nextDBState","newTableState","replaceTableState","Database","schemaSpec","tablesSpec","tableSpec","defaultEqualityCheck","argsAreEqual","lastArgs","nextArgs","equalityCheck","arg","rowsAreEqual","rowsA","rowsB","memoize_accessedModelInstancesAreEqual","previous","ormState","accessedModelInstances","every_default","previousRows","itemsById","fullTableScannedModelsAreEqual","fullTableScannedModels","rowIdsA","rowIdsB","memoize","argEqualityCheck","stateAndArgs","defaultUpdater","ORM_DEFAULTS","createDatabase","ORM_ORM","ORM","registry","implicitThroughModels","installedFields","invalidateClassCache","registerManyToManyModelsFor","thisModelName","fieldInstance","selfReferencing","fromFieldName","toFieldName","_Through$fields","Through","_Model","PlainForeignKey","_ForeignKey","ThroughForeignKeyField","ForeignKeyClass","found","find_default","_setupModelPrototypes","spec","_getTableOpts","generateSchemaSpec","getDatabase","_isFieldInstalled","_installField","_setFieldInstalled","FieldInstaller","installerClass","run","mutableSession","updater","createReducer","reselect_lib","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"bundle.npm.redux-orm.bcb31fa163488d5acfb0.js","sourcesContent":["export var UPDATE = 'REDUX_ORM_UPDATE';\nexport var DELETE = 'REDUX_ORM_DELETE';\nexport var CREATE = 'REDUX_ORM_CREATE';\n\nexport var FILTER = 'REDUX_ORM_FILTER';\nexport var EXCLUDE = 'REDUX_ORM_EXCLUDE';\nexport var ORDER_BY = 'REDUX_ORM_ORDER_BY';\n\nexport var SUCCESS = 'SUCCESS';\nexport var FAILURE = 'FAILURE';","import _typeof from 'babel-runtime/helpers/typeof';\nimport _Object$keys from 'babel-runtime/core-js/object/keys';\nimport _Object$defineProperty from 'babel-runtime/core-js/object/define-property';\nimport _Object$getOwnPropertyDescriptor from 'babel-runtime/core-js/object/get-own-property-descriptor';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport forOwn from 'lodash/forOwn';\nimport includes from 'lodash/includes';\nimport ops from 'immutable-ops';\nimport intersection from 'lodash/intersection';\nimport difference from 'lodash/difference';\nimport { FILTER, EXCLUDE } from './constants';\n\n/**\n * @module utils\n */\n\nfunction warnDeprecated(msg) {\n    var logger = typeof console.warn === 'function' ? console.warn.bind(console) : console.log.bind(console);\n    return logger(msg);\n}\n\nfunction capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Returns the branch name for a many-to-many relation.\n * The name is the combination of the model name and the field name the relation\n * was declared. The field name's first letter is capitalized.\n *\n * Example: model `Author` has a many-to-many relation to the model `Book`, defined\n * in the `Author` field `books`. The many-to-many branch name will be `AuthorBooks`.\n *\n * @param  {string} declarationModelName - the name of the model the many-to-many relation was declared on\n * @param  {string} fieldName            - the field name where the many-to-many relation was declared on\n * @return {string} The branch name for the many-to-many relation.\n */\nfunction m2mName(declarationModelName, fieldName) {\n    return declarationModelName + capitalize(fieldName);\n}\n\n/**\n * Returns the fieldname that saves a foreign key to the\n * model id where the many-to-many relation was declared.\n *\n * Example: `Author` => `fromAuthorId`\n *\n * @private\n * @param  {string} declarationModelName - the name of the model where the relation was declared\n * @return {string} the field name in the through model for `declarationModelName`'s foreign key.\n */\nfunction m2mFromFieldName(declarationModelName) {\n    return 'from' + declarationModelName + 'Id';\n}\n\n/**\n * Returns the fieldname that saves a foreign key in a many-to-many through model to the\n * model where the many-to-many relation was declared.\n *\n * Example: `Book` => `toBookId`\n *\n * @param  {string} otherModelName - the name of the model that was the target of the many-to-many\n *                                   declaration.\n * @return {string} the field name in the through model for `otherModelName`'s foreign key..\n */\nfunction m2mToFieldName(otherModelName) {\n    return 'to' + otherModelName + 'Id';\n}\n\nfunction reverseFieldName(modelName) {\n    return modelName.toLowerCase() + 'Set'; // eslint-disable-line prefer-template\n}\n\nfunction querySetDelegatorFactory(methodName) {\n    return function querySetDelegator() {\n        var _getQuerySet;\n\n        return (_getQuerySet = this.getQuerySet())[methodName].apply(_getQuerySet, arguments);\n    };\n}\n\nfunction querySetGetterDelegatorFactory(getterName) {\n    return function querySetGetterDelegator() {\n        var qs = this.getQuerySet();\n        return qs[getterName];\n    };\n}\n\nfunction forEachSuperClass(subClass, func) {\n    var currClass = subClass;\n    while (currClass !== Function.prototype) {\n        func(currClass);\n        currClass = _Object$getPrototypeOf(currClass);\n    }\n}\n\nfunction attachQuerySetMethods(modelClass, querySetClass) {\n    var leftToDefine = querySetClass.sharedMethods.slice();\n\n    // There is no way to get a property descriptor for the whole prototype chain;\n    // only from an objects own properties. Therefore we traverse the whole prototype\n    // chain for querySet.\n    forEachSuperClass(querySetClass, function (cls) {\n        for (var i = 0; i < leftToDefine.length; i++) {\n            var defined = false;\n            var methodName = leftToDefine[i];\n            var descriptor = _Object$getOwnPropertyDescriptor(cls.prototype, methodName);\n            if (typeof descriptor !== 'undefined') {\n                if (typeof descriptor.get !== 'undefined') {\n                    descriptor.get = querySetGetterDelegatorFactory(methodName);\n                    _Object$defineProperty(modelClass, methodName, descriptor);\n                    defined = true;\n                } else if (typeof descriptor.value === 'function') {\n                    modelClass[methodName] = querySetDelegatorFactory(methodName);\n                    defined = true;\n                }\n            }\n            if (defined) {\n                leftToDefine.splice(i--, 1);\n            }\n        }\n    });\n}\n\n/**\n * Normalizes `entity` to an id, where `entity` can be an id\n * or a Model instance.\n *\n * @param  {*} entity - either a Model instance or an id value\n * @return {*} the id value of `entity`\n */\nfunction normalizeEntity(entity) {\n    if (entity !== null && typeof entity !== 'undefined' && typeof entity.getId === 'function') {\n        return entity.getId();\n    }\n    return entity;\n}\n\nfunction reverseFieldErrorMessage(modelName, fieldName, toModelName, backwardsFieldName) {\n    return ['Reverse field ' + backwardsFieldName + ' already defined', ' on model ' + toModelName + '. To fix, set a custom related', ' name on ' + modelName + '.' + fieldName + '.'].join('');\n}\n\nfunction objectShallowEquals(a, b) {\n    var keysInA = 0;\n\n    // eslint-disable-next-line consistent-return\n    forOwn(a, function (value, key) {\n        if (!b.hasOwnProperty(key) || b[key] !== value) {\n            return false;\n        }\n        keysInA++;\n    });\n\n    return keysInA === _Object$keys(b).length;\n}\n\nfunction arrayDiffActions(sourceArr, targetArr) {\n    var itemsInBoth = intersection(sourceArr, targetArr);\n    var deleteItems = difference(sourceArr, itemsInBoth);\n    var addItems = difference(targetArr, itemsInBoth);\n\n    if (deleteItems.length || addItems.length) {\n        return {\n            delete: deleteItems,\n            add: addItems\n        };\n    }\n    return null;\n}\n\nvar getBatchToken = ops.getBatchToken;\n\n\nfunction clauseFiltersByAttribute(_ref, attribute) {\n    var type = _ref.type,\n        payload = _ref.payload;\n\n    if (type !== FILTER) return false;\n\n    if ((typeof payload === 'undefined' ? 'undefined' : _typeof(payload)) !== 'object') {\n        /**\n         * payload could also be a function in which case\n         * we would have no way of knowing what it does,\n         * so we default to false for non-objects\n         */\n        return false;\n    }\n\n    if (!payload.hasOwnProperty(attribute)) return false;\n    var attributeValue = payload[attribute];\n    if (attributeValue === null) return false;\n    if (attributeValue === undefined) return false;\n\n    return true;\n}\n\nfunction clauseReducesResultSetSize(_ref2) {\n    var type = _ref2.type;\n\n    return [FILTER, EXCLUDE].includes(type);\n}\n\nexport { attachQuerySetMethods, m2mName, m2mFromFieldName, m2mToFieldName, reverseFieldName, normalizeEntity, reverseFieldErrorMessage, objectShallowEquals, ops, includes, arrayDiffActions, getBatchToken, clauseFiltersByAttribute, clauseReducesResultSetSize, warnDeprecated };","import _typeof from 'babel-runtime/helpers/typeof';\nimport _Object$assign from 'babel-runtime/core-js/object/assign';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport mapValues from 'lodash/mapValues';\nimport { normalizeEntity, warnDeprecated } from './utils';\n\nimport { UPDATE, DELETE, FILTER, EXCLUDE, ORDER_BY } from './constants';\n\n/**\n * This class is used to build and make queries to the database\n * and operating the resulting set (such as updating attributes\n * or deleting the records).\n *\n * The queries are built lazily. For example:\n *\n * ```javascript\n * const qs = Book.all()\n *     .filter(book => book.releaseYear > 1999)\n *     .orderBy('name');\n * ```\n *\n * Doesn't execute a query. The query is executed only when\n * you need information from the query result, such as {@link QuerySet#count},\n * {@link QuerySet#toRefArray}. After the query is executed, the resulting\n * set is cached in the QuerySet instance.\n *\n * QuerySet instances also return copies, so chaining filters doesn't\n * mutate the previous instances.\n */\nvar QuerySet = function () {\n    /**\n     * Creates a QuerySet. The constructor is mainly for internal use;\n     * You should access QuerySet instances from {@link Model}.\n     *\n     * @param  {Model} modelClass - the model class of objects in this QuerySet.\n     * @param  {any[]} clauses - query clauses needed to evaluate the set.\n     * @param {Object} [opts] - additional options\n     */\n    function QuerySet(modelClass, clauses, opts) {\n        _classCallCheck(this, QuerySet);\n\n        _Object$assign(this, {\n            modelClass: modelClass,\n            clauses: clauses || []\n        });\n\n        this._opts = opts;\n    }\n\n    _createClass(QuerySet, [{\n        key: '_new',\n        value: function _new(clauses, userOpts) {\n            var opts = _Object$assign({}, this._opts, userOpts);\n            return new this.constructor(this.modelClass, clauses, opts);\n        }\n    }, {\n        key: 'toString',\n        value: function toString() {\n            var _this = this;\n\n            this._evaluate();\n            var contents = this.rows.map(function (_ref) {\n                var id = _ref.id;\n                return _this.modelClass.withId(id).toString();\n            }).join('\\n    - ');\n            return 'QuerySet contents:\\n    - ' + contents;\n        }\n\n        /**\n         * Returns an array of the plain objects represented by the QuerySet.\n         * The plain objects are direct references to the store.\n         *\n         * @return {Object[]} references to the plain JS objects represented by\n         *                    the QuerySet\n         */\n\n    }, {\n        key: 'toRefArray',\n        value: function toRefArray() {\n            return this._evaluate();\n        }\n\n        /**\n         * Returns an array of {@link Model} instances represented by the QuerySet.\n         * @return {Model[]} model instances represented by the QuerySet\n         */\n\n    }, {\n        key: 'toModelArray',\n        value: function toModelArray() {\n            var ModelClass = this.modelClass;\n\n            return this._evaluate().map(function (props) {\n                return new ModelClass(props);\n            });\n        }\n\n        /**\n         * Returns the number of {@link Model} instances represented by the QuerySet.\n         *\n         * @return {number} length of the QuerySet\n         */\n\n    }, {\n        key: 'count',\n        value: function count() {\n            this._evaluate();\n            return this.rows.length;\n        }\n\n        /**\n         * Checks if the {@link QuerySet} instance has any records matching the query\n         * in the database.\n         *\n         * @return {Boolean} `true` if the {@link QuerySet} instance contains entities, else `false`.\n         */\n\n    }, {\n        key: 'exists',\n        value: function exists() {\n            return Boolean(this.count());\n        }\n\n        /**\n         * Returns the {@link Model} instance at index `index` in the {@link QuerySet} instance if\n         * `withRefs` flag is set to `false`, or a reference to the plain JavaScript\n         * object in the model state if `true`.\n         *\n         * @param  {number} index - index of the model instance to get\n         * @return {Model|undefined} a {@link Model} instance at index\n         *                           `index` in the {@link QuerySet} instance,\n         *                           or undefined if the index is out of bounds.\n         */\n\n    }, {\n        key: 'at',\n        value: function at(index) {\n            var ModelClass = this.modelClass;\n\n\n            var rows = this._evaluate();\n            if (index >= 0 && index < rows.length) {\n                return new ModelClass(rows[index]);\n            }\n\n            return undefined;\n        }\n\n        /**\n         * Returns the {@link Model} instance at index 0 in the {@link QuerySet} instance.\n         * @return {Model}\n         */\n\n    }, {\n        key: 'first',\n        value: function first() {\n            return this.at(0);\n        }\n\n        /**\n         * Returns the {@link Model} instance at index `QuerySet.count() - 1`\n         * @return {Model}\n         */\n\n    }, {\n        key: 'last',\n        value: function last() {\n            var rows = this._evaluate();\n            return this.at(rows.length - 1);\n        }\n\n        /**\n         * Returns a new {@link QuerySet} instance with the same entities.\n         * @return {QuerySet} a new QuerySet with the same entities.\n         */\n\n    }, {\n        key: 'all',\n        value: function all() {\n            return this._new(this.clauses);\n        }\n\n        /**\n         * Returns a new {@link QuerySet} instance with entities that match properties in `lookupObj`.\n         *\n         * @param  {Object} lookupObj - the properties to match objects with. Can also be a function.\n         * @return {QuerySet} a new {@link QuerySet} instance with objects that passed the filter.\n         */\n\n    }, {\n        key: 'filter',\n        value: function filter(lookupObj) {\n            /**\n             * allow foreign keys to be specified as model instances,\n             * transform model instances to their primary keys\n             */\n            var normalizedLookupObj = (typeof lookupObj === 'undefined' ? 'undefined' : _typeof(lookupObj)) === 'object' ? mapValues(lookupObj, normalizeEntity) : lookupObj;\n\n            var filterDescriptor = {\n                type: FILTER,\n                payload: normalizedLookupObj\n            };\n            /**\n             * create a new QuerySet\n             * including only rows matching the lookupObj\n             */\n            return this._new(this.clauses.concat(filterDescriptor));\n        }\n\n        /**\n         * Returns a new {@link QuerySet} instance with entities that do not match\n         * properties in `lookupObj`.\n         *\n         * @param  {Object} lookupObj - the properties to unmatch objects with. Can also be a function.\n         * @return {QuerySet} a new {@link QuerySet} instance with objects that did not pass the filter.\n         */\n\n    }, {\n        key: 'exclude',\n        value: function exclude(lookupObj) {\n            /**\n             * allow foreign keys to be specified as model instances,\n             * transform model instances to their primary keys\n             */\n            var normalizedLookupObj = (typeof lookupObj === 'undefined' ? 'undefined' : _typeof(lookupObj)) === 'object' ? mapValues(lookupObj, normalizeEntity) : lookupObj;\n            var excludeDescriptor = {\n                type: EXCLUDE,\n                payload: normalizedLookupObj\n            };\n\n            /**\n             * create a new QuerySet\n             * excluding all rows matching the lookupObj\n             */\n            return this._new(this.clauses.concat(excludeDescriptor));\n        }\n\n        /**\n         * Performs the actual database query.\n         * @private\n         * @return {Array} rows corresponding to the QuerySet's clauses\n         */\n\n    }, {\n        key: '_evaluate',\n        value: function _evaluate() {\n            if (typeof this.modelClass.session === 'undefined') {\n                throw new Error(['Tried to query the ' + this.modelClass.modelName + ' model\\'s table without a session. ', 'Create a session using `session = orm.session()` and use ', '`session[\"' + this.modelClass.modelName + '\"]` for querying instead.'].join(''));\n            }\n            if (!this._evaluated) {\n                var _modelClass = this.modelClass,\n                    session = _modelClass.session,\n                    table = _modelClass.modelName;\n\n                var querySpec = {\n                    table: table,\n                    clauses: this.clauses\n                };\n                this.rows = session.query(querySpec).rows;\n                this._evaluated = true;\n            }\n            return this.rows;\n        }\n\n        /**\n         * Returns a new {@link QuerySet} instance with entities ordered by `iteratees` in ascending\n         * order, unless otherwise specified. Delegates to `lodash.orderBy`.\n         *\n         * @param  {string[]|Function[]} iteratees - an array where each item can be a string or a\n         *                                           function. If a string is supplied, it should\n         *                                           correspond to property on the entity that will\n         *                                           determine the order. If a function is supplied,\n         *                                           it should return the value to order by.\n         * @param {Boolean[]} [orders] - the sort orders of `iteratees`. If unspecified, all iteratees\n         *                               will be sorted in ascending order. `true` and `'asc'`\n         *                               correspond to ascending order, and `false` and `'desc`\n         *                               to descending order.\n         * @return {QuerySet} a new {@link QuerySet} with objects ordered by `iteratees`.\n         */\n\n    }, {\n        key: 'orderBy',\n        value: function orderBy(iteratees, orders) {\n            var orderByDescriptor = {\n                type: ORDER_BY,\n                payload: [iteratees, orders]\n            };\n\n            /**\n             * create a new QuerySet\n             * sorting all rows according to the passed arguments\n             */\n            return this._new(this.clauses.concat(orderByDescriptor));\n        }\n\n        /**\n         * Records an update specified with `mergeObj` to all the objects\n         * in the {@link QuerySet} instance.\n         *\n         * @param  {Object} mergeObj - an object to merge with all the objects in this\n         *                             queryset.\n         * @return {undefined}\n         */\n\n    }, {\n        key: 'update',\n        value: function update(mergeObj) {\n            var _modelClass2 = this.modelClass,\n                session = _modelClass2.session,\n                table = _modelClass2.modelName;\n\n\n            session.applyUpdate({\n                action: UPDATE,\n                query: {\n                    table: table,\n                    clauses: this.clauses\n                },\n                payload: mergeObj\n            });\n\n            this._evaluated = false;\n        }\n\n        /**\n         * Records a deletion of all the objects in this {@link QuerySet} instance.\n         * @return {undefined}\n         */\n\n    }, {\n        key: 'delete',\n        value: function _delete() {\n            var _modelClass3 = this.modelClass,\n                session = _modelClass3.session,\n                table = _modelClass3.modelName;\n\n\n            this.toModelArray().forEach(function (model) {\n                return model._onDelete();\n            } // eslint-disable-line no-underscore-dangle\n            );\n\n            session.applyUpdate({\n                action: DELETE,\n                query: {\n                    table: table,\n                    clauses: this.clauses\n                }\n            });\n\n            this._evaluated = false;\n        }\n\n        // DEPRECATED AND REMOVED METHODS\n\n        /**\n         * @deprecated\n         * Use {@link QuerySet#toModelArray} or predicate functions that\n         * instantiate Models from refs, e.g. `new Model(ref)`.\n         */\n\n    }, {\n        key: 'map',\n\n\n        /**\n         * @deprecated\n         * Call {@link QuerySet#toModelArray} or {@link QuerySet#toRefArray} first to map.\n         */\n        value: function map() {\n            throw new Error('`QuerySet.prototype.map` has been removed. ' + 'Call `.toModelArray()` or `.toRefArray()` first to map.');\n        }\n\n        /**\n         * @deprecated\n         * Call {@link QuerySet#toModelArray} or {@link QuerySet#toRefArray} first to iterate.\n         */\n\n    }, {\n        key: 'forEach',\n        value: function forEach() {\n            throw new Error('`QuerySet.prototype.forEach` has been removed. ' + 'Call `.toModelArray()` or `.toRefArray()` first to iterate.');\n        }\n    }, {\n        key: 'withModels',\n        get: function get() {\n            throw new Error('`QuerySet.prototype.withModels` has been removed. ' + 'Use `.toModelArray()` or predicate functions that ' + 'instantiate Models from refs, e.g. `new Model(ref)`.');\n        }\n\n        /**\n         * @deprecated Query building operates on refs only now.\n         */\n\n    }, {\n        key: 'withRefs',\n        get: function get() {\n            warnDeprecated('`QuerySet.prototype.withRefs` has been deprecated. ' + 'Query building operates on refs only now.');\n            return undefined;\n        }\n    }], [{\n        key: 'addSharedMethod',\n        value: function addSharedMethod(methodName) {\n            this.sharedMethods = this.sharedMethods.concat(methodName);\n        }\n    }]);\n\n    return QuerySet;\n}();\n\nQuerySet.sharedMethods = ['count', 'at', 'all', 'last', 'first', 'filter', 'exclude', 'orderBy', 'update', 'delete'];\n\nexport default QuerySet;","import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _Set from 'babel-runtime/core-js/set';\nimport _Object$defineProperty from 'babel-runtime/core-js/object/define-property';\nimport _Reflect$setPrototypeOf from 'babel-runtime/core-js/reflect/set-prototype-of';\nimport _Reflect$construct from 'babel-runtime/core-js/reflect/construct';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport { getBatchToken } from 'immutable-ops';\n\nimport { SUCCESS, UPDATE, DELETE } from './constants';\nimport { warnDeprecated, clauseFiltersByAttribute } from './utils';\n\nvar Session = function () {\n    /**\n     * Creates a new Session.\n     *\n     * @param  {Database} db - a {@link Database} instance\n     * @param  {Object} state - the database state\n     * @param  {Boolean} [withMutations] - whether the session should mutate data\n     * @param  {Object} [batchToken] - used by the backend to identify objects that can be\n     *                                 mutated.\n     */\n    function Session(schema, db, state, withMutations, batchToken) {\n        var _this = this;\n\n        _classCallCheck(this, Session);\n\n        this.schema = schema;\n        this.db = db;\n        this.state = state || db.getEmptyState();\n        this.initialState = this.state;\n\n        this.withMutations = !!withMutations;\n        this.batchToken = batchToken || getBatchToken();\n\n        this.modelData = {};\n\n        this.models = schema.getModelClasses();\n\n        this.sessionBoundModels = this.models.map(function (modelClass) {\n            function SessionBoundModel() {\n                return _Reflect$construct(modelClass, arguments, SessionBoundModel); // eslint-disable-line prefer-rest-params\n            }\n            _Reflect$setPrototypeOf(SessionBoundModel.prototype, modelClass.prototype);\n            _Reflect$setPrototypeOf(SessionBoundModel, modelClass);\n\n            _Object$defineProperty(_this, modelClass.modelName, {\n                get: function get() {\n                    return SessionBoundModel;\n                }\n            });\n\n            SessionBoundModel.connect(_this);\n            return SessionBoundModel;\n        });\n    }\n\n    _createClass(Session, [{\n        key: 'getDataForModel',\n        value: function getDataForModel(modelName) {\n            if (!this.modelData[modelName]) {\n                this.modelData[modelName] = {};\n            }\n            return this.modelData[modelName];\n        }\n    }, {\n        key: 'markAccessed',\n        value: function markAccessed(modelName, modelIds) {\n            var data = this.getDataForModel(modelName);\n            if (!data.accessedInstances) {\n                data.accessedInstances = {};\n            }\n            modelIds.forEach(function (id) {\n                data.accessedInstances[id] = true;\n            });\n        }\n    }, {\n        key: 'markFullTableScanned',\n        value: function markFullTableScanned(modelName) {\n            var data = this.getDataForModel(modelName);\n            data.fullTableScanned = true;\n        }\n    }, {\n        key: 'applyUpdate',\n\n\n        /**\n         * Applies update to a model state.\n         *\n         * @private\n         * @param {Object} update - the update object. Must have keys\n         *                          `type`, `payload`.\n         */\n        value: function applyUpdate(updateSpec) {\n            var tx = this._getTransaction(updateSpec);\n            var result = this.db.update(updateSpec, tx, this.state);\n            var status = result.status,\n                state = result.state,\n                payload = result.payload;\n\n\n            if (status !== SUCCESS) {\n                throw new Error('Applying update failed with status ' + status + '. Payload: ' + payload);\n            }\n\n            this.state = state;\n\n            return payload;\n        }\n    }, {\n        key: 'query',\n        value: function query(querySpec) {\n            var result = this.db.query(querySpec, this.state);\n\n            this._markAccessedByQuery(querySpec, result);\n\n            return result;\n        }\n    }, {\n        key: '_getTransaction',\n        value: function _getTransaction(updateSpec) {\n            var withMutations = this.withMutations;\n            var action = updateSpec.action;\n            var batchToken = this.batchToken;\n\n            if ([UPDATE, DELETE].includes(action)) {\n                batchToken = getBatchToken();\n            }\n            return { batchToken: batchToken, withMutations: withMutations };\n        }\n    }, {\n        key: '_markAccessedByQuery',\n        value: function _markAccessedByQuery(querySpec, result) {\n            var table = querySpec.table,\n                clauses = querySpec.clauses;\n            var rows = result.rows;\n            var idAttribute = this[table].idAttribute;\n\n            var accessedIds = new _Set(rows.map(function (row) {\n                return row[idAttribute];\n            }));\n\n            var anyClauseFilteredById = clauses.some(function (clause) {\n                if (!clauseFiltersByAttribute(clause, idAttribute)) {\n                    return false;\n                }\n                /**\n                 * we previously knew which row we wanted to access,\n                 * so there was no need to scan the entire table\n                 */\n                var id = clause.payload[idAttribute];\n                accessedIds.add(id);\n                return true;\n            });\n\n            if (anyClauseFilteredById) {\n                /**\n                 * clauses have been ordered so that an indexed one was\n                 * the first to be evaluated, and thus only the row\n                 * with the specified id has actually been accessed\n                 */\n                this.markAccessed(table, accessedIds);\n            } else {\n                /**\n                 * any other clause would have caused a full table scan,\n                 * even if we specified an empty clauses array\n                 */\n                this.markFullTableScanned(table);\n            }\n        }\n\n        // DEPRECATED AND REMOVED METHODS\n\n        /**\n         * @deprecated Access {@link Session#state} instead.\n         */\n\n    }, {\n        key: 'getNextState',\n        value: function getNextState() {\n            warnDeprecated('`Session.prototype.getNextState` has been deprecated. Access ' + 'the `Session.prototype.state` property instead.');\n            return this.state;\n        }\n\n        /**\n         * @deprecated\n         * The Redux integration API is now decoupled from ORM and Session.<br>\n         * See the 0.9 migration guide in the GitHub repo.\n         */\n\n    }, {\n        key: 'reduce',\n        value: function reduce() {\n            throw new Error('`Session.prototype.reduce` has been removed. The Redux integration API ' + 'is now decoupled from ORM and Session - see the 0.9 migration guide ' + 'in the GitHub repo.');\n        }\n    }, {\n        key: 'accessedModelInstances',\n        get: function get() {\n            var _this2 = this;\n\n            return this.sessionBoundModels.filter(function (_ref) {\n                var modelName = _ref.modelName;\n                return !!_this2.getDataForModel(modelName).accessedInstances;\n            }).reduce(function (result, _ref2) {\n                var modelName = _ref2.modelName;\n                return _extends({}, result, _defineProperty({}, modelName, _this2.getDataForModel(modelName).accessedInstances));\n            }, {});\n        }\n    }, {\n        key: 'fullTableScannedModels',\n        get: function get() {\n            var _this3 = this;\n\n            return this.sessionBoundModels.filter(function (_ref3) {\n                var modelName = _ref3.modelName;\n                return !!_this3.getDataForModel(modelName).fullTableScanned;\n            }).map(function (_ref4) {\n                var modelName = _ref4.modelName;\n                return modelName;\n            });\n        }\n    }]);\n\n    return Session;\n}();\n\nexport default Session;","import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _Set from 'babel-runtime/core-js/set';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport { normalizeEntity, includes } from './utils';\n\n/**\n * The functions in this file return custom JS property descriptors\n * that are supposed to be assigned to Model fields.\n *\n * Some include the logic to look up models using foreign keys and\n * to add or remove relationships between models.\n *\n * @module descriptors\n */\n\n/**\n * Defines a basic non-key attribute.\n * @param  {string} fieldName - the name of the field the descriptor will be assigned to.\n */\nfunction attrDescriptor(fieldName) {\n    return {\n        get: function get() {\n            return this._fields[fieldName];\n        },\n        set: function set(value) {\n            return this.set(fieldName, value);\n        },\n\n\n        enumerable: true,\n        configurable: true\n    };\n}\n\n/**\n * Forwards direction of a Foreign Key: returns one object.\n * Also works as {@link .forwardsOneToOneDescriptor|forwardsOneToOneDescriptor}.\n *\n * For `book.author` referencing an `Author` model instance,\n * `fieldName` would be `'author'` and `declaredToModelName` would be `'Author'`.\n * @param  {string} fieldName - the name of the field the descriptor will be assigned to.\n * @param  {string} declaredToModelName - the name of the model that the field references.\n */\nfunction forwardsManyToOneDescriptor(fieldName, declaredToModelName) {\n    return {\n        get: function get() {\n            var _getClass = this.getClass(),\n                DeclaredToModel = _getClass.session[declaredToModelName];\n\n            var toId = this._fields[fieldName];\n\n\n            return DeclaredToModel.withId(toId);\n        },\n        set: function set(value) {\n            this.update(_defineProperty({}, fieldName, normalizeEntity(value)));\n        }\n    };\n}\n\n/**\n * Dereferencing foreign keys in {@link module:fields.oneToOne|oneToOne}\n * relationships works the same way as in many-to-one relationships:\n * just look up the related model.\n *\n * For example, a human face tends to have a single nose.\n * So if we want to resolve `face.nose`, we need to\n * look up the `Nose` that has the primary key that `face` references.\n *\n * @see {@link module:descriptors~forwardsManyToOneDescriptor|forwardsManyToOneDescriptor}\n */\nfunction forwardsOneToOneDescriptor() {\n    return forwardsManyToOneDescriptor.apply(undefined, arguments);\n}\n\n/**\n * Here we resolve 1-to-1 relationships starting at the model on which the\n * field was not installed. This means we need to find the instance of the\n * other model whose {@link module:fields.oneToOne|oneToOne} FK field contains the current model's primary key.\n *\n * @param  {string} declaredFieldName - the name of the field referencing the current model.\n * @param  {string} declaredFromModelName - the name of the other model.\n */\nfunction backwardsOneToOneDescriptor(declaredFieldName, declaredFromModelName) {\n    return {\n        get: function get() {\n            var _getClass2 = this.getClass(),\n                DeclaredFromModel = _getClass2.session[declaredFromModelName];\n\n            return DeclaredFromModel.get(_defineProperty({}, declaredFieldName, this.getId()));\n        },\n        set: function set() {\n            throw new Error('Can\\'t mutate a reverse one-to-one relation.');\n        }\n    };\n}\n\n/**\n * The backwards direction of a n-to-1 relationship (i.e. 1-to-n),\n * meaning this will return an a collection (`QuerySet`) of model instances.\n *\n * An example would be `author.books` referencing all instances of\n * the `Book` model that reference the author using `fk()`.\n */\nfunction backwardsManyToOneDescriptor(declaredFieldName, declaredFromModelName) {\n    return {\n        get: function get() {\n            var _getClass3 = this.getClass(),\n                DeclaredFromModel = _getClass3.session[declaredFromModelName];\n\n            return DeclaredFromModel.filter(_defineProperty({}, declaredFieldName, this.getId()));\n        },\n        set: function set() {\n            throw new Error('Can\\'t mutate a reverse many-to-one relation.');\n        }\n    };\n}\n\n/**\n * This descriptor is assigned to both sides of a many-to-many relationship.\n * To indicate the backwards direction pass `true` for `reverse`.\n */\nfunction manyToManyDescriptor(declaredFromModelName, declaredToModelName, throughModelName, throughFields, reverse) {\n    return {\n        get: function get() {\n            var _getClass4 = this.getClass(),\n                _getClass4$session = _getClass4.session,\n                DeclaredFromModel = _getClass4$session[declaredFromModelName],\n                DeclaredToModel = _getClass4$session[declaredToModelName],\n                ThroughModel = _getClass4$session[throughModelName];\n\n            var ThisModel = reverse ? DeclaredToModel : DeclaredFromModel;\n            var OtherModel = reverse ? DeclaredFromModel : DeclaredToModel;\n\n            var thisReferencingField = reverse ? throughFields.to : throughFields.from;\n            var otherReferencingField = reverse ? throughFields.from : throughFields.to;\n\n            var thisId = this.getId();\n\n            var throughQs = ThroughModel.filter(_defineProperty({}, thisReferencingField, thisId));\n\n            /**\n             * all IDs of instances of the other model that are\n             * referenced by any instance of the current model\n             */\n            var referencedOtherIds = new _Set(throughQs.toRefArray().map(function (obj) {\n                return obj[otherReferencingField];\n            }));\n\n            /**\n             * selects all instances of other model that are referenced\n             * by any instance of the current model\n             */\n            var qs = OtherModel.filter(function (otherModelInstance) {\n                return referencedOtherIds.has(otherModelInstance[OtherModel.idAttribute]);\n            });\n\n            /**\n             * Allows adding OtherModel instances to be referenced by the current instance.\n             *\n             * E.g. Book.first().authors.add(1, 2) would add the authors with IDs 1 and 2\n             * to the first book's list of referenced authors.\n             *\n             * @return undefined\n             */\n            qs.add = function add() {\n                for (var _len = arguments.length, entities = Array(_len), _key = 0; _key < _len; _key++) {\n                    entities[_key] = arguments[_key];\n                }\n\n                var idsToAdd = new _Set(entities.map(normalizeEntity));\n\n                var existingQs = throughQs.filter(function (through) {\n                    return idsToAdd.has(through[otherReferencingField]);\n                });\n\n                if (existingQs.exists()) {\n                    var existingIds = existingQs.toRefArray().map(function (through) {\n                        return through[otherReferencingField];\n                    });\n\n                    throw new Error('Tried to add already existing ' + OtherModel.modelName + ' id(s) ' + existingIds + ' to the ' + ThisModel.modelName + ' instance with id ' + thisId);\n                }\n\n                idsToAdd.forEach(function (id) {\n                    var _ThroughModel$create;\n\n                    return ThroughModel.create((_ThroughModel$create = {}, _defineProperty(_ThroughModel$create, otherReferencingField, id), _defineProperty(_ThroughModel$create, thisReferencingField, thisId), _ThroughModel$create));\n                });\n            };\n\n            /**\n             * Removes references to all OtherModel instances from the current model.\n             *\n             * E.g. Book.first().authors.clear() would cause the first book's list\n             * of referenced authors to become empty.\n             *\n             * @return undefined\n             */\n            qs.clear = function clear() {\n                throughQs.delete();\n            };\n\n            /**\n             * Removes references to all passed OtherModel instances from the current model.\n             *\n             * E.g. Book.first().authors.remove(1, 2) would cause the authors with\n             * IDs 1 and 2 to no longer be referenced by the first book.\n             *\n             * @return undefined\n             */\n            qs.remove = function remove() {\n                for (var _len2 = arguments.length, entities = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                    entities[_key2] = arguments[_key2];\n                }\n\n                var idsToRemove = new _Set(entities.map(normalizeEntity));\n\n                var entitiesToDelete = throughQs.filter(function (through) {\n                    return idsToRemove.has(through[otherReferencingField]);\n                });\n\n                if (entitiesToDelete.count() !== idsToRemove.size) {\n                    // Tried deleting non-existing entities.\n                    var entitiesToDeleteIds = entitiesToDelete.toRefArray().map(function (through) {\n                        return through[otherReferencingField];\n                    });\n\n                    var unexistingIds = [].concat(_toConsumableArray(idsToRemove)).filter(function (id) {\n                        return !includes(entitiesToDeleteIds, id);\n                    });\n\n                    throw new Error('Tried to delete non-existing ' + OtherModel.modelName + ' id(s) ' + unexistingIds + ' from the ' + ThisModel.modelName + ' instance with id ' + thisId);\n                }\n\n                entitiesToDelete.delete();\n            };\n\n            return qs;\n        },\n        set: function set() {\n            throw new Error('Tried setting a M2M field. Please use the related QuerySet methods add, remove and clear.');\n        }\n    };\n}\n\nexport { attrDescriptor, forwardsManyToOneDescriptor, forwardsOneToOneDescriptor, backwardsOneToOneDescriptor, backwardsManyToOneDescriptor, manyToManyDescriptor };","import _slicedToArray from 'babel-runtime/helpers/slicedToArray';\nimport _typeof from 'babel-runtime/helpers/typeof';\nimport _Object$getOwnPropertyDescriptor from 'babel-runtime/core-js/object/get-own-property-descriptor';\nimport _Object$defineProperty from 'babel-runtime/core-js/object/define-property';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport findKey from 'lodash/findKey';\n\nimport { attrDescriptor, forwardsManyToOneDescriptor, backwardsManyToOneDescriptor, forwardsOneToOneDescriptor, backwardsOneToOneDescriptor, manyToManyDescriptor } from './descriptors';\n\nimport { m2mName, m2mToFieldName, m2mFromFieldName, reverseFieldName, reverseFieldErrorMessage } from './utils';\n\n/**\n * Contains the logic for how fields on {@link Model}s work\n * and which descriptors must be installed.\n *\n * If your goal is to define fields on a Model class,\n * please use the more convenient methods {@link attr},\n * {@link fk}, {@link many} and {@link oneToOne}.\n *\n * @module fields\n */\n\n/**\n * Defines algorithm for installing a field onto a model and related models.\n * Conforms to the template method behavioral design pattern.\n * @private\n */\n\nvar FieldInstallerTemplate = function () {\n    function FieldInstallerTemplate(opts) {\n        _classCallCheck(this, FieldInstallerTemplate);\n\n        this.field = opts.field;\n        this.fieldName = opts.fieldName;\n        this.model = opts.model;\n        this.orm = opts.orm;\n        /**\n         * the field itself has no knowledge of the model\n         * it is being installed upon; we need to inform it\n         * that it is a self-referencing field for the field\n         * to be able to make better informed decisions\n         */\n        if (this.field.references(this.model)) {\n            this.field.toModelName = 'this';\n        }\n    }\n\n    _createClass(FieldInstallerTemplate, [{\n        key: 'run',\n        value: function run() {\n            if (this.field.installsForwardsDescriptor) {\n                this.installForwardsDescriptor();\n            }\n            if (this.field.installsForwardsVirtualField) {\n                this.installForwardsVirtualField();\n            }\n            /**\n             * Install a backwards field on a model as a consequence\n             * of having installed the forwards field on another model.\n             */\n            if (this.field.installsBackwardsDescriptor) {\n                this.installBackwardsDescriptor();\n            }\n            if (this.field.installsBackwardsVirtualField) {\n                this.installBackwardsVirtualField();\n            }\n        }\n    }, {\n        key: 'toModel',\n        get: function get() {\n            if (typeof this._toModel === 'undefined') {\n                var toModelName = this.field.toModelName;\n\n                if (!toModelName) {\n                    this._toModel = null;\n                } else if (toModelName === 'this') {\n                    this._toModel = this.model;\n                } else {\n                    this._toModel = this.orm.get(toModelName);\n                }\n            }\n            return this._toModel;\n        }\n    }, {\n        key: 'throughModel',\n        get: function get() {\n            if (typeof this._throughModel === 'undefined') {\n                var throughModelName = this.field.getThroughModelName(this.fieldName, this.model);\n                if (!throughModelName) {\n                    this._throughModel = null;\n                } else {\n                    this._throughModel = this.orm.get(throughModelName);\n                }\n            }\n            return this._throughModel;\n        }\n    }, {\n        key: 'backwardsFieldName',\n        get: function get() {\n            return this.field.getBackwardsFieldName(this.model);\n        }\n    }]);\n\n    return FieldInstallerTemplate;\n}();\n\n/**\n * Default implementation for the template method in FieldInstallerTemplate.\n * @private\n */\n\n\nvar DefaultFieldInstaller = function (_FieldInstallerTempla) {\n    _inherits(DefaultFieldInstaller, _FieldInstallerTempla);\n\n    function DefaultFieldInstaller() {\n        _classCallCheck(this, DefaultFieldInstaller);\n\n        return _possibleConstructorReturn(this, (DefaultFieldInstaller.__proto__ || _Object$getPrototypeOf(DefaultFieldInstaller)).apply(this, arguments));\n    }\n\n    _createClass(DefaultFieldInstaller, [{\n        key: 'installForwardsDescriptor',\n        value: function installForwardsDescriptor() {\n            _Object$defineProperty(this.model.prototype, this.fieldName, this.field.createForwardsDescriptor(this.fieldName, this.model, this.toModel, this.throughModel));\n        }\n    }, {\n        key: 'installForwardsVirtualField',\n        value: function installForwardsVirtualField() {\n            this.model.virtualFields[this.fieldName] = this.field.createForwardsVirtualField(this.fieldName, this.model, this.toModel, this.throughModel);\n        }\n    }, {\n        key: 'installBackwardsDescriptor',\n        value: function installBackwardsDescriptor() {\n            var backwardsDescriptor = _Object$getOwnPropertyDescriptor(this.toModel.prototype, this.backwardsFieldName);\n            if (backwardsDescriptor) {\n                throw new Error(reverseFieldErrorMessage(this.model.modelName, this.fieldName, this.toModel.modelName, this.backwardsFieldName));\n            }\n\n            // install backwards descriptor\n            _Object$defineProperty(this.toModel.prototype, this.backwardsFieldName, this.field.createBackwardsDescriptor(this.fieldName, this.model, this.toModel, this.throughModel));\n        }\n    }, {\n        key: 'installBackwardsVirtualField',\n        value: function installBackwardsVirtualField() {\n            this.toModel.virtualFields[this.backwardsFieldName] = this.field.createBackwardsVirtualField(this.fieldName, this.model, this.toModel, this.throughModel);\n        }\n    }]);\n\n    return DefaultFieldInstaller;\n}(FieldInstallerTemplate);\n\n/**\n * @ignore\n */\n\n\nvar Field = function () {\n    function Field() {\n        _classCallCheck(this, Field);\n    }\n\n    _createClass(Field, [{\n        key: 'getClass',\n        value: function getClass() {\n            return this.constructor;\n        }\n    }, {\n        key: 'references',\n        value: function references(model) {\n            return false;\n        }\n    }, {\n        key: 'getThroughModelName',\n        value: function getThroughModelName(fieldName, model) {\n            return null;\n        }\n    }, {\n        key: 'installerClass',\n        get: function get() {\n            return DefaultFieldInstaller;\n        }\n    }, {\n        key: 'installsForwardsDescriptor',\n        get: function get() {\n            return true;\n        }\n    }, {\n        key: 'installsForwardsVirtualField',\n        get: function get() {\n            return false;\n        }\n    }, {\n        key: 'installsBackwardsDescriptor',\n        get: function get() {\n            return false;\n        }\n    }, {\n        key: 'installsBackwardsVirtualField',\n        get: function get() {\n            return false;\n        }\n    }]);\n\n    return Field;\n}();\n\n/**\n * @ignore\n */\n\n\nexport var Attribute = function (_Field) {\n    _inherits(Attribute, _Field);\n\n    function Attribute(opts) {\n        _classCallCheck(this, Attribute);\n\n        var _this2 = _possibleConstructorReturn(this, (Attribute.__proto__ || _Object$getPrototypeOf(Attribute)).call(this, opts));\n\n        _this2.opts = opts || {};\n\n        if (_this2.opts.hasOwnProperty('getDefault')) {\n            _this2.getDefault = _this2.opts.getDefault;\n        }\n        return _this2;\n    }\n\n    _createClass(Attribute, [{\n        key: 'createForwardsDescriptor',\n        value: function createForwardsDescriptor(fieldName, model) {\n            return attrDescriptor(fieldName);\n        }\n    }]);\n\n    return Attribute;\n}(Field);\n\n/**\n * @ignore\n */\n\nvar RelationalField = function (_Field2) {\n    _inherits(RelationalField, _Field2);\n\n    function RelationalField() {\n        var _ref;\n\n        _classCallCheck(this, RelationalField);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        var _this3 = _possibleConstructorReturn(this, (_ref = RelationalField.__proto__ || _Object$getPrototypeOf(RelationalField)).call.apply(_ref, [this].concat(args)));\n\n        if (args.length === 1 && _typeof(args[0]) === 'object') {\n            var opts = args[0];\n            _this3.toModelName = opts.to;\n            _this3.relatedName = opts.relatedName;\n            _this3.through = opts.through;\n            _this3.throughFields = opts.throughFields;\n            _this3.as = opts.as;\n        } else {\n            _this3.toModelName = args[0];\n            _this3.relatedName = args[1];\n        }\n        return _this3;\n    }\n\n    _createClass(RelationalField, [{\n        key: 'getBackwardsFieldName',\n        value: function getBackwardsFieldName(model) {\n            return this.relatedName || reverseFieldName(model.modelName);\n        }\n    }, {\n        key: 'createBackwardsVirtualField',\n        value: function createBackwardsVirtualField(fieldName, model, toModel, throughModel) {\n            var ThisField = this.getClass();\n            return new ThisField(model.modelName, fieldName);\n        }\n    }, {\n        key: 'references',\n        value: function references(model) {\n            return this.toModelName === model.modelName;\n        }\n    }, {\n        key: 'installsBackwardsVirtualField',\n        get: function get() {\n            return true;\n        }\n    }, {\n        key: 'installsBackwardsDescriptor',\n        get: function get() {\n            return true;\n        }\n    }, {\n        key: 'installerClass',\n        get: function get() {\n            return function (_DefaultFieldInstalle) {\n                _inherits(AliasedForwardsDescriptorInstaller, _DefaultFieldInstalle);\n\n                function AliasedForwardsDescriptorInstaller() {\n                    _classCallCheck(this, AliasedForwardsDescriptorInstaller);\n\n                    return _possibleConstructorReturn(this, (AliasedForwardsDescriptorInstaller.__proto__ || _Object$getPrototypeOf(AliasedForwardsDescriptorInstaller)).apply(this, arguments));\n                }\n\n                _createClass(AliasedForwardsDescriptorInstaller, [{\n                    key: 'installForwardsDescriptor',\n                    value: function installForwardsDescriptor() {\n                        _Object$defineProperty(this.model.prototype, this.field.as || this.fieldName, // use supplied name if possible\n                        this.field.createForwardsDescriptor(this.fieldName, this.model, this.toModel, this.throughModel));\n                    }\n                }]);\n\n                return AliasedForwardsDescriptorInstaller;\n            }(DefaultFieldInstaller);\n        }\n    }]);\n\n    return RelationalField;\n}(Field);\n\n/**\n * @ignore\n */\n\n\nexport var ForeignKey = function (_RelationalField) {\n    _inherits(ForeignKey, _RelationalField);\n\n    function ForeignKey() {\n        _classCallCheck(this, ForeignKey);\n\n        return _possibleConstructorReturn(this, (ForeignKey.__proto__ || _Object$getPrototypeOf(ForeignKey)).apply(this, arguments));\n    }\n\n    _createClass(ForeignKey, [{\n        key: 'createForwardsDescriptor',\n        value: function createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n            return forwardsManyToOneDescriptor(fieldName, toModel.modelName);\n        }\n    }, {\n        key: 'createBackwardsDescriptor',\n        value: function createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n            return backwardsManyToOneDescriptor(fieldName, model.modelName);\n        }\n    }]);\n\n    return ForeignKey;\n}(RelationalField);\n\n/**\n * @ignore\n */\nexport var ManyToMany = function (_RelationalField2) {\n    _inherits(ManyToMany, _RelationalField2);\n\n    function ManyToMany() {\n        _classCallCheck(this, ManyToMany);\n\n        return _possibleConstructorReturn(this, (ManyToMany.__proto__ || _Object$getPrototypeOf(ManyToMany)).apply(this, arguments));\n    }\n\n    _createClass(ManyToMany, [{\n        key: 'getDefault',\n        value: function getDefault() {\n            return [];\n        }\n    }, {\n        key: 'getThroughModelName',\n        value: function getThroughModelName(fieldName, model) {\n            return this.through || m2mName(model.modelName, fieldName);\n        }\n    }, {\n        key: 'createForwardsDescriptor',\n        value: function createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n            return manyToManyDescriptor(model.modelName, toModel.modelName, throughModel.modelName, this.getThroughFields(fieldName, model, toModel, throughModel), false);\n        }\n    }, {\n        key: 'createBackwardsDescriptor',\n        value: function createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n            return manyToManyDescriptor(model.modelName, toModel.modelName, throughModel.modelName, this.getThroughFields(fieldName, model, toModel, throughModel), true);\n        }\n    }, {\n        key: 'createBackwardsVirtualField',\n        value: function createBackwardsVirtualField(fieldName, model, toModel, throughModel) {\n            var ThisField = this.getClass();\n            return new ThisField({\n                to: model.modelName,\n                relatedName: fieldName,\n                through: throughModel.modelName,\n                throughFields: this.getThroughFields(fieldName, model, toModel, throughModel)\n            });\n        }\n    }, {\n        key: 'createForwardsVirtualField',\n        value: function createForwardsVirtualField(fieldName, model, toModel, throughModel) {\n            var ThisField = this.getClass();\n            return new ThisField({\n                to: toModel.modelName,\n                relatedName: fieldName,\n                through: this.through,\n                throughFields: this.getThroughFields(fieldName, model, toModel, throughModel)\n            });\n        }\n    }, {\n        key: 'getThroughFields',\n        value: function getThroughFields(fieldName, model, toModel, throughModel) {\n            if (this.throughFields) {\n                var _throughFields = _slicedToArray(this.throughFields, 2),\n                    fieldAName = _throughFields[0],\n                    fieldBName = _throughFields[1];\n\n                var fieldA = throughModel.fields[fieldAName];\n                return {\n                    to: fieldA.references(toModel) ? fieldAName : fieldBName,\n                    from: fieldA.references(toModel) ? fieldBName : fieldAName\n                };\n            }\n\n            if (model.modelName === toModel.modelName) {\n                /**\n                 * we have no way of determining the relationship's\n                 * direction here, so we need to assume that the user\n                 * did not use a custom through model\n                 * see ORM#registerManyToManyModelsFor\n                 */\n                return {\n                    to: m2mToFieldName(toModel.modelName),\n                    from: m2mFromFieldName(model.modelName)\n                };\n            }\n\n            /**\n             * determine which field references which model\n             * and infer the directions from that\n             */\n            var throughModelFieldReferencing = function throughModelFieldReferencing(otherModel) {\n                return findKey(throughModel.fields, function (field) {\n                    return field.references(otherModel);\n                });\n            };\n\n            return {\n                to: throughModelFieldReferencing(toModel),\n                from: throughModelFieldReferencing(model)\n            };\n        }\n    }, {\n        key: 'installsForwardsVirtualField',\n        get: function get() {\n            return true;\n        }\n    }]);\n\n    return ManyToMany;\n}(RelationalField);\n\n/**\n * @ignore\n */\nexport var OneToOne = function (_RelationalField3) {\n    _inherits(OneToOne, _RelationalField3);\n\n    function OneToOne() {\n        _classCallCheck(this, OneToOne);\n\n        return _possibleConstructorReturn(this, (OneToOne.__proto__ || _Object$getPrototypeOf(OneToOne)).apply(this, arguments));\n    }\n\n    _createClass(OneToOne, [{\n        key: 'getBackwardsFieldName',\n        value: function getBackwardsFieldName(model) {\n            return this.relatedName || model.modelName.toLowerCase();\n        }\n    }, {\n        key: 'createForwardsDescriptor',\n        value: function createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n            return forwardsOneToOneDescriptor(fieldName, toModel.modelName);\n        }\n    }, {\n        key: 'createBackwardsDescriptor',\n        value: function createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n            return backwardsOneToOneDescriptor(fieldName, model.modelName);\n        }\n    }]);\n\n    return OneToOne;\n}(RelationalField);\n\n/**\n * Defines a value attribute on the model.\n * Though not required, it is recommended to define this for each non-foreign key you wish to use.\n * Getters and setters need to be defined on each Model\n * instantiation for undeclared data fields, which is slower.\n * You can use the optional `getDefault` parameter to fill in unpassed values\n * to {@link Model.create}, such as for generating ID's with UUID:\n *\n * ```javascript\n * import getUUID from 'your-uuid-package-of-choice';\n *\n * fields = {\n *   id: attr({ getDefault: () => getUUID() }),\n *   title: attr(),\n * }\n * ```\n *\n * @global\n *\n * @param  {Object} [opts]\n * @param {Function} [opts.getDefault] - if you give a function here, it's return\n *                                       value from calling with zero arguments will\n *                                       be used as the value when creating a new Model\n *                                       instance with {@link Model#create} if the field\n *                                       value is not passed.\n * @return {Attribute}\n */\nexport function attr(opts) {\n    return new Attribute(opts);\n}\n\n/**\n * Defines a foreign key on a model, which points\n * to a single entity on another model.\n *\n * You can pass arguments as either a single object,\n * or two arguments.\n *\n * If you pass two arguments, the first one is the name\n * of the Model the foreign key is pointing to, and\n * the second one is an optional related name, which will\n * be used to access the Model the foreign key\n * is being defined from, from the target Model.\n *\n * If the related name is not passed, it will be set as\n * `${toModelName}Set`.\n *\n * If you pass an object to `fk`, it has to be in the form\n *\n * ```javascript\n * fields = {\n *   author: fk({ to: 'Author', relatedName: 'books' })\n * }\n * ```\n *\n * Which is equal to\n *\n * ```javascript\n * fields = {\n *   author: fk('Author', 'books'),\n * }\n * ```\n *\n * @global\n *\n * @param  {string|Object} toModelNameOrObj - the `modelName` property of\n *                                            the Model that is the target of the\n *                                            foreign key, or an object with properties\n *                                            `to` and optionally `relatedName`.\n * @param {string} [relatedName] - if you didn't pass an object as the first argument,\n *                                 this is the property name that will be used to\n *                                 access a QuerySet the foreign key is defined from,\n *                                 from the target model.\n * @return {ForeignKey}\n */\nexport function fk() {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n    }\n\n    return new (Function.prototype.bind.apply(ForeignKey, [null].concat(args)))();\n}\n\n/**\n * Defines a many-to-many relationship between\n * this (source) and another (target) model.\n *\n * The relationship is modeled with an extra model called the through model.\n * The through model has foreign keys to both the source and target models.\n *\n * You can define your own through model if you want to associate more information\n * to the relationship. A custom through model must have at least two foreign keys,\n * one pointing to the source Model, and one pointing to the target Model.\n *\n * If you have more than one foreign key pointing to a source or target Model in the\n * through Model, you must pass the option `throughFields`, which is an array of two\n * strings, where the strings are the field names that identify the foreign keys to\n * be used for the many-to-many relationship. Redux-ORM will figure out which field name\n * points to which model by checking the through Model definition.\n *\n * Unlike `fk`, this function accepts only an object argument.\n *\n * ```javascript\n * class Authorship extends Model {}\n * Authorship.modelName = 'Authorship';\n * Authorship.fields = {\n *   author: fk('Author', 'authorships'),\n *   book: fk('Book', 'authorships'),\n * };\n *\n * class Author extends Model {}\n * Author.modelName = 'Author';\n * Author.fields = {\n *   books: many({\n *     to: 'Book',\n *     relatedName: 'authors',\n *     through: 'Authorship',\n *\n *     // this is optional, since Redux-ORM can figure\n *     // out the through fields itself as there aren't\n *     // multiple foreign keys pointing to the same models.\n *     throughFields: ['author', 'book'],\n *   })\n * };\n *\n * class Book extends Model {}\n * Book.modelName = 'Book';\n * ```\n *\n * You should only define the many-to-many relationship on one side. In the\n * above case of Authors to Books through Authorships, the relationship is\n * defined only on the Author model.\n *\n * @global\n *\n * @param  {Object} options - options\n * @param  {string} options.to - the `modelName` attribute of the target Model.\n * @param  {string} [options.through] - the `modelName` attribute of the through Model which\n *                                    must declare at least one foreign key to both source and\n *                                    target Models. If not supplied, Redux-Orm will autogenerate\n *                                    one.\n * @param  {string[]} [options.throughFields] - this must be supplied only when a custom through\n *                                            Model has more than one foreign key pointing to\n *                                            either the source or target mode. In this case\n *                                            Redux-ORM can't figure out the correct fields for\n *                                            you, you must provide them. The supplied array should\n *                                            have two elements that are the field names for the\n *                                            through fields you want to declare the many-to-many\n *                                            relationship with. The order doesn't matter;\n *                                            Redux-ORM will figure out which field points to\n *                                            the source Model and which to the target Model.\n * @param  {string} [options.relatedName] - the attribute used to access a QuerySet\n *                                          of source Models from target Model.\n * @return {ManyToMany}\n */\nexport function many() {\n    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n    }\n\n    return new (Function.prototype.bind.apply(ManyToMany, [null].concat(args)))();\n}\n\n/**\n * Defines a one-to-one relationship. In database terms, this is a foreign key with the\n * added restriction that only one entity can point to single target entity.\n *\n * The arguments are the same as with `fk`. If `relatedName` is not supplied,\n * the source model name in lowercase will be used. Note that with the one-to-one\n * relationship, the `relatedName` should be in singular, not plural.\n *\n * @global\n *\n * @param  {string|Object} toModelNameOrObj - the `modelName` property of\n *                                            the Model that is the target of the\n *                                            foreign key, or an object with properties\n *                                            `to` and optionally `relatedName`.\n * @param {string} [relatedName] - if you didn't pass an object as the first argument,\n *                                 this is the property name that will be used to\n *                                 access a Model the foreign key is defined from,\n *                                 from the target Model.\n * @return {OneToOne}\n */\nexport function oneToOne() {\n    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n    }\n\n    return new (Function.prototype.bind.apply(OneToOne, [null].concat(args)))();\n}","import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _Object$keys from 'babel-runtime/core-js/object/keys';\nimport _Object$defineProperty from 'babel-runtime/core-js/object/define-property';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport forOwn from 'lodash/forOwn';\nimport uniq from 'lodash/uniq';\n\nimport Session from './Session';\nimport QuerySet from './QuerySet';\nimport { ManyToMany, ForeignKey, OneToOne, attr } from './fields';\nimport { CREATE, UPDATE, DELETE, FILTER } from './constants';\nimport { normalizeEntity, arrayDiffActions, objectShallowEquals, warnDeprecated, m2mName } from './utils';\n\n/**\n * Generates a query specification to get the instance's\n * corresponding table row using its primary key.\n *\n * @private\n * @returns {Object}\n */\nfunction getByIdQuery(modelInstance) {\n    var modelClass = modelInstance.getClass();\n    var idAttribute = modelClass.idAttribute,\n        modelName = modelClass.modelName;\n\n\n    return {\n        table: modelName,\n        clauses: [{\n            type: FILTER,\n            payload: _defineProperty({}, idAttribute, modelInstance.getId())\n        }]\n    };\n}\n\n/**\n * The heart of an ORM, the data model.\n *\n * The fields you specify to the Model will be used to generate\n * a schema to the database, related property accessors, and\n * possibly through models.\n *\n * In each {@link Session} you instantiate from an {@link ORM} instance,\n * you will receive a session-specific subclass of this Model. The methods\n * you define here will be available to you in sessions.\n *\n * An instance of {@link Model} represents a record in the database, though\n * it is possible to generate multiple instances from the same record in the database.\n *\n * To create data models in your schema, subclass {@link Model}. To define\n * information about the data model, override static class methods. Define instance\n * logic by defining prototype methods (without `static` keyword).\n */\nvar Model = function () {\n    /**\n     * Creates a Model instance from it's properties.\n     * Don't use this to create a new record; Use the static method {@link Model#create}.\n     * @param  {Object} props - the properties to instantiate with\n     */\n    function Model(props) {\n        _classCallCheck(this, Model);\n\n        this._initFields(props);\n    }\n\n    _createClass(Model, [{\n        key: '_initFields',\n        value: function _initFields(props) {\n            var _this = this;\n\n            this._fields = _extends({}, props);\n\n            forOwn(props, function (fieldValue, fieldName) {\n                // In this case, we got a prop that wasn't defined as a field.\n                // Assuming it's an arbitrary data field, making an instance-specific\n                // descriptor for it.\n                // Using the in operator as the property could be defined anywhere\n                // on the prototype chain.\n                if (!(fieldName in _this)) {\n                    _Object$defineProperty(_this, fieldName, {\n                        get: function get() {\n                            return _this._fields[fieldName];\n                        },\n                        set: function set(value) {\n                            return _this.set(fieldName, value);\n                        },\n                        configurable: true,\n                        enumerable: true\n                    });\n                }\n            });\n        }\n    }, {\n        key: 'getClass',\n\n\n        /**\n         * Gets the {@link Model} class or subclass constructor (the class that\n         * instantiated this instance).\n         *\n         * @return {Model} The {@link Model} class or subclass constructor used to instantiate\n         *                 this instance.\n         */\n        value: function getClass() {\n            return this.constructor;\n        }\n\n        /**\n         * Gets the id value of the current instance by looking up the id attribute.\n         * @return {*} The id value of the current instance.\n         */\n\n    }, {\n        key: 'getId',\n        value: function getId() {\n            return this._fields[this.getClass().idAttribute];\n        }\n\n        /**\n         * Returns a reference to the plain JS object in the store.\n         * Make sure to not mutate this.\n         *\n         * @return {Object} a reference to the plain JS object in the store\n         */\n\n    }, {\n        key: 'toString',\n\n\n        /**\n         * Returns a string representation of the {@link Model} instance.\n         *\n         * @return {string} A string representation of this {@link Model} instance.\n         */\n        value: function toString() {\n            var _this2 = this;\n\n            var ThisModel = this.getClass();\n            var className = ThisModel.modelName;\n            var fieldNames = _Object$keys(ThisModel.fields);\n            var fields = fieldNames.map(function (fieldName) {\n                var field = ThisModel.fields[fieldName];\n                if (field instanceof ManyToMany) {\n                    var ids = _this2[fieldName].toModelArray().map(function (model) {\n                        return model.getId();\n                    });\n                    return fieldName + ': [' + ids.join(', ') + ']';\n                }\n                var val = _this2._fields[fieldName];\n                return fieldName + ': ' + val;\n            }).join(', ');\n            return className + ': {' + fields + '}';\n        }\n\n        /**\n         * Returns a boolean indicating if `otherModel` equals this {@link Model} instance.\n         * Equality is determined by shallow comparing their attributes.\n         *\n         * This equality is used when you call {@link Model#update}.\n         * You can prevent model updates by returning `true` here.\n         * However, a model will always be updated if its relationships are changed.\n         *\n         * @param  {Model} otherModel - a {@link Model} instance to compare\n         * @return {Boolean} a boolean indicating if the {@link Model} instance's are equal.\n         */\n\n    }, {\n        key: 'equals',\n        value: function equals(otherModel) {\n            // eslint-disable-next-line no-underscore-dangle\n            return objectShallowEquals(this._fields, otherModel._fields);\n        }\n\n        /**\n         * Updates a property name to given value for this {@link Model} instance.\n         * The values are immediately committed to the database.\n         *\n         * @param {string} propertyName - name of the property to set\n         * @param {*} value - value assigned to the property\n         * @return {undefined}\n         */\n\n    }, {\n        key: 'set',\n        value: function set(propertyName, value) {\n            this.update(_defineProperty({}, propertyName, value));\n        }\n\n        /**\n         * Assigns multiple fields and corresponding values to this {@link Model} instance.\n         * The updates are immediately committed to the database.\n         *\n         * @param  {Object} userMergeObj - an object that will be merged with this instance.\n         * @return {undefined}\n         */\n\n    }, {\n        key: 'update',\n        value: function update(userMergeObj) {\n            var _this3 = this;\n\n            var ThisModel = this.getClass();\n            if (typeof ThisModel.session === 'undefined') {\n                throw new Error(['Tried to update a ' + ThisModel.modelName + ' model instance without a session. ', 'You cannot call `.update` on an instance that you did not receive from the database.'].join(''));\n            }\n\n            var mergeObj = _extends({}, userMergeObj);\n\n            var fields = ThisModel.fields,\n                virtualFields = ThisModel.virtualFields;\n\n\n            var m2mRelations = {};\n\n            // If an array of entities or id's is supplied for a\n            // many-to-many related field, clear the old relations\n            // and add the new ones.\n            for (var mergeKey in mergeObj) {\n                // eslint-disable-line no-restricted-syntax, guard-for-in\n                var isRealField = fields.hasOwnProperty(mergeKey);\n\n                if (isRealField) {\n                    var field = fields[mergeKey];\n\n                    if (field instanceof ForeignKey || field instanceof OneToOne) {\n                        // update one-one/fk relations\n                        mergeObj[mergeKey] = normalizeEntity(mergeObj[mergeKey]);\n                    } else if (field instanceof ManyToMany) {\n                        // field is forward relation\n                        m2mRelations[mergeKey] = mergeObj[mergeKey];\n                        delete mergeObj[mergeKey];\n                    }\n                } else if (virtualFields.hasOwnProperty(mergeKey)) {\n                    var _field = virtualFields[mergeKey];\n                    if (_field instanceof ManyToMany) {\n                        // field is backward relation\n                        m2mRelations[mergeKey] = mergeObj[mergeKey];\n                        delete mergeObj[mergeKey];\n                    }\n                }\n            }\n\n            var mergedFields = _extends({}, this._fields, mergeObj);\n\n            var updatedModel = new ThisModel(this._fields);\n            updatedModel._initFields(mergedFields); // eslint-disable-line no-underscore-dangle\n\n            // determine if model would have different related models after update\n            updatedModel._refreshMany2Many(m2mRelations); // eslint-disable-line no-underscore-dangle\n            var relationsEqual = _Object$keys(m2mRelations).every(function (name) {\n                return !arrayDiffActions(_this3[name], updatedModel[name]);\n            });\n            var fieldsEqual = this.equals(updatedModel);\n\n            // only update fields if they have changed (referentially)\n            if (!fieldsEqual) {\n                this._initFields(mergedFields);\n            }\n\n            // only update many-to-many relationships if any reference has changed\n            if (!relationsEqual) {\n                this._refreshMany2Many(m2mRelations);\n            }\n\n            // only apply the update if a field or relationship has changed\n            if (!fieldsEqual || !relationsEqual) {\n                ThisModel.session.applyUpdate({\n                    action: UPDATE,\n                    query: getByIdQuery(this),\n                    payload: mergeObj\n                });\n            }\n        }\n\n        /**\n         * Updates {@link Model} instance attributes to reflect the\n         * database state in the current session.\n         * @return {undefined}\n         */\n\n    }, {\n        key: 'refreshFromState',\n        value: function refreshFromState() {\n            this._initFields(this.ref);\n        }\n\n        /**\n         * Deletes the record for this {@link Model} instance.\n         * You'll still be able to access fields and values on the instance.\n         *\n         * @return {undefined}\n         */\n\n    }, {\n        key: 'delete',\n        value: function _delete() {\n            var ThisModel = this.getClass();\n            if (typeof ThisModel.session === 'undefined') {\n                throw new Error(['Tried to delete a ' + ThisModel.modelName + ' model instance without a session. ', 'You cannot call `.delete` on an instance that you did not receive from the database.'].join(''));\n            }\n\n            this._onDelete();\n            ThisModel.session.applyUpdate({\n                action: DELETE,\n                query: getByIdQuery(this)\n            });\n        }\n\n        /**\n         * Update many-many relations for model.\n         * @param relations\n         * @return undefined\n         * @private\n         */\n\n    }, {\n        key: '_refreshMany2Many',\n        value: function _refreshMany2Many(relations) {\n            var _this4 = this;\n\n            var ThisModel = this.getClass();\n            var fields = ThisModel.fields,\n                virtualFields = ThisModel.virtualFields,\n                modelName = ThisModel.modelName;\n\n\n            _Object$keys(relations).forEach(function (name) {\n                var reverse = !fields.hasOwnProperty(name);\n                var field = virtualFields[name];\n                var values = relations[name];\n\n                if (!Array.isArray(values)) {\n                    throw new TypeError('Failed to resolve many-to-many relationship: ' + modelName + '[' + name + '] must be an array (passed: ' + values + ')');\n                }\n\n                var normalizedNewIds = values.map(normalizeEntity);\n                var uniqueIds = uniq(normalizedNewIds);\n\n                if (normalizedNewIds.length !== uniqueIds.length) {\n                    throw new Error('Found duplicate id(s) when passing \"' + normalizedNewIds + '\" to ' + ThisModel.modelName + '.' + name + ' value');\n                }\n\n                var throughModelName = field.through || m2mName(ThisModel.modelName, name);\n                var ThroughModel = ThisModel.session[throughModelName];\n\n                var fromField = void 0;\n                var toField = void 0;\n\n                if (!reverse) {\n                    var _field$throughFields = field.throughFields;\n                    fromField = _field$throughFields.from;\n                    toField = _field$throughFields.to;\n                } else {\n                    var _field$throughFields2 = field.throughFields;\n                    toField = _field$throughFields2.from;\n                    fromField = _field$throughFields2.to;\n                }\n\n                var currentIds = ThroughModel.filter(function (through) {\n                    return through[fromField] === _this4[ThisModel.idAttribute];\n                }).toRefArray().map(function (ref) {\n                    return ref[toField];\n                });\n\n                var diffActions = arrayDiffActions(currentIds, normalizedNewIds);\n\n                if (diffActions) {\n                    var idsToDelete = diffActions.delete,\n                        idsToAdd = diffActions.add;\n\n                    if (idsToDelete.length > 0) {\n                        var _name;\n\n                        (_name = _this4[name]).remove.apply(_name, _toConsumableArray(idsToDelete));\n                    }\n                    if (idsToAdd.length > 0) {\n                        var _name2;\n\n                        (_name2 = _this4[name]).add.apply(_name2, _toConsumableArray(idsToAdd));\n                    }\n                }\n            });\n        }\n\n        /**\n         * @return {undefined}\n         * @private\n         */\n\n    }, {\n        key: '_onDelete',\n        value: function _onDelete() {\n            var _getClass = this.getClass(),\n                virtualFields = _getClass.virtualFields;\n\n            for (var key in virtualFields) {\n                // eslint-disable-line\n                var field = virtualFields[key];\n                if (field instanceof ManyToMany) {\n                    // Delete any many-to-many rows the entity is included in.\n                    this[key].clear();\n                } else if (field instanceof ForeignKey) {\n                    var relatedQs = this[key];\n                    if (relatedQs.exists()) {\n                        relatedQs.update(_defineProperty({}, field.relatedName, null));\n                    }\n                } else if (field instanceof OneToOne) {\n                    // Set null to any foreign keys or one to ones pointed to\n                    // this instance.\n                    if (this[key] !== null) {\n                        this[key][field.relatedName] = null;\n                    }\n                }\n            }\n        }\n\n        // DEPRECATED AND REMOVED METHODS\n\n        /**\n         * Returns a boolean indicating if an entity\n         * with the id `id` exists in the state.\n         *\n         * @param  {*}  id - a value corresponding to the id attribute of the {@link Model} class.\n         * @return {Boolean} a boolean indicating if entity with `id` exists in the state\n         * @deprecated Please use {@link Model.idExists} instead.\n         */\n\n    }, {\n        key: 'getNextState',\n\n\n        /**\n         * @deprecated See the 0.9 migration guide on the GitHub repo.\n         * @throws {Error} Due to deprecation.\n         */\n        value: function getNextState() {\n            throw new Error('`Model.prototype.getNextState` has been removed. See the 0.9 ' + 'migration guide on the GitHub repo.');\n        }\n    }, {\n        key: 'ref',\n        get: function get() {\n            var ThisModel = this.getClass();\n\n            // eslint-disable-next-line no-underscore-dangle\n            return ThisModel._findDatabaseRows(_defineProperty({}, ThisModel.idAttribute, this.getId()))[0];\n        }\n\n        /**\n         * Finds all rows in this model's table that match the given `lookupObj`.\n         * If no `lookupObj` is passed, all rows in the model's table will be returned.\n         *\n         * @param  {*}  props - a key-value that {@link Model} instances should have to be considered as existing.\n         * @return {Boolean} a boolean indicating if entity with `props` exists in the state\n         * @private\n         */\n\n    }], [{\n        key: 'toString',\n        value: function toString() {\n            return 'ModelClass: ' + this.modelName;\n        }\n\n        /**\n         * Returns the options object passed to the database for the table that represents\n         * this Model class.\n         *\n         * Returns an empty object by default, which means the database\n         * will use default options. You can either override this function to return the options\n         * you want to use, or assign the options object as a static property of the same name to the\n         * Model class.\n         *\n         * @return {Object} the options object passed to the database for the table\n         *                  representing this Model class.\n         */\n\n    }, {\n        key: 'options',\n        value: function options() {\n            return {};\n        }\n\n        /**\n         * @return {undefined}\n         */\n\n    }, {\n        key: 'markAccessed',\n        value: function markAccessed(ids) {\n            if (typeof this._session === 'undefined') {\n                throw new Error(['Tried to mark rows of the ' + this.modelName + ' model as accessed without a session. ', 'Create a session using `session = orm.session()` and call ', '`session[\"' + this.modelName + '\"].markAccessed` instead.'].join(''));\n            }\n            this.session.markAccessed(this.modelName, ids);\n        }\n\n        /**\n         * @return {undefined}\n         */\n\n    }, {\n        key: 'markFullTableScanned',\n        value: function markFullTableScanned() {\n            if (typeof this._session === 'undefined') {\n                throw new Error(['Tried to mark the ' + this.modelName + ' model as full table scanned without a session. ', 'Create a session using `session = orm.session()` and call ', '`session[\"' + this.modelName + '\"].markFullTableScanned` instead.'].join(''));\n            }\n            this.session.markFullTableScanned(this.modelName);\n        }\n\n        /**\n         * Returns the id attribute of this {@link Model}.\n         *\n         * @return {string} The id attribute of this {@link Model}.\n         */\n\n    }, {\n        key: 'connect',\n\n\n        /**\n         * Connect the model class to a {@link Session}.\n         *\n         * @private\n         * @param  {Session} session - The session to connect to.\n         */\n        value: function connect(session) {\n            if (!(session instanceof Session)) {\n                throw new Error('A model can only be connected to instances of Session.');\n            }\n            this._session = session;\n        }\n\n        /**\n         * Get the current {@link Session} instance.\n         *\n         * @private\n         * @return {Session} The current {@link Session} instance.\n         */\n\n    }, {\n        key: 'getQuerySet',\n\n\n        /**\n         * Returns an instance of the model's `querySetClass` field.\n         * By default, this will be an empty {@link QuerySet}.\n         *\n         * @return {Object} An instance of the model's `querySetClass`.\n         */\n        value: function getQuerySet() {\n            var QuerySetClass = this.querySetClass;\n\n            return new QuerySetClass(this);\n        }\n\n        /**\n         * @return {undefined}\n         */\n\n    }, {\n        key: 'invalidateClassCache',\n        value: function invalidateClassCache() {\n            this.isSetUp = undefined;\n            this.virtualFields = {};\n        }\n\n        /**\n         * @see {@link Model.getQuerySet}\n         */\n\n    }, {\n        key: '_getTableOpts',\n\n\n        /**\n         * @private\n         */\n        value: function _getTableOpts() {\n            if (typeof this.backend === 'function') {\n                warnDeprecated('`Model.backend` has been deprecated. Please rename to `.options`.');\n                return this.backend();\n            } else if (this.backend) {\n                warnDeprecated('`Model.backend` has been deprecated. Please rename to `.options`.');\n                return this.backend;\n            } else if (typeof this.options === 'function') {\n                return this.options();\n            }\n            return this.options;\n        }\n\n        /**\n         * Creates a new record in the database, instantiates a {@link Model} and returns it.\n         *\n         * If you pass values for many-to-many fields, instances are created on the through\n         * model as well.\n         *\n         * @param  {props} userProps - the new {@link Model}'s properties.\n         * @return {Model} a new {@link Model} instance.\n         */\n\n    }, {\n        key: 'create',\n        value: function create(userProps) {\n            var _this5 = this;\n\n            if (typeof this._session === 'undefined') {\n                throw new Error(['Tried to create a ' + this.modelName + ' model instance without a session. ', 'Create a session using `session = orm.session()` and call ', '`session[\"' + this.modelName + '\"].create` instead.'].join(''));\n            }\n            var props = _extends({}, userProps);\n\n            var m2mRelations = {};\n\n            var declaredFieldNames = _Object$keys(this.fields);\n            var declaredVirtualFieldNames = _Object$keys(this.virtualFields);\n\n            declaredFieldNames.forEach(function (key) {\n                var field = _this5.fields[key];\n                var valuePassed = userProps.hasOwnProperty(key);\n                if (!(field instanceof ManyToMany)) {\n                    if (valuePassed) {\n                        var value = userProps[key];\n                        props[key] = normalizeEntity(value);\n                    } else if (field.getDefault) {\n                        props[key] = field.getDefault();\n                    }\n                } else if (valuePassed) {\n                    // If a value is supplied for a ManyToMany field,\n                    // discard them from props and save for later processing.\n                    m2mRelations[key] = userProps[key];\n                    delete props[key];\n                }\n            });\n\n            // add backward many-many if required\n            declaredVirtualFieldNames.forEach(function (key) {\n                if (!m2mRelations.hasOwnProperty(key)) {\n                    var field = _this5.virtualFields[key];\n                    if (userProps.hasOwnProperty(key) && field instanceof ManyToMany) {\n                        // If a value is supplied for a ManyToMany field,\n                        // discard them from props and save for later processing.\n                        m2mRelations[key] = userProps[key];\n                        delete props[key];\n                    }\n                }\n            });\n\n            var newEntry = this.session.applyUpdate({\n                action: CREATE,\n                table: this.modelName,\n                payload: props\n            });\n\n            var ThisModel = this;\n            var instance = new ThisModel(newEntry);\n            instance._refreshMany2Many(m2mRelations); // eslint-disable-line no-underscore-dangle\n            return instance;\n        }\n\n        /**\n         * Creates a new or update existing record in the database, instantiates a {@link Model} and returns it.\n         *\n         * If you pass values for many-to-many fields, instances are created on the through\n         * model as well.\n         *\n         * @param  {props} userProps - the required {@link Model}'s properties.\n         * @return {Model} a {@link Model} instance.\n         */\n\n    }, {\n        key: 'upsert',\n        value: function upsert(userProps) {\n            if (typeof this.session === 'undefined') {\n                throw new Error(['Tried to upsert a ' + this.modelName + ' model instance without a session. ', 'Create a session using `session = orm.session()` and call ', '`session[\"' + this.modelName + '\"].upsert` instead.'].join(''));\n            }\n\n            var idAttribute = this.idAttribute;\n\n            if (userProps.hasOwnProperty(idAttribute)) {\n                var id = userProps[idAttribute];\n                if (this.idExists(id)) {\n                    var model = this.withId(id);\n                    model.update(userProps);\n                    return model;\n                }\n            }\n\n            return this.create(userProps);\n        }\n\n        /**\n         * Returns a {@link Model} instance for the object with id `id`.\n         * Returns `null` if the model has no instance with id `id`.\n         *\n         * You can use {@link Model#idExists} to check for existence instead.\n         *\n         * @param  {*} id - the `id` of the object to get\n         * @throws If object with id `id` doesn't exist\n         * @return {Model|null} {@link Model} instance with id `id`\n         */\n\n    }, {\n        key: 'withId',\n        value: function withId(id) {\n            return this.get(_defineProperty({}, this.idAttribute, id));\n        }\n\n        /**\n         * Returns a boolean indicating if an entity\n         * with the id `id` exists in the state.\n         *\n         * @param  {*}  id - a value corresponding to the id attribute of the {@link Model} class.\n         * @return {Boolean} a boolean indicating if entity with `id` exists in the state\n         *\n         * @since 0.11.0\n         */\n\n    }, {\n        key: 'idExists',\n        value: function idExists(id) {\n            return this.exists(_defineProperty({}, this.idAttribute, id));\n        }\n\n        /**\n         * Returns a boolean indicating if an entity\n         * with the given props exists in the state.\n         *\n         * @param  {*}  props - a key-value that {@link Model} instances should have to be considered as existing.\n         * @return {Boolean} a boolean indicating if entity with `props` exists in the state\n         */\n\n    }, {\n        key: 'exists',\n        value: function exists(lookupObj) {\n            if (typeof this.session === 'undefined') {\n                throw new Error(['Tried to check if a ' + this.modelName + ' model instance exists without a session. ', 'Create a session using `session = orm.session()` and call ', '`session[\"' + this.modelName + '\"].exists` instead.'].join(''));\n            }\n\n            return Boolean(this._findDatabaseRows(lookupObj).length);\n        }\n\n        /**\n         * Gets the {@link Model} instance that matches properties in `lookupObj`.\n         * Throws an error if {@link Model} if multiple records match\n         * the properties.\n         *\n         * @param  {Object} lookupObj - the properties used to match a single entity.\n         * @throws {Error} If more than one entity matches the properties in `lookupObj`.\n         * @return {Model} a {@link Model} instance that matches the properties in `lookupObj`.\n         */\n\n    }, {\n        key: 'get',\n        value: function get(lookupObj) {\n            var ThisModel = this;\n\n            var rows = this._findDatabaseRows(lookupObj);\n            if (rows.length === 0) {\n                return null;\n            } else if (rows.length > 1) {\n                throw new Error('Expected to find a single row in `' + this.modelName + '.get`. Found ' + rows.length + '.');\n            }\n\n            return new ThisModel(rows[0]);\n        }\n    }, {\n        key: '_findDatabaseRows',\n        value: function _findDatabaseRows(lookupObj) {\n            var querySpec = {\n                table: this.modelName\n            };\n            if (lookupObj) {\n                querySpec.clauses = [{\n                    type: FILTER,\n                    payload: lookupObj\n                }];\n            }\n            return this.session.query(querySpec).rows;\n        }\n    }, {\n        key: 'hasId',\n        value: function hasId(id) {\n            console.warn('`Model.hasId` has been deprecated. Please use `Model.idExists` instead.');\n            return this.idExists(id);\n        }\n    }, {\n        key: 'idAttribute',\n        get: function get() {\n            if (typeof this._session === 'undefined') {\n                throw new Error(['Tried to get the ' + this.modelName + ' model\\'s id attribute without a session. ', 'Create a session using `session = orm.session()` and access ', '`session[\"' + this.modelName + '\"].idAttribute` instead.'].join(''));\n            }\n            return this.session.db.describe(this.modelName).idAttribute;\n        }\n    }, {\n        key: 'session',\n        get: function get() {\n            return this._session;\n        }\n    }, {\n        key: 'query',\n        get: function get() {\n            return this.getQuerySet();\n        }\n    }]);\n\n    return Model;\n}();\n\nModel.fields = {\n    id: attr()\n};\nModel.virtualFields = {};\nModel.querySetClass = QuerySet;\n\nexport default Model;","import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _slicedToArray from 'babel-runtime/helpers/slicedToArray';\nimport _Object$assign from 'babel-runtime/core-js/object/assign';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport reject from 'lodash/reject';\nimport filter from 'lodash/filter';\nimport orderBy from 'lodash/orderBy';\nimport sortBy from 'lodash/sortBy';\nimport ops from 'immutable-ops';\n\nimport { FILTER, EXCLUDE, ORDER_BY } from '../constants';\nimport { includes, clauseFiltersByAttribute, clauseReducesResultSetSize } from '../utils';\n\nvar DEFAULT_OPTS = {\n    idAttribute: 'id',\n    arrName: 'items',\n    mapName: 'itemsById'\n};\n\n// Input is the current max id and the new id passed to the create action.\n// Both may be undefined. The current max id in the case that this is the first Model\n// being created, and the new id if the id was not explicitly passed to the\n// database.\n//\n// Return value is the new max id and the id to use to create the new row.\n// If the id's are strings, the id must be passed explicitly every time.\n// In this case, the current max id will remain `NaN` due to `Math.max`, but that's fine.\nfunction idSequencer(_currMax, userPassedId) {\n    var currMax = _currMax;\n    var newMax = void 0;\n    var newId = void 0;\n\n    if (currMax === undefined) {\n        currMax = -1;\n    }\n\n    if (userPassedId === undefined) {\n        newMax = currMax + 1;\n        newId = newMax;\n    } else {\n        newMax = Math.max(currMax + 1, userPassedId);\n        newId = userPassedId;\n    }\n\n    return [newMax, // new max id\n    newId];\n}\n\n/**\n * Handles the underlying data structure for a {@link Model} class.\n */\nvar Table = function () {\n    /**\n     * Creates a new {@link Table} instance.\n     * @param  {Object} userOpts - options to use.\n     * @param  {string} [userOpts.idAttribute=id] - the id attribute of the entity.\n     * @param  {string} [userOpts.arrName=items] - the state attribute where an array of\n     *                                             entity id's are stored\n     * @param  {string} [userOpts.mapName=itemsById] - the state attribute where the entity objects\n     *                                                 are stored in a id to entity object\n     *                                                 map.\n     */\n    function Table(userOpts) {\n        _classCallCheck(this, Table);\n\n        _Object$assign(this, DEFAULT_OPTS, userOpts);\n    }\n\n    /**\n     * Returns a reference to the object at index `id`\n     * in state `branch`.\n     *\n     * @param  {Object} branch - the state\n     * @param  {Number} id - the id of the object to get\n     * @return {Object|undefined} A reference to the raw object in the state or\n     *                            `undefined` if not found.\n     */\n\n\n    _createClass(Table, [{\n        key: 'accessId',\n        value: function accessId(branch, id) {\n            return branch[this.mapName][id];\n        }\n    }, {\n        key: 'idExists',\n        value: function idExists(branch, id) {\n            return branch[this.mapName].hasOwnProperty(id);\n        }\n    }, {\n        key: 'accessIdList',\n        value: function accessIdList(branch) {\n            return branch[this.arrName];\n        }\n    }, {\n        key: 'accessList',\n        value: function accessList(branch) {\n            var _this = this;\n\n            return branch[this.arrName].map(function (id) {\n                return _this.accessId(branch, id);\n            });\n        }\n    }, {\n        key: 'getMaxId',\n        value: function getMaxId(branch) {\n            return this.getMeta(branch, 'maxId');\n        }\n    }, {\n        key: 'setMaxId',\n        value: function setMaxId(tx, branch, newMaxId) {\n            return this.setMeta(tx, branch, 'maxId', newMaxId);\n        }\n    }, {\n        key: 'nextId',\n        value: function nextId(id) {\n            return id + 1;\n        }\n    }, {\n        key: 'query',\n        value: function query(branch, clauses) {\n            var _this2 = this;\n\n            if (clauses.length === 0) {\n                return this.accessList(branch);\n            }\n\n            var idAttribute = this.idAttribute;\n\n\n            var optimallyOrderedClauses = sortBy(clauses, function (clause) {\n                if (clauseFiltersByAttribute(clause, idAttribute)) {\n                    return 1;\n                }\n\n                if (clauseReducesResultSetSize(clause)) {\n                    return 2;\n                }\n\n                return 3;\n            });\n\n            var reducer = function reducer(rows, clause) {\n                var type = clause.type,\n                    payload = clause.payload;\n\n                if (!rows) {\n                    if (clauseFiltersByAttribute(clause, idAttribute)) {\n                        var id = payload[idAttribute];\n                        // Payload specified a primary key; Since that is\n                        // unique, we can directly return that.\n                        return _this2.idExists(branch, id) ? [_this2.accessId(branch, id)] : [];\n                    }\n\n                    return reducer(_this2.accessList(branch), clause);\n                }\n\n                switch (type) {\n                    case FILTER:\n                        {\n                            return filter(rows, payload);\n                        }\n                    case EXCLUDE:\n                        {\n                            return reject(rows, payload);\n                        }\n                    case ORDER_BY:\n                        {\n                            var _payload = _slicedToArray(payload, 2),\n                                iteratees = _payload[0],\n                                orders = _payload[1];\n\n                            return orderBy(rows, iteratees, orders);\n                        }\n                    default:\n                        return rows;\n                }\n            };\n\n            return optimallyOrderedClauses.reduce(reducer, undefined);\n        }\n\n        /**\n         * Returns the default state for the data structure.\n         * @return {Object} The default state for this {@link Backend} instance's data structure\n         */\n\n    }, {\n        key: 'getEmptyState',\n        value: function getEmptyState() {\n            var _ref;\n\n            return _ref = {}, _defineProperty(_ref, this.arrName, []), _defineProperty(_ref, this.mapName, {}), _defineProperty(_ref, 'meta', {}), _ref;\n        }\n    }, {\n        key: 'setMeta',\n        value: function setMeta(tx, branch, key, value) {\n            var batchToken = tx.batchToken,\n                withMutations = tx.withMutations;\n\n            if (withMutations) {\n                var res = ops.mutable.setIn(['meta', key], value, branch);\n                return res;\n            }\n\n            return ops.batch.setIn(batchToken, ['meta', key], value, branch);\n        }\n    }, {\n        key: 'getMeta',\n        value: function getMeta(branch, key) {\n            return branch.meta[key];\n        }\n\n        /**\n         * Returns the data structure including a new object `entry`\n         * @param  {Object} tx - transaction info\n         * @param  {Object} branch - the data structure state\n         * @param  {Object} entry - the object to insert\n         * @return {Object} an object with two keys: `state` and `created`.\n         *                  `state` is the new table state and `created` is the\n         *                  row that was created.\n         */\n\n    }, {\n        key: 'insert',\n        value: function insert(tx, branch, entry) {\n            var _ops$batch$merge2;\n\n            var batchToken = tx.batchToken,\n                withMutations = tx.withMutations;\n\n\n            var hasId = entry.hasOwnProperty(this.idAttribute);\n\n            var workingState = branch;\n\n            // This will not affect string id's.\n\n            var _idSequencer = idSequencer(this.getMaxId(branch), entry[this.idAttribute]),\n                _idSequencer2 = _slicedToArray(_idSequencer, 2),\n                newMaxId = _idSequencer2[0],\n                id = _idSequencer2[1];\n\n            workingState = this.setMaxId(tx, branch, newMaxId);\n\n            var finalEntry = hasId ? entry : ops.batch.set(batchToken, this.idAttribute, id, entry);\n\n            if (withMutations) {\n                ops.mutable.push(id, workingState[this.arrName]);\n                ops.mutable.set(id, finalEntry, workingState[this.mapName]);\n                return {\n                    state: workingState,\n                    created: finalEntry\n                };\n            }\n\n            var nextState = ops.batch.merge(batchToken, (_ops$batch$merge2 = {}, _defineProperty(_ops$batch$merge2, this.arrName, ops.batch.push(batchToken, id, workingState[this.arrName])), _defineProperty(_ops$batch$merge2, this.mapName, ops.batch.merge(batchToken, _defineProperty({}, id, finalEntry), workingState[this.mapName])), _ops$batch$merge2), workingState);\n\n            return {\n                state: nextState,\n                created: finalEntry\n            };\n        }\n\n        /**\n         * Returns the data structure with objects where `rows`\n         * are merged with `mergeObj`.\n         *\n         * @param  {Object} tx - transaction info\n         * @param  {Object} branch - the data structure state\n         * @param  {Object[]} rows - rows to update\n         * @param  {Object} mergeObj - The object to merge with each row.\n         * @return {Object}\n         */\n\n    }, {\n        key: 'update',\n        value: function update(tx, branch, rows, mergeObj) {\n            var _this3 = this;\n\n            var batchToken = tx.batchToken,\n                withMutations = tx.withMutations;\n            var mapName = this.mapName;\n\n\n            var mapFunction = function mapFunction(row) {\n                var merge = withMutations ? ops.mutable.merge : ops.batch.merge(batchToken);\n                return merge(mergeObj, row);\n            };\n\n            var set = withMutations ? ops.mutable.set : ops.batch.set(batchToken);\n\n            var newMap = rows.reduce(function (map, row) {\n                var result = mapFunction(row);\n                return set(result[_this3.idAttribute], result, map);\n            }, branch[mapName]);\n            return ops.batch.set(batchToken, mapName, newMap, branch);\n        }\n\n        /**\n         * Returns the data structure without rows `rows`.\n         * @param  {Object} tx - transaction info\n         * @param  {Object} branch - the data structure state\n         * @param  {Object[]} rows - rows to update\n         * @return {Object} the data structure without ids in `idsToDelete`.\n         */\n\n    }, {\n        key: 'delete',\n        value: function _delete(tx, branch, rows) {\n            var _this4 = this,\n                _ops$batch$merge3;\n\n            var batchToken = tx.batchToken,\n                withMutations = tx.withMutations;\n            var arrName = this.arrName,\n                mapName = this.mapName;\n\n            var arr = branch[arrName];\n\n            var idsToDelete = rows.map(function (row) {\n                return row[_this4.idAttribute];\n            });\n            if (withMutations) {\n                idsToDelete.forEach(function (id) {\n                    var idx = arr.indexOf(id);\n                    if (idx !== -1) {\n                        ops.mutable.splice(idx, 1, [], arr);\n                    }\n\n                    ops.mutable.omit(id, branch[mapName]);\n                });\n                return branch;\n            }\n\n            return ops.batch.merge(batchToken, (_ops$batch$merge3 = {}, _defineProperty(_ops$batch$merge3, arrName, ops.batch.filter(batchToken, function (id) {\n                return !includes(idsToDelete, id);\n            }, branch[arrName])), _defineProperty(_ops$batch$merge3, mapName, ops.batch.omit(batchToken, idsToDelete, branch[mapName])), _ops$batch$merge3), branch);\n        }\n    }]);\n\n    return Table;\n}();\n\nexport default Table;","import mapValues from 'lodash/mapValues';\nimport ops from 'immutable-ops';\n\nimport { CREATE, UPDATE, DELETE, SUCCESS } from '../constants';\n\nimport Table from './Table';\n\nfunction replaceTableState(tableName, newTableState, tx, state) {\n    var batchToken = tx.batchToken,\n        withMutations = tx.withMutations;\n\n\n    if (withMutations) {\n        state[tableName] = newTableState;\n        return state;\n    }\n\n    return ops.batch.set(batchToken, tableName, newTableState, state);\n}\n\nfunction query(tables, querySpec, state) {\n    var tableName = querySpec.table,\n        clauses = querySpec.clauses;\n\n    var table = tables[tableName];\n    var rows = table.query(state[tableName], clauses);\n    return {\n        rows: rows\n    };\n}\n\nfunction update(tables, updateSpec, tx, state) {\n    var action = updateSpec.action,\n        payload = updateSpec.payload;\n\n\n    var tableName = void 0;\n    var nextTableState = void 0;\n    var resultPayload = void 0;\n\n    if (action === CREATE) {\n        tableName = updateSpec.table;\n\n        var table = tables[tableName];\n        var currTableState = state[tableName];\n        var result = table.insert(tx, currTableState, payload);\n        nextTableState = result.state;\n        resultPayload = result.created;\n    } else {\n        var querySpec = updateSpec.query;\n        tableName = querySpec.table;\n\n        var _query = query(tables, querySpec, state),\n            rows = _query.rows;\n\n        var _table = tables[tableName];\n        var _currTableState = state[tableName];\n\n        if (action === UPDATE) {\n            nextTableState = _table.update(tx, _currTableState, rows, payload);\n            // return updated rows\n            resultPayload = query(tables, querySpec, state).rows;\n        } else if (action === DELETE) {\n            nextTableState = _table.delete(tx, _currTableState, rows);\n            // return original rows that we just deleted\n            resultPayload = rows;\n        } else {\n            throw new Error('Database received unknown update type: ' + action);\n        }\n    }\n\n    var nextDBState = replaceTableState(tableName, nextTableState, tx, state);\n    return {\n        status: SUCCESS,\n        state: nextDBState,\n        payload: resultPayload\n    };\n}\n\nexport function createDatabase(schemaSpec) {\n    var tablesSpec = schemaSpec.tables;\n\n    var tables = mapValues(tablesSpec, function (tableSpec) {\n        return new Table(tableSpec);\n    });\n\n    var getEmptyState = function getEmptyState() {\n        return mapValues(tables, function (table) {\n            return table.getEmptyState();\n        });\n    };\n    return {\n        getEmptyState: getEmptyState,\n        query: query.bind(null, tables),\n        update: update.bind(null, tables),\n        // Used to inspect the schema.\n        describe: function describe(tableName) {\n            return tables[tableName];\n        }\n    };\n}\n\nexport default createDatabase;","import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _Object$keys from 'babel-runtime/core-js/object/keys';\nimport every from 'lodash/every';\n\nvar defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n    return a === b;\n};\nexport var eqCheck = defaultEqualityCheck;\n\nvar argsAreEqual = function argsAreEqual(lastArgs, nextArgs, equalityCheck) {\n    return nextArgs.every(function (arg, index) {\n        return equalityCheck(arg, lastArgs[index]);\n    });\n};\n\nvar rowsAreEqual = function rowsAreEqual(ids, rowsA, rowsB) {\n    return ids.every(function (id) {\n        return rowsA[id] === rowsB[id];\n    });\n};\n\nvar tablesAreEqual = function tablesAreEqual(rowsA, rowsB) {\n    var rowIdsA = _Object$keys(rowsA);\n    var rowIdsB = _Object$keys(rowsB);\n\n    if (rowIdsA.length !== rowIdsB.length) {\n        /**\n         * the table contains new rows or old ones were removed\n         * this immediately means the table has been updated\n         */\n        return false;\n    }\n\n    return rowsAreEqual(rowIdsA, rowsA, rowsB) && rowsAreEqual(rowIdsB, rowsA, rowsB);\n};\n\nvar accessedModelInstancesAreEqual = function accessedModelInstancesAreEqual(previous, ormState) {\n    var accessedModelInstances = previous.accessedModelInstances;\n\n\n    return every(accessedModelInstances, function (accessedInstances, modelName) {\n        var previousRows = previous.ormState[modelName].itemsById;\n        var rows = ormState[modelName].itemsById;\n\n\n        var accessedIds = _Object$keys(accessedInstances);\n        return rowsAreEqual(accessedIds, previousRows, rows);\n    });\n};\n\nvar fullTableScannedModelsAreEqual = function fullTableScannedModelsAreEqual(previous, ormState) {\n    var fullTableScannedModels = previous.fullTableScannedModels;\n\n\n    return fullTableScannedModels.every(function (modelName) {\n        var previousRows = previous.ormState[modelName].itemsById;\n        var rows = ormState[modelName].itemsById;\n\n        /**\n         * all of this model's instances were checked against some condition\n         * invalidate them unless none of them have changed\n         */\n\n        return tablesAreEqual(previousRows, rows);\n    });\n};\n\n/**\n * A memoizer to use with redux-orm\n * selectors. When the memoized function is first run,\n * the memoizer will remember the models that are accessed\n * during that function run.\n *\n * On subsequent runs, the memoizer will check if those\n * models' states have changed compared to the previous run.\n *\n * Memoization algorithm operates like this:\n *\n * 1. Has the selector been run before? If not, go to 5.\n *\n * 2. If the selector has other input selectors in addition to the\n *    ORM state selector, check their results for equality with the previous results.\n *    If they aren't equal, go to 5.\n *\n * 3. Is the ORM state referentially equal to the previous ORM state the selector\n *    was called with? If yes, return the previous result.\n *\n * 4. Check which Model's instances the selector has accessed on previous runs.\n *    Check for equality with each of those states versus their states in the\n *    previous ORM state. If all of them are equal, return the previous result.\n *\n * 5. Run the selector. Check the Session object used by the selector for\n *    which Model's states were accessed, and merge them with the previously\n *    saved information about accessed models (if-else branching can change\n *    which models are accessed on different inputs). Save the ORM state and\n *    other arguments the selector was called with, overriding previously\n *    saved values. Save the selector result. Return the selector result.\n *\n * @private\n * @param  {Function} func - function to memoize\n * @param  {Function} argEqualityCheck - equality check function to use with normal\n *                                       selector args\n * @param  {ORM} orm - a redux-orm ORM instance\n * @return {Function} `func` memoized.\n */\nexport function memoize(func) {\n    var argEqualityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n    var orm = arguments[2];\n\n    var previous = {\n        /* result of the previous function call */\n        result: null,\n        /* arguments to the previous function call (excluding ORM state) */\n        args: null,\n        /**\n         * lets us know how the models looked like\n         * during the previous function call\n         */\n        ormState: null,\n        /**\n        * array of names of models whose tables have been scanned completely\n        * during previous function call (contains only model names)\n        * format (e.g.): ['Book']\n        */\n        fullTableScannedModels: [],\n        /**\n        * map of which model instances have been accessed\n        * during previous function call (contains only IDs of accessed instances)\n        * format (e.g.): { Book: { 1: true, 3: true } }\n        */\n        accessedModelInstances: {}\n    };\n\n    return function () {\n        for (var _len = arguments.length, stateAndArgs = Array(_len), _key = 0; _key < _len; _key++) {\n            stateAndArgs[_key] = arguments[_key];\n        }\n\n        var ormState = stateAndArgs[0],\n            args = stateAndArgs.slice(1);\n\n\n        var selectorWasCalledBefore = previous.args && previous.ormState;\n\n        if (selectorWasCalledBefore && argsAreEqual(previous.args, args, argEqualityCheck) && accessedModelInstancesAreEqual(previous, ormState) && fullTableScannedModelsAreEqual(previous, ormState)) {\n            /**\n             * the instances that were accessed as well as\n             * the arguments that were passed to func the previous time that\n             * func was called have not changed\n             */\n            return previous.result;\n        }\n\n        /* previous result is no longer valid, update cached values */\n        previous.args = args;\n\n        var session = orm.session(ormState);\n        previous.ormState = ormState;\n\n        /* this is where we call the actual function */\n        var result = func.apply(undefined, [session].concat(_toConsumableArray(args)));\n        previous.result = result;\n\n        /* rows retrieved during function call */\n        previous.accessedModelInstances = session.accessedModelInstances;\n        /* tables that had to be scanned completely */\n        previous.fullTableScannedModels = session.fullTableScannedModels;\n\n        return result;\n    };\n}","import { createSelectorCreator } from 'reselect';\n\nimport { memoize } from './memoize';\n\n/**\n * @module redux\n */\n\n/**\n * Calls all models' reducers if they exist.\n * @return {undefined}\n */\nexport function defaultUpdater(session, action) {\n    session.sessionBoundModels.forEach(function (modelClass) {\n        if (typeof modelClass.reducer === 'function') {\n            // This calls this.applyUpdate to update this.state\n            modelClass.reducer(action, modelClass, session);\n        }\n    });\n}\n\n/**\n * Call the returned function to pass actions to Redux-ORM.\n *\n * @global\n *\n * @param {ORM} orm - the ORM instance.\n * @param {Function} [updater] - the function updating the ORM state based on the given action.\n * @return {Function} reducer that will update the ORM state.\n */\nexport function createReducer(orm) {\n    var updater = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultUpdater;\n\n    return function (state, action) {\n        var session = orm.session(state || orm.getEmptyState());\n        updater(session, action);\n        return session.state;\n    };\n}\n\n/**\n * Returns a memoized selector based on passed arguments.\n * This is similar to `reselect`'s `createSelector`,\n * except you can also pass a single function to be memoized.\n *\n * If you pass multiple functions, the format will be the\n * same as in `reselect`. The last argument is the selector\n * function and the previous are input selectors.\n *\n * When you use this method to create a selector, the returned selector\n * expects the whole `redux-orm` state branch as input. In the selector\n * function that you pass as the last argument, you will receive a\n * `session` argument (a `Session` instance) followed by any\n * input arguments, like in `reselect`.\n *\n * This is an example selector:\n *\n * ```javascript\n * // orm is an instance of ORM\n * const bookSelector = createSelector(orm, session => {\n *     return session.Book.map(book => {\n *         return Object.assign({}, book.ref, {\n *             authors: book.authors.map(author => author.name),\n *             genres: book.genres.map(genre => genre.name),\n *         });\n *     });\n * });\n * ```\n *\n * redux-orm uses a special memoization function to avoid recomputations.\n *\n * Everytime a selector runs, this function records which instances\n * of your `Model`s were accessed.<br>\n * On subsequent runs, the selector first checks if the previously\n * accessed instances or `args` have changed in any way:\n * <ul>\n *     <li>If yes, the selector calls the function you passed to it.</li>\n *     <li>If not, it just returns the previous result\n *         (unless you call it for the first time).</li>\n * </ul>\n *\n * This way you can use the `PureRenderMixin` in your React components\n * for performance gains.\n *\n * @global\n *\n * @param {ORM} orm - the ORM instance\n * @param  {...Function} args - zero or more input selectors\n *                              and the selector function.\n * @return {Function} memoized selector\n */\nexport function createSelector(orm) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n    }\n\n    if (args.length === 1) {\n        return memoize(args[0], undefined, orm);\n    }\n\n    return createSelectorCreator(memoize, undefined, orm).apply(undefined, args);\n}","import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport _Object$assign2 from 'babel-runtime/core-js/object/assign';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport forOwn from 'lodash/forOwn';\nimport find from 'lodash/find';\n\nimport Session from './Session';\nimport Model from './Model';\nimport { createDatabase as defaultCreateDatabase } from './db';\nimport { ForeignKey, ManyToMany, attr } from './fields';\n\nimport { createReducer, createSelector as _createSelector } from './redux';\n\nimport { m2mName, attachQuerySetMethods, m2mToFieldName, m2mFromFieldName, warnDeprecated } from './utils';\n\nvar ORM_DEFAULTS = {\n    createDatabase: defaultCreateDatabase\n};\n\n/**\n * ORM - the Object Relational Mapper.\n *\n * Use instances of this class to:\n *\n * - Register your {@link Model} classes using {@link ORM#register}\n * - Get the empty state for the underlying database with {@link ORM#getEmptyState}\n * - Start an immutable database session with {@link ORM#session}\n * - Start a mutating database session with {@link ORM#mutableSession}\n *\n * Internally, this class handles generating a schema specification from models\n * to the database.\n */\nexport var ORM = function () {\n    /**\n     * Creates a new ORM instance.\n     */\n    function ORM(opts) {\n        _classCallCheck(this, ORM);\n\n        var _Object$assign = _Object$assign2({}, ORM_DEFAULTS, opts || {}),\n            createDatabase = _Object$assign.createDatabase;\n\n        this.createDatabase = createDatabase;\n        this.registry = [];\n        this.implicitThroughModels = [];\n        this.installedFields = {};\n    }\n\n    /**\n     * Registers a {@link Model} class to the ORM.\n     *\n     * If the model has declared any ManyToMany fields, their\n     * through models will be generated and registered with\n     * this call, unless a custom through model has been specified.\n     *\n     * @param  {...Model} model - a {@link Model} class to register\n     * @return {undefined}\n     */\n\n\n    _createClass(ORM, [{\n        key: 'register',\n        value: function register() {\n            var _this = this;\n\n            for (var _len = arguments.length, models = Array(_len), _key = 0; _key < _len; _key++) {\n                models[_key] = arguments[_key];\n            }\n\n            models.forEach(function (model) {\n                if (model.modelName === undefined) {\n                    throw new Error('A model was passed that doesn\\'t have a modelName set');\n                }\n\n                model.invalidateClassCache();\n\n                _this.registerManyToManyModelsFor(model);\n                _this.registry.push(model);\n            });\n        }\n    }, {\n        key: 'registerManyToManyModelsFor',\n        value: function registerManyToManyModelsFor(model) {\n            var _this4 = this;\n\n            var fields = model.fields;\n\n            var thisModelName = model.modelName;\n\n            forOwn(fields, function (fieldInstance, fieldName) {\n                if (!(fieldInstance instanceof ManyToMany)) {\n                    return;\n                }\n\n                var toModelName = void 0;\n                if (fieldInstance.toModelName === 'this') {\n                    toModelName = thisModelName;\n                } else {\n                    toModelName = fieldInstance.toModelName; // eslint-disable-line prefer-destructuring\n                }\n\n                var selfReferencing = thisModelName === toModelName;\n                var fromFieldName = m2mFromFieldName(thisModelName);\n                var toFieldName = m2mToFieldName(toModelName);\n\n                if (fieldInstance.through) {\n                    if (selfReferencing && !fieldInstance.throughFields) {\n                        throw new Error('Self-referencing many-to-many relationship at ' + ('\"' + thisModelName + '.' + fieldName + '\" using custom ') + ('model \"' + fieldInstance.through + '\" has no ') + 'throughFields key. Cannot determine which ' + 'fields reference the instances partaking ' + 'in the relationship.');\n                    }\n                } else {\n                    var _Through$fields;\n\n                    var Through = function (_Model) {\n                        _inherits(ThroughModel, _Model);\n\n                        function ThroughModel() {\n                            _classCallCheck(this, ThroughModel);\n\n                            return _possibleConstructorReturn(this, (ThroughModel.__proto__ || _Object$getPrototypeOf(ThroughModel)).apply(this, arguments));\n                        }\n\n                        return ThroughModel;\n                    }(Model);\n\n                    Through.modelName = m2mName(thisModelName, fieldName);\n\n                    var PlainForeignKey = function (_ForeignKey) {\n                        _inherits(ThroughForeignKeyField, _ForeignKey);\n\n                        function ThroughForeignKeyField() {\n                            _classCallCheck(this, ThroughForeignKeyField);\n\n                            return _possibleConstructorReturn(this, (ThroughForeignKeyField.__proto__ || _Object$getPrototypeOf(ThroughForeignKeyField)).apply(this, arguments));\n                        }\n\n                        _createClass(ThroughForeignKeyField, [{\n                            key: 'installsBackwardsVirtualField',\n                            get: function get() {\n                                return false;\n                            }\n                        }, {\n                            key: 'installsBackwardsDescriptor',\n                            get: function get() {\n                                return false;\n                            }\n                        }]);\n\n                        return ThroughForeignKeyField;\n                    }(ForeignKey);\n                    var ForeignKeyClass = selfReferencing ? PlainForeignKey : ForeignKey;\n                    Through.fields = (_Through$fields = {\n                        id: attr()\n                    }, _defineProperty(_Through$fields, fromFieldName, new ForeignKeyClass(thisModelName)), _defineProperty(_Through$fields, toFieldName, new ForeignKeyClass(toModelName)), _Through$fields);\n\n                    Through.invalidateClassCache();\n                    _this4.implicitThroughModels.push(Through);\n                }\n            });\n        }\n\n        /**\n         * Gets a {@link Model} class by its name from the registry.\n         * @param  {string} modelName - the name of the {@link Model} class to get\n         * @throws If {@link Model} class is not found.\n         * @return {Model} the {@link Model} class, if found\n         */\n\n    }, {\n        key: 'get',\n        value: function get(modelName) {\n            var found = find(this.registry.concat(this.implicitThroughModels), function (model) {\n                return model.modelName === modelName;\n            });\n\n            if (typeof found === 'undefined') {\n                throw new Error('Did not find model ' + modelName + ' from registry.');\n            }\n            return found;\n        }\n    }, {\n        key: 'getModelClasses',\n        value: function getModelClasses() {\n            this._setupModelPrototypes(this.registry);\n            this._setupModelPrototypes(this.implicitThroughModels);\n            return this.registry.concat(this.implicitThroughModels);\n        }\n    }, {\n        key: 'generateSchemaSpec',\n        value: function generateSchemaSpec() {\n            var models = this.getModelClasses();\n            var tables = models.reduce(function (spec, modelClass) {\n                var tableName = modelClass.modelName;\n                var tableSpec = modelClass._getTableOpts(); // eslint-disable-line no-underscore-dangle\n                spec[tableName] = _Object$assign2({}, { fields: modelClass.fields }, tableSpec);\n                return spec;\n            }, {});\n            return { tables: tables };\n        }\n    }, {\n        key: 'getDatabase',\n        value: function getDatabase() {\n            if (!this.db) {\n                this.db = this.createDatabase(this.generateSchemaSpec());\n            }\n            return this.db;\n        }\n\n        /**\n         * Returns the empty database state.\n         * @return {Object} the empty state\n         */\n\n    }, {\n        key: 'getEmptyState',\n        value: function getEmptyState() {\n            return this.getDatabase().getEmptyState();\n        }\n\n        /**\n         * Begins an immutable database session.\n         *\n         * @param  {Object} state  - the state the database manages\n         * @return {Session} a new {@link Session} instance\n         */\n\n    }, {\n        key: 'session',\n        value: function session(state) {\n            return new Session(this, this.getDatabase(), state);\n        }\n\n        /**\n         * Begins a mutable database session.\n         *\n         * @param  {Object} state  - the state the database manages\n         * @return {Session} a new {@link Session} instance\n         */\n\n    }, {\n        key: 'mutableSession',\n        value: function mutableSession(state) {\n            return new Session(this, this.getDatabase(), state, true);\n        }\n\n        /**\n         * @private\n         */\n\n    }, {\n        key: '_setupModelPrototypes',\n        value: function _setupModelPrototypes(models) {\n            var _this5 = this;\n\n            models.forEach(function (model) {\n                if (!model.isSetUp) {\n                    var fields = model.fields,\n                        modelName = model.modelName,\n                        querySetClass = model.querySetClass;\n\n                    forOwn(fields, function (field, fieldName) {\n                        if (!_this5._isFieldInstalled(modelName, fieldName)) {\n                            _this5._installField(field, fieldName, model);\n                            _this5._setFieldInstalled(modelName, fieldName);\n                        }\n                    });\n                    attachQuerySetMethods(model, querySetClass);\n                    model.isSetUp = true;\n                }\n            });\n        }\n\n        /**\n         * @private\n         */\n\n    }, {\n        key: '_isFieldInstalled',\n        value: function _isFieldInstalled(modelName, fieldName) {\n            return this.installedFields.hasOwnProperty(modelName) ? !!this.installedFields[modelName][fieldName] : false;\n        }\n\n        /**\n         * @private\n         */\n\n    }, {\n        key: '_setFieldInstalled',\n        value: function _setFieldInstalled(modelName, fieldName) {\n            if (!this.installedFields.hasOwnProperty(modelName)) {\n                this.installedFields[modelName] = {};\n            }\n            this.installedFields[modelName][fieldName] = true;\n        }\n\n        /**\n         * Installs a field on a model and its related models if necessary.\n         * @private\n         */\n\n    }, {\n        key: '_installField',\n        value: function _installField(field, fieldName, model) {\n            var FieldInstaller = field.installerClass;\n            new FieldInstaller({\n                field: field,\n                fieldName: fieldName,\n                model: model,\n                orm: this\n            }).run();\n        }\n\n        // DEPRECATED AND REMOVED METHODS\n\n        /**\n         * @deprecated Use {@link ORM#mutableSession} instead.\n         */\n\n    }, {\n        key: 'withMutations',\n        value: function withMutations(state) {\n            warnDeprecated('`ORM.prototype.withMutations` has been deprecated. ' + 'Use `ORM.prototype.mutableSession` instead.');\n            return this.mutableSession(state);\n        }\n\n        /**\n         * @deprecated Use {@link ORM#session} instead.\n         */\n\n    }, {\n        key: 'from',\n        value: function from(state) {\n            warnDeprecated('`ORM.prototype.from` has been deprecated. ' + 'Use `ORM.prototype.session` instead.');\n            return this.session(state);\n        }\n\n        /**\n         * @deprecated Access {@link Session#state} instead.\n         */\n\n    }, {\n        key: 'reducer',\n        value: function reducer() {\n            warnDeprecated('`ORM.prototype.reducer` has been deprecated. Access ' + 'the `Session.prototype.state` property instead.');\n            return createReducer(this);\n        }\n\n        /**\n         * @deprecated Use `import { createSelector } from \"redux-orm\"` instead.\n         */\n\n    }, {\n        key: 'createSelector',\n        value: function createSelector() {\n            warnDeprecated('`ORM.prototype.createSelector` has been deprecated. ' + 'Import `createSelector` from Redux-ORM instead.');\n\n            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = arguments[_key2];\n            }\n\n            return _createSelector.apply(undefined, [this].concat(args));\n        }\n\n        /**\n         * @deprecated Use {@link ORM#getEmptyState} instead.\n         */\n\n    }, {\n        key: 'getDefaultState',\n        value: function getDefaultState() {\n            warnDeprecated('`ORM.prototype.getDefaultState` has been deprecated. Use ' + '`ORM.prototype.getEmptyState` instead.');\n            return this.getEmptyState();\n        }\n\n        /**\n         * @deprecated Define a Model class instead.\n         */\n\n    }, {\n        key: 'define',\n        value: function define() {\n            throw new Error('`ORM.prototype.define` has been removed. Please define a Model class.');\n        }\n    }]);\n\n    return ORM;\n}();\n\nexport function DeprecatedSchema() {\n    throw new Error('Schema has been renamed to ORM. Please import ORM instead of Schema ' + 'from Redux-ORM.');\n}\n\nexport default ORM;","import QuerySet from './QuerySet';\nimport Model from './Model';\nimport { DeprecatedSchema, ORM } from './ORM';\nimport Session from './Session';\nimport { createReducer, createSelector } from './redux';\nimport { ForeignKey, ManyToMany, OneToOne, fk, many, oneToOne, attr, Attribute } from './fields';\n\nvar Schema = DeprecatedSchema;\n\nvar Backend = function RemovedBackend() {\n    throw new Error('Having a custom Backend instance is now unsupported. ' + 'Documentation for database customization is upcoming, for now ' + 'please look at the db folder in the source.');\n};\n\nexport { Attribute, QuerySet, Model, ORM, Schema, Backend, Session, ForeignKey, ManyToMany, OneToOne, fk, many, attr, oneToOne, createReducer, createSelector };\n\nexport default Model;"],"sourceRoot":""}