{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/path-to-regexp/index.js","webpack:////var/www/html/utter/node_modules/path-to-regexp/node_modules/isarray/index.js"],"names":["isarray","__webpack_require__","module","exports","pathToRegexp","parse","compile","str","options","tokensToFunction","tokensToRegExp","PATH_REGEXP","RegExp","join","res","tokens","key","index","path","defaultDelimiter","delimiter","exec","m","escaped","offset","slice","length","next","prefix","name","capture","group","modifier","asterisk","push","partial","repeat","optional","pattern","escapeGroup","escapeString","substr","encodeURIComponentPretty","encodeURI","replace","c","charCodeAt","toString","toUpperCase","matches","Array","i","obj","opts","data","encode","pretty","encodeURIComponent","token","segment","value","TypeError","JSON","stringify","j","test","attachKeys","re","keys","flags","sensitive","strict","end","route","endsWithDelimiter","groups","source","match","regexpToRegexp","parts","arrayToRegexp","stringToRegexp","isArray","arr","Object","prototype","call"],"mappings":"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","file":"bundle.npm.path-to-regexp.8dd242d341c8d48fdaae.js","sourcesContent":["var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n","module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n"],"sourceRoot":""}