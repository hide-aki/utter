{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/graphql/language/blockString.mjs","webpack:////var/www/html/utter/node_modules/graphql/jsutils/defineToJSON.mjs","webpack:////var/www/html/utter/node_modules/graphql/jsutils/invariant.mjs","webpack:////var/www/html/utter/node_modules/graphql/language/source.mjs","webpack:////var/www/html/utter/node_modules/graphql/jsutils/defineToStringTag.mjs","webpack:////var/www/html/utter/node_modules/graphql/language/location.mjs","webpack:////var/www/html/utter/node_modules/graphql/error/printError.mjs","webpack:////var/www/html/utter/node_modules/graphql/error/GraphQLError.mjs","webpack:////var/www/html/utter/node_modules/graphql/error/syntaxError.mjs","webpack:////var/www/html/utter/node_modules/graphql/language/lexer.mjs","webpack:////var/www/html/utter/node_modules/graphql/language/kinds.mjs","webpack:////var/www/html/utter/node_modules/graphql/language/directiveLocation.mjs","webpack:////var/www/html/utter/node_modules/graphql/language/parser.mjs","webpack:////var/www/html/utter/node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs","webpack:////var/www/html/utter/node_modules/graphql/jsutils/inspect.mjs","webpack:////var/www/html/utter/node_modules/graphql/language/printer.mjs","webpack:////var/www/html/utter/node_modules/graphql/language/visitor.mjs"],"names":["dedentBlockStringValue","rawString","lines","split","commonIndent","i","length","line","indent","leadingWhitespace","_i","slice","isBlank","shift","pop","join","str","printBlockString","value","indentation","arguments","undefined","preferMultipleLines","isSingleLine","indexOf","hasLeadingSpace","hasTrailingQuote","printAsMultipleLines","result","replace","__webpack_require__","d","__webpack_exports__","defineToJSON","classObject","fn","prototype","toString","toJSON","inspect","nodejsCustomInspectSymbol","invariant","condition","message","Error","source_Source","body","name","locationOffset","this","column","getLocation","source","position","match","lineRegexp","exec","index","highlightSourceAtLocation","location","firstLineColumnOffset","whitespace","lineIndex","lineOffset","lineNum","columnOffset","columnNum","concat","existingLines","filter","_ref","padLen","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","Symbol","iterator","next","done","_ref4","prefix","Math","max","err","return","map","_ref3","printPrefixedLines","len","Array","GraphQLError","nodes","positions","path","originalError","extensions","_nodes","isArray","_source","node","loc","_locations","_positions","reduce","list","push","start","pos","_extensions","Object","defineProperties","enumerable","writable","locations","Boolean","stack","defineProperty","configurable","captureStackTrace","syntaxError","description","toStringTag","get","constructor","create","error","printedLocations","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","printError","createLexer","options","startOfFileToken","Tok","TokenKind","SOF","lastToken","token","lineStart","advance","advanceLexer","lookahead","kind","EOF","readToken","COMMENT","freeze","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","NAME","INT","FLOAT","STRING","BLOCK_STRING","getTokenDesc","end","prev","printCharCode","code","isNaN","JSON","stringify","String","fromCharCode","toUpperCase","lexer","bodyLength","startPosition","charCodeAt","positionAfterWhitespace","col","readComment","readName","firstCode","isFloat","readDigits","readNumber","chunkStart","rawValue","blockString","readBlockString","charCode","a","b","c","char2hex","readString","unexpectedCharacterMessage","Kind","DOCUMENT","OPERATION_DEFINITION","VARIABLE_DEFINITION","SELECTION_SET","FIELD","ARGUMENT","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE","BOOLEAN","NULL","ENUM","LIST","OBJECT","OBJECT_FIELD","DIRECTIVE","NAMED_TYPE","LIST_TYPE","NON_NULL_TYPE","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","OBJECT_TYPE_DEFINITION","FIELD_DEFINITION","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","UNION_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","ENUM_VALUE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","DIRECTIVE_DEFINITION","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","DirectiveLocation","QUERY","MUTATION","SUBSCRIPTION","SCHEMA","SCALAR","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","parse","sourceObj","TypeError","definitions","many","parseDefinition","parseDocument","parseValue","expectToken","parseValueLiteral","parseType","type","parseTypeReference","parseName","peek","parseExecutableDefinition","parseTypeSystemDefinition","keywordToken","expectKeyword","directives","parseDirectives","operationTypes","parseOperationTypeDefinition","unexpected","parseSchemaExtension","parseScalarTypeExtension","interfaces","parseImplementsInterfaces","fields","parseFieldsDefinition","parseObjectTypeExtension","parseInterfaceTypeExtension","types","parseUnionMemberTypes","parseUnionTypeExtension","values","parseEnumValuesDefinition","parseEnumTypeExtension","parseInputFieldsDefinition","parseInputObjectTypeExtension","parseTypeSystemExtension","peekDescription","parseOperationDefinition","experimentalFragmentVariables","parseFragmentName","variableDefinitions","parseVariableDefinitions","typeCondition","parseNamedType","selectionSet","parseSelectionSet","parseFragmentDefinition","operation","parseOperationType","operationToken","parseVariableDefinition","variable","parseVariable","defaultValue","expectOptionalToken","selections","parseSelection","hasTypeCondition","expectOptionalKeyword","parseFragment","alias","nameOrAlias","parseArguments","parseField","isConst","item","parseConstArgument","parseArgument","parseConstValue","parseValueValue","any","parseList","parseObjectField","parseObject","parseStringLiteral","block","parseDirective","parseSchemaDefinition","parseDescription","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","args","parseArgumentDefs","parseDirectiveLocation","parseDirectiveLocations","parseDirectiveDefinition","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","parseInputValueDef","parseEnumValueDefinition","hasOwnProperty","startToken","noLocation","Loc","endToken","atToken","openKind","parseFn","closeKind","for","_nodejsCustomInspectSymbol__WEBPACK_IMPORTED_MODULE_0__","_typeof","obj","MAX_ARRAY_LENGTH","MAX_RECURSIVE_DEPTH","formatValue","seenValues","previouslySeenValues","customInspectFn","object","getCustomFn","customValue","call","array","min","remaining","items","formatArray","keys","tag","getObjectTag","key","formatObject","formatObjectValue","print","_visitor__WEBPACK_IMPORTED_MODULE_0__","_blockString__WEBPACK_IMPORTED_MODULE_1__","ast","leave","printDocASTReducer","Name","Variable","Document","OperationDefinition","op","varDefs","wrap","VariableDefinition","SelectionSet","_ref2","Field","Argument","FragmentSpread","_ref5","InlineFragment","_ref6","FragmentDefinition","_ref7","IntValue","_ref8","FloatValue","_ref9","StringValue","_ref10","BooleanValue","_ref11","NullValue","EnumValue","_ref12","ListValue","_ref13","ObjectValue","_ref14","ObjectField","_ref15","Directive","_ref16","NamedType","_ref17","ListType","_ref18","NonNullType","_ref19","SchemaDefinition","_ref20","OperationTypeDefinition","_ref21","ScalarTypeDefinition","addDescription","_ref22","ObjectTypeDefinition","_ref23","FieldDefinition","_ref24","hasMultilineItems","InputValueDefinition","_ref25","InterfaceTypeDefinition","_ref26","UnionTypeDefinition","_ref27","EnumTypeDefinition","_ref28","EnumValueDefinition","_ref29","InputObjectTypeDefinition","_ref30","DirectiveDefinition","_ref31","SchemaExtension","_ref32","ScalarTypeExtension","_ref33","ObjectTypeExtension","_ref34","InterfaceTypeExtension","_ref35","UnionTypeExtension","_ref36","EnumTypeExtension","_ref37","InputObjectTypeExtension","_ref38","cb","maybeArray","separator","x","maybeString","isMultiline","string","some","BREAK","visit","_jsutils_inspect__WEBPACK_IMPORTED_MODULE_0__","QueryDocumentKeys","root","visitor","visitorKeys","inArray","edits","parent","ancestors","newRoot","isLeaving","isEdited","clone","_arr","k","editOffset","ii","editKey","editValue","splice","isNode","visitFn","getVisitFn","maybeNode","kindVisitor","kindSpecificVisitor","enter","specificVisitor","specificKindVisitor"],"mappings":"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","file":"bundle.npm.graphql.61421cffb0919904856a.js","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent < line.length && (commonIndent === null || indent < commonIndent)) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  if (commonIndent) {\n    for (var _i = 1; _i < lines.length; _i++) {\n      lines[_i] = lines[_i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\n\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\n/**\n * The `defineToJSON()` function defines toJSON() and inspect() prototype\n * methods, if no function provided they become aliases for toString().\n */\n\nexport default function defineToJSON( // eslint-disable-next-line flowtype/no-weak-types\nclassObject) {\n  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : classObject.prototype.toString;\n  classObject.prototype.toJSON = fn;\n  classObject.prototype.inspect = fn;\n\n  if (nodejsCustomInspectSymbol) {\n    classObject.prototype[nodejsCustomInspectSymbol] = fn;\n  }\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nexport default function invariant(condition, message) {\n  /* istanbul ignore else */\n  if (!condition) {\n    throw new Error(message);\n  }\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from '../jsutils/invariant';\nimport defineToStringTag from '../jsutils/defineToStringTag';\n\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\nexport var Source = function Source(body, name, locationOffset) {\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || {\n    line: 1,\n    column: 1\n  };\n  !(this.locationOffset.line > 0) ? invariant(0, 'line in locationOffset is 1-indexed and must be positive') : void 0;\n  !(this.locationOffset.column > 0) ? invariant(0, 'column in locationOffset is 1-indexed and must be positive') : void 0;\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(Source);","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * The `defineToStringTag()` function checks first to see if the runtime\n * supports the `Symbol` class and then if the `Symbol.toStringTag` constant\n * is defined as a `Symbol` instance. If both conditions are met, the\n * Symbol.toStringTag property is defined as a getter that returns the\n * supplied class constructor's name.\n *\n * @method defineToStringTag\n *\n * @param {Class<any>} classObject a class such as Object, String, Number but\n * typically one of your own creation through the class keyword; `class A {}`,\n * for example.\n */\nexport default function defineToStringTag(classObject) {\n  if (typeof Symbol === 'function' && Symbol.toStringTag) {\n    Object.defineProperty(classObject.prototype, Symbol.toStringTag, {\n      get: function get() {\n        return this.constructor.name;\n      }\n    });\n  }\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { getLocation } from '../language/location';\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\nexport function printError(error) {\n  var printedLocations = [];\n\n  if (error.nodes) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = error.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var node = _step.value;\n\n        if (node.loc) {\n          printedLocations.push(highlightSourceAtLocation(node.loc.source, getLocation(node.loc.source, node.loc.start)));\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  } else if (error.source && error.locations) {\n    var source = error.source;\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = error.locations[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var location = _step2.value;\n        printedLocations.push(highlightSourceAtLocation(source, location));\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n\n  return printedLocations.length === 0 ? error.message : [error.message].concat(printedLocations).join('\\n\\n') + '\\n';\n}\n/**\n * Render a helpful description of the location of the error in the GraphQL\n * Source document.\n */\n\nfunction highlightSourceAtLocation(source, location) {\n  var firstLineColumnOffset = source.locationOffset.column - 1;\n  var body = whitespace(firstLineColumnOffset) + source.body;\n  var lineIndex = location.line - 1;\n  var lineOffset = source.locationOffset.line - 1;\n  var lineNum = location.line + lineOffset;\n  var columnOffset = location.line === 1 ? firstLineColumnOffset : 0;\n  var columnNum = location.column + columnOffset;\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n  return \"\".concat(source.name, \" (\").concat(lineNum, \":\").concat(columnNum, \")\\n\") + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [\"\".concat(lineNum - 1, \": \"), lines[lineIndex - 1]], [\"\".concat(lineNum, \": \"), lines[lineIndex]], ['', whitespace(columnNum - 1) + '^'], [\"\".concat(lineNum + 1, \": \"), lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  var existingLines = lines.filter(function (_ref) {\n    var _ = _ref[0],\n        line = _ref[1];\n    return line !== undefined;\n  });\n  var padLen = 0;\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = existingLines[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var _ref4 = _step3.value;\n      var prefix = _ref4[0];\n      padLen = Math.max(padLen, prefix.length);\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  return existingLines.map(function (_ref3) {\n    var prefix = _ref3[0],\n        line = _ref3[1];\n    return lpad(padLen, prefix) + line;\n  }).join('\\n');\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction lpad(len, str) {\n  return whitespace(len - str.length) + str;\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { printError } from './printError';\nimport { getLocation } from '../language/location';\nexport function GraphQLError( // eslint-disable-line no-redeclare\nmessage, nodes, source, positions, path, originalError, extensions) {\n  // Compute list of blame nodes.\n  var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n  var _source = source;\n\n  if (!_source && _nodes) {\n    var node = _nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  var _positions = positions;\n\n  if (!_positions && _nodes) {\n    _positions = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(node.loc.start);\n      }\n\n      return list;\n    }, []);\n  }\n\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  var _locations;\n\n  if (positions && source) {\n    _locations = positions.map(function (pos) {\n      return getLocation(source, pos);\n    });\n  } else if (_nodes) {\n    _locations = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(getLocation(node.loc.source, node.loc.start));\n      }\n\n      return list;\n    }, []);\n  }\n\n  var _extensions = extensions || originalError && originalError.extensions;\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_locations)\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(path)\n    },\n    nodes: {\n      value: _nodes || undefined\n    },\n    source: {\n      value: _source || undefined\n    },\n    positions: {\n      value: _positions || undefined\n    },\n    originalError: {\n      value: originalError\n    },\n    extensions: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _extensions || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_extensions)\n    }\n  }); // Include (non-enumerable) stack trace.\n\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true,\n      configurable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true,\n      configurable: true\n    });\n  }\n}\nGraphQLError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: GraphQLError\n  },\n  name: {\n    value: 'GraphQLError'\n  },\n  toString: {\n    value: function toString() {\n      return printError(this);\n    }\n  }\n});","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { GraphQLError } from './GraphQLError';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(\"Syntax Error: \".concat(description), undefined, source, [position]);\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error';\nimport { dedentBlockStringValue } from './blockString';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n\n/**\n * A helper function to describe a token as a string for debugging\n */\nexport function getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Tok, function () {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n});\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          // u\n          var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n          if (charCode < 0) {\n            throw syntaxError(source, position, 'Invalid character escape sequence: ' + \"\\\\u\".concat(body.slice(position + 1, position + 5), \".\"));\n          }\n\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * The set of allowed kind values for AST nodes.\n */\nexport var Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * The set of allowed directive location values.\n */\nexport var DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport inspect from '../jsutils/inspect';\nimport defineToJSON from '../jsutils/defineToJSON';\nimport { Source } from './source';\nimport { syntaxError } from '../error';\nimport { createLexer, TokenKind, getTokenDesc } from './lexer';\nimport { Kind } from './kinds';\nimport { DirectiveLocation } from './directiveLocation';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n\n  if (!(sourceObj instanceof Source)) {\n    throw new TypeError(\"Must provide Source. Received: \".concat(inspect(sourceObj)));\n  }\n\n  var lexer = createLexer(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expectToken(lexer, TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expectToken(lexer, TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expectToken(lexer, TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expectToken(lexer, TokenKind.EOF);\n  return type;\n}\n/**\n * Converts a name lex token into a name parse node.\n */\n\nfunction parseName(lexer) {\n  var token = expectToken(lexer, TokenKind.NAME);\n  return {\n    kind: Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n} // Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\n\n\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.DOCUMENT,\n    definitions: many(lexer, TokenKind.SOF, parseDefinition, TokenKind.EOF),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n *   - TypeSystemExtension\n */\n\n\nfunction parseDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'directive':\n        return parseTypeSystemDefinition(lexer);\n\n      case 'extend':\n        return parseTypeSystemExtension(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\n\n\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n} // Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\n\n\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n\n  if (peek(lexer, TokenKind.BRACE_L)) {\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var operation = parseOperationType(lexer);\n  var name;\n\n  if (peek(lexer, TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n\n  return {\n    kind: Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationType : one of query mutation subscription\n */\n\n\nfunction parseOperationType(lexer) {\n  var operationToken = expectToken(lexer, TokenKind.NAME);\n\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n\n    case 'mutation':\n      return 'mutation';\n\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\n\n\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, parseVariableDefinition, TokenKind.PAREN_R) : [];\n}\n/**\n * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expectToken(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: expectOptionalToken(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    directives: parseDirectives(lexer, true),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Variable : $ Name\n */\n\n\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expectToken(lexer, TokenKind.DOLLAR);\n  return {\n    kind: Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * SelectionSet : { Selection+ }\n */\n\n\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.SELECTION_SET,\n    selections: many(lexer, TokenKind.BRACE_L, parseSelection, TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\n\n\nfunction parseSelection(lexer) {\n  return peek(lexer, TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\n\n\nfunction parseField(lexer) {\n  var start = lexer.token;\n  var nameOrAlias = parseName(lexer);\n  var alias;\n  var name;\n\n  if (expectOptionalToken(lexer, TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\n\n\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, item, TokenKind.PAREN_R) : [];\n}\n/**\n * Argument[Const] : Name : Value[?Const]\n */\n\n\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n  expectToken(lexer, TokenKind.COLON);\n  return {\n    kind: Kind.ARGUMENT,\n    name: name,\n    value: parseValueLiteral(lexer, false),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expectToken(lexer, TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\n\n\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expectToken(lexer, TokenKind.SPREAD);\n  var hasTypeCondition = expectOptionalKeyword(lexer, 'on');\n\n  if (!hasTypeCondition && peek(lexer, TokenKind.NAME)) {\n    return {\n      kind: Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.INLINE_FRAGMENT,\n    typeCondition: hasTypeCondition ? parseNamedType(lexer) : undefined,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\n\n\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment'); // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentName : Name but not `on`\n */\n\n\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n\n  return parseName(lexer);\n} // Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\n\n\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n\n  switch (token.kind) {\n    case TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n\n    case TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n\n    case TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.STRING:\n    case TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n\n    case TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n\n      lexer.advance();\n      return {\n        kind: Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n\n      break;\n  }\n\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: Kind.STRING,\n    value: token.value,\n    block: token.kind === TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nexport function parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\n\n\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: Kind.LIST,\n    values: any(lexer, TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\n\n\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n\n  var item = function item() {\n    return parseObjectField(lexer, isConst);\n  };\n\n  return {\n    kind: Kind.OBJECT,\n    fields: any(lexer, TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\n\n\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n  expectToken(lexer, TokenKind.COLON);\n  return {\n    kind: Kind.OBJECT_FIELD,\n    name: name,\n    value: parseValueLiteral(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\n\n\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n\n  while (peek(lexer, TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n\n  return directives;\n}\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\n\n\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expectToken(lexer, TokenKind.AT);\n  return {\n    kind: Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\n\n\nexport function parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type;\n\n  if (expectOptionalToken(lexer, TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expectToken(lexer, TokenKind.BRACKET_R);\n    type = {\n      kind: Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n\n  if (expectOptionalToken(lexer, TokenKind.BANG)) {\n    return {\n      kind: Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n\n  return type;\n}\n/**\n * NamedType : Name\n */\n\nexport function parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\n\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, TokenKind.STRING) || peek(lexer, TokenKind.BLOCK_STRING);\n}\n/**\n * Description : StringValue\n */\n\n\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\n\n\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R);\n  return {\n    kind: Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\n\n\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expectToken(lexer, TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\n\n\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\n\n\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n\n  if (expectOptionalKeyword(lexer, 'implements')) {\n    // Optional leading ampersand\n    expectOptionalToken(lexer, TokenKind.AMP);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (expectOptionalToken(lexer, TokenKind.AMP) || // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, TokenKind.NAME));\n  }\n\n  return types;\n}\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\n\n\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, TokenKind.BRACE_L) && lexer.lookahead().kind === TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseFieldDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\n\n\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectToken(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\n\n\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, TokenKind.PAREN_L)) {\n    return [];\n  }\n\n  return many(lexer, TokenKind.PAREN_L, parseInputValueDef, TokenKind.PAREN_R);\n}\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expectToken(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue;\n\n  if (expectOptionalToken(lexer, TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\n\n\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\n\n\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n\n  if (expectOptionalToken(lexer, TokenKind.EQUALS)) {\n    // Optional leading pipe\n    expectOptionalToken(lexer, TokenKind.PIPE);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (expectOptionalToken(lexer, TokenKind.PIPE));\n  }\n\n  return types;\n}\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\n\n\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\n\n\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseEnumValueDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\n\n\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\n\n\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\n\n\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseInputValueDef, TokenKind.BRACE_R) : [];\n}\n/**\n * TypeSystemExtension :\n *   - SchemaExtension\n *   - TypeExtension\n *\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\n\n\nfunction parseTypeSystemExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaExtension(lexer);\n\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n/**\n * SchemaExtension :\n *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n *  - extend schema Directives[Const]\n */\n\n\nfunction parseSchemaExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R) : [];\n\n  if (directives.length === 0 && operationTypes.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCHEMA_EXTENSION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\n\n\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\n\n\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\n\n\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\n\n\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\n\n\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\n\n\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\n\n\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expectToken(lexer, TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\n\n\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  expectOptionalToken(lexer, TokenKind.PIPE);\n  var locations = [];\n\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (expectOptionalToken(lexer, TokenKind.PIPE));\n\n  return locations;\n}\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\n\n\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n\n  if (DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n\n  throw unexpected(lexer, start);\n} // Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\n\n\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Loc, function () {\n  return {\n    start: this.start,\n    end: this.end\n  };\n});\n/**\n * Determines if the next token is of a given kind\n */\n\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\n\n\nfunction expectToken(lexer, kind) {\n  var token = lexer.token;\n\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n}\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and return undefined.\n */\n\n\nfunction expectOptionalToken(lexer, kind) {\n  var token = lexer.token;\n\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n\n  return undefined;\n}\n/**\n * If the next token is a given keyword, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\n\n\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n\n  if (token.kind === TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n}\n/**\n * If the next token is a given keyword, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and return undefined.\n */\n\n\nfunction expectOptionalKeyword(lexer, value) {\n  var token = lexer.token;\n\n  if (token.kind === TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n\n  return undefined;\n}\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\n\n\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return syntaxError(lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n}\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expectToken(lexer, openKind);\n  var nodes = [];\n\n  while (!expectOptionalToken(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expectToken(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n\n  while (!expectOptionalToken(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar nodejsCustomInspectSymbol = typeof Symbol === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;\nexport default nodejsCustomInspectSymbol;","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\nvar MAX_ARRAY_LENGTH = 10;\nvar MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport default function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (_typeof(value)) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? \"[function \".concat(value.name, \"]\") : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (previouslySeenValues.indexOf(value) !== -1) {\n    return '[Circular]';\n  }\n\n  var seenValues = [].concat(previouslySeenValues, [value]);\n\n  if (value) {\n    var customInspectFn = getCustomFn(value);\n\n    if (customInspectFn) {\n      // $FlowFixMe(>=0.90.0)\n      var customValue = customInspectFn.call(value); // check for infinite recursion\n\n      if (customValue !== value) {\n        return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);\n      }\n    } else if (Array.isArray(value)) {\n      return formatArray(value, seenValues);\n    }\n\n    return formatObject(value, seenValues);\n  }\n\n  return String(value);\n}\n\nfunction formatObject(object, seenValues) {\n  var keys = Object.keys(object);\n\n  if (keys.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  var properties = keys.map(function (key) {\n    var value = formatValue(object[key], seenValues);\n    return key + ': ' + value;\n  });\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  var len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  var remaining = array.length - len;\n  var items = [];\n\n  for (var i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(\"... \".concat(remaining, \" more items\"));\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getCustomFn(object) {\n  var customInspectFn = object[String(nodejsCustomInspectSymbol)];\n\n  if (typeof customInspectFn === 'function') {\n    return customInspectFn;\n  }\n\n  if (typeof object.inspect === 'function') {\n    return object.inspect;\n  }\n}\n\nfunction getObjectTag(object) {\n  var tag = Object.prototype.toString.call(object).replace(/^\\[object /, '').replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    var name = object.constructor.name;\n\n    if (typeof name === 'string') {\n      return name;\n    }\n  }\n\n  return tag;\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { visit } from './visitor';\nimport { printBlockString } from './blockString';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, {\n    leave: printDocASTReducer\n  });\n} // TODO: provide better type coverage in future\n\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n  // Document\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue,\n        directives = _ref.directives;\n    return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));\n  },\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');\n  },\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n  // Fragments\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (// Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      \"fragment \".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), \" \") + \"on \".concat(typeCondition, \" \").concat(wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n  // Value\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n  // Directive\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n  // Type\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n  // Type System Definitions\n  SchemaDefinition: function SchemaDefinition(_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  DirectiveDefinition: addDescription(function (_ref31) {\n    var name = _ref31.name,\n        args = _ref31.arguments,\n        locations = _ref31.locations;\n    return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + ' on ' + join(locations, ' | ');\n  }),\n  SchemaExtension: function SchemaExtension(_ref32) {\n    var directives = _ref32.directives,\n        operationTypes = _ref32.operationTypes;\n    return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  ScalarTypeExtension: function ScalarTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n  ObjectTypeExtension: function ObjectTypeExtension(_ref34) {\n    var name = _ref34.name,\n        interfaces = _ref34.interfaces,\n        directives = _ref34.directives,\n        fields = _ref34.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {\n    var name = _ref35.name,\n        directives = _ref35.directives,\n        fields = _ref35.fields;\n    return join(['extend interface', name, join(directives, ' '), block(fields)], ' ');\n  },\n  UnionTypeExtension: function UnionTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        types = _ref36.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n  EnumTypeExtension: function EnumTypeExtension(_ref37) {\n    var name = _ref37.name,\n        directives = _ref37.directives,\n        values = _ref37.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {\n    var name = _ref38.name,\n        directives = _ref38.directives,\n        fields = _ref38.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  }\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\n\nfunction join(maybeArray, separator) {\n  return maybeArray ? maybeArray.filter(function (x) {\n    return x;\n  }).join(separator || '') : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\n\n\nfunction block(array) {\n  return array && array.length !== 0 ? '{\\n' + indent(join(array, '\\n')) + '\\n}' : '';\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\n\n\nfunction wrap(start, maybeString, end) {\n  return maybeString ? start + maybeString + (end || '') : '';\n}\n\nfunction indent(maybeString) {\n  return maybeString && '  ' + maybeString.replace(/\\n/g, '\\n  ');\n}\n\nfunction isMultiline(string) {\n  return string.indexOf('\\n') !== -1;\n}\n\nfunction hasMultilineItems(maybeArray) {\n  return maybeArray && maybeArray.some(isMultiline);\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport inspect from '../jsutils/inspect';\nexport var QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexport var BREAK = {};\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexport function visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          var _arr = Object.keys(node);\n\n          for (var _i = 0; _i < _arr.length; _i++) {\n            var k = _arr[_i];\n            clone[k] = node[k];\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + inspect(node));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return Boolean(maybeNode && typeof maybeNode.kind === 'string');\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\n\nexport function visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      false);\n\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      true);\n      var result;\n\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}"],"sourceRoot":""}