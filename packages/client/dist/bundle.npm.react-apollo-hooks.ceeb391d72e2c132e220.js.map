{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/react-apollo-hooks/es/ApolloContext.js","webpack:////var/www/html/utter/node_modules/react-apollo-hooks/es/internal/SSRContext.js","webpack:////var/www/html/utter/node_modules/react-apollo-hooks/es/utils.js","webpack:////var/www/html/utter/node_modules/react-apollo-hooks/es/queryCache.js","webpack:////var/www/html/utter/node_modules/react-apollo-hooks/es/useQuery.js","webpack:////var/www/html/utter/node_modules/react-apollo-hooks/es/internal/actHack.js"],"names":["__webpack_require__","d","__webpack_exports__","ApolloProvider","useApolloClient","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ApolloContext","a","createContext","_ref","client","children","createElement","Provider","value","overrideClient","Object","Error","SSRContext","react","objToKey","obj","isPlainObject_default","sortedObj","keys","sort","reduce","result","key","JSON","stringify","cachedQueriesByClient","WeakMap","getCachedQueriesForClient","queriesForClient","get","Map","set","getCacheKey","query","options","source","excluded","i","target","sourceKeys","length","indexOf","_objectWithoutPropertiesLoose","printer","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","useQuery","_temp","_ref$ssr","ssr","_ref$skip","skip","_ref$suspend","suspend","pollInterval","_ref$notifyOnNetworkS","notifyOnNetworkStatusChange","context","metadata","variables","actualCachePolicy","fetchPolicy","errorPolicy","fetchResults","ssrManager","ssrInUse","shouldSkip","watchQueryOptions","acc","undefined","observableQuery","cacheKey","watchQuery","getCachedObservableQuery","_useState","responseId","setResponseId","currentResult","data","error","errors","getLastResult","bundle_esm","graphQLErrors","loading","networkStatus","partial","invalidateCurrentResult","x","callback","subscription","subscribe","delete","invalidateCachedObservableQuery","unsubscribe","ensureSupportedFetchPolicy","helpers","fetchMore","bind","refetch","startPolling","stopPolling","updateQuery","register"],"mappings":"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","file":"bundle.npm.react-apollo-hooks.ceeb391d72e2c132e220.js","sourcesContent":["import React, { useContext } from 'react';\nvar ApolloContext = React.createContext(null);\nexport function ApolloProvider(_ref) {\n  var client = _ref.client,\n      children = _ref.children;\n  return React.createElement(ApolloContext.Provider, {\n    value: client\n  }, children);\n}\nexport function useApolloClient(overrideClient) {\n  var client = useContext(ApolloContext); // Ensures that the number of hooks called from one render to another remains\n  // constant, despite the Apollo client read from context being swapped for\n  // one passed directly as prop.\n\n  if (overrideClient) {\n    return overrideClient;\n  }\n\n  if (!client) {\n    // https://github.com/apollographql/react-apollo/blob/5cb63b3625ce5e4a3d3e4ba132eaec2a38ef5d90/src/component-utils.tsx#L19-L22\n    throw new Error('Could not find \"client\" in the context or passed in as a prop. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via props.');\n  }\n\n  return client;\n}","import { createContext } from 'react';\nexport function createSSRManager() {\n  var promiseSet = new Set();\n  return {\n    hasPromises: function hasPromises() {\n      return promiseSet.size > 0;\n    },\n    register: function register(promise) {\n      promiseSet.add(promise);\n    },\n    consumeAndAwaitPromises: function consumeAndAwaitPromises() {\n      var promises = Array.from(promiseSet);\n      promiseSet.clear();\n      return Promise.all(promises);\n    }\n  };\n}\nexport var SSRContext = createContext(null);","import isPlainObject from 'lodash/isPlainObject';\nexport function objToKey(obj) {\n  if (!isPlainObject(obj)) {\n    return obj;\n  }\n\n  var sortedObj = Object.keys(obj).sort().reduce(function (result, key) {\n    result[key] = objToKey(obj[key]);\n    return result;\n  }, {});\n  return JSON.stringify(sortedObj);\n}\nexport function isPromiseLike(value) {\n  return value != null && typeof value.then === 'function';\n}\nexport function compact(obj) {\n  return Object.keys(obj).reduce(function (acc, key) {\n    if (obj[key] !== undefined) {\n      acc[key] = obj[key];\n    }\n\n    return acc;\n  }, {});\n}","function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { print } from 'graphql/language/printer';\nimport { objToKey } from './utils';\nvar cachedQueriesByClient = new WeakMap();\nexport function getCachedObservableQuery(client, options) {\n  var queriesForClient = getCachedQueriesForClient(client);\n  var cacheKey = getCacheKey(options);\n  var observableQuery = queriesForClient.get(cacheKey);\n\n  if (observableQuery == null) {\n    observableQuery = client.watchQuery(options);\n    queriesForClient.set(cacheKey, observableQuery);\n  }\n\n  return observableQuery;\n}\nexport function invalidateCachedObservableQuery(client, options) {\n  var queriesForClient = getCachedQueriesForClient(client);\n  var cacheKey = getCacheKey(options);\n  queriesForClient.delete(cacheKey);\n}\n\nfunction getCachedQueriesForClient(client) {\n  var queriesForClient = cachedQueriesByClient.get(client);\n\n  if (queriesForClient == null) {\n    queriesForClient = new Map();\n    cachedQueriesByClient.set(client, queriesForClient);\n  }\n\n  return queriesForClient;\n}\n\nfunction getCacheKey(_ref) {\n  var query = _ref.query,\n      options = _objectWithoutPropertiesLoose(_ref, [\"query\"]);\n\n  return print(query) + \"@@\" + objToKey(options);\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { ApolloError } from 'apollo-client';\nimport { useContext, useEffect, useMemo, useState } from 'react';\nimport { useApolloClient } from './ApolloContext';\nimport { SSRContext } from './internal/SSRContext';\nimport actHack from './internal/actHack';\nimport { getCachedObservableQuery, invalidateCachedObservableQuery } from './queryCache';\nimport { compact, objToKey } from './utils';\nexport function useQuery(query, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr,\n      _ref$skip = _ref.skip,\n      skip = _ref$skip === void 0 ? false : _ref$skip,\n      _ref$suspend = _ref.suspend,\n      suspend = _ref$suspend === void 0 ? false : _ref$suspend,\n      pollInterval = _ref.pollInterval,\n      _ref$notifyOnNetworkS = _ref.notifyOnNetworkStatusChange,\n      notifyOnNetworkStatusChange = _ref$notifyOnNetworkS === void 0 ? false : _ref$notifyOnNetworkS,\n      overrideClient = _ref.client,\n      context = _ref.context,\n      metadata = _ref.metadata,\n      variables = _ref.variables,\n      actualCachePolicy = _ref.fetchPolicy,\n      errorPolicy = _ref.errorPolicy,\n      fetchResults = _ref.fetchResults;\n\n  var client = useApolloClient(overrideClient);\n  var ssrManager = useContext(SSRContext);\n  var ssrInUse = ssr && ssrManager; // Skips when `skip: true` or SSRContext passed but `ssr: false`\n\n  var shouldSkip = skip || ssrManager != null && !ssr;\n  var fetchPolicy = ssrInUse && ( // Taken from https://github.com/apollographql/react-apollo/blob/2d7e48b7d0c26e792e1ed26e98bb84d8fba5bb8a/src/Query.tsx#L167-L169\n  actualCachePolicy === 'network-only' || actualCachePolicy === 'cache-and-network') ? 'cache-first' : actualCachePolicy;\n  var watchQueryOptions = useMemo(function () {\n    return compact({\n      context: context,\n      errorPolicy: errorPolicy,\n      fetchPolicy: fetchPolicy,\n      fetchResults: fetchResults,\n      metadata: metadata,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      pollInterval: pollInterval,\n      query: query,\n      variables: variables\n    });\n  }, [query, pollInterval, notifyOnNetworkStatusChange, context && objToKey(context), metadata && objToKey(metadata), variables && objToKey(variables), fetchPolicy, errorPolicy, fetchResults]);\n  var observableQuery = useMemo(function () {\n    return getCachedObservableQuery(client, watchQueryOptions);\n  }, [client, watchQueryOptions]);\n\n  var _useState = useState(0),\n      responseId = _useState[0],\n      setResponseId = _useState[1];\n\n  var currentResult = useMemo(function () {\n    var result = observableQuery.currentResult(); // return the old result data when there is an error\n\n    var data = result.data;\n\n    if (result.error || result.errors) {\n      data = _extends({}, result.data, (observableQuery.getLastResult() || {}).data);\n    }\n\n    return {\n      data: data,\n      error: result.errors && result.errors.length > 0 ? new ApolloError({\n        graphQLErrors: result.errors\n      }) : result.error,\n      errors: result.errors,\n      loading: result.loading,\n      // don't try to return `networkStatus` when suspense it's used\n      // because it's unreliable in that case\n      // https://github.com/trojanowski/react-apollo-hooks/pull/68\n      networkStatus: suspend ? undefined : result.networkStatus,\n      partial: result.partial\n    };\n  }, [shouldSkip, responseId, observableQuery]);\n  useEffect(function () {\n    if (shouldSkip) {\n      return;\n    }\n\n    var invalidateCurrentResult = function invalidateCurrentResult() {\n      // A hack to get rid React warnings during tests. The default\n      // implementation of `actHack` just invokes the callback immediately.\n      // In tests, it's replaced with `act` from react-testing-library.\n      // A better solution welcome.\n      actHack(function () {\n        setResponseId(function (x) {\n          return x + 1;\n        });\n      });\n    };\n\n    var subscription = observableQuery.subscribe(invalidateCurrentResult, invalidateCurrentResult);\n    invalidateCachedObservableQuery(client, watchQueryOptions);\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, [shouldSkip, observableQuery]);\n  ensureSupportedFetchPolicy(suspend, fetchPolicy);\n  var helpers = {\n    fetchMore: observableQuery.fetchMore.bind(observableQuery),\n    refetch: observableQuery.refetch.bind(observableQuery),\n    startPolling: observableQuery.startPolling.bind(observableQuery),\n    stopPolling: observableQuery.stopPolling.bind(observableQuery),\n    updateQuery: observableQuery.updateQuery.bind(observableQuery)\n  };\n\n  if (shouldSkip) {\n    // Taken from https://github.com/apollographql/react-apollo/blob/5cb63b3625ce5e4a3d3e4ba132eaec2a38ef5d90/src/Query.tsx#L376-L381\n    return _extends({}, helpers, {\n      data: undefined,\n      error: undefined,\n      loading: false,\n      networkStatus: undefined\n    });\n  }\n\n  if (currentResult.partial) {\n    if (suspend) {\n      // throw a promise - use the react suspense to wait until the data is\n      // available\n      throw observableQuery.result();\n    }\n\n    if (ssrInUse) {\n      ssrManager.register(observableQuery.result());\n    }\n  }\n\n  return _extends({}, helpers, currentResult);\n}\n\nfunction ensureSupportedFetchPolicy(suspend, fetchPolicy) {\n  if (suspend && fetchPolicy && fetchPolicy !== 'cache-first') {\n    throw new Error(\"Fetch policy \" + fetchPolicy + \" is not supported without 'suspend: false'\");\n  }\n}","export default function actHack(callback) {\n  callback();\n}"],"sourceRoot":""}