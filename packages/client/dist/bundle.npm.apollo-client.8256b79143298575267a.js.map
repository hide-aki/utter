{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-client/index.js","webpack:////var/www/html/utter/node_modules/apollo-client/errors/ApolloError.js","webpack:////var/www/html/utter/node_modules/apollo-client/scheduler/scheduler.js","webpack:////var/www/html/utter/node_modules/apollo-client/data/mutations.js","webpack:////var/www/html/utter/node_modules/apollo-client/data/queries.js","webpack:////var/www/html/utter/node_modules/apollo-client/core/QueryManager.js","webpack:////var/www/html/utter/node_modules/apollo-client/data/store.js","webpack:////var/www/html/utter/node_modules/apollo-client/ApolloClient.js","webpack:////var/www/html/utter/node_modules/apollo-client/core/types.js","webpack:////var/www/html/utter/node_modules/apollo-client/util/Observable.js","webpack:////var/www/html/utter/node_modules/apollo-client/core/networkStatus.js","webpack:////var/www/html/utter/node_modules/apollo-client/version.js","webpack:////var/www/html/utter/node_modules/apollo-client/core/ObservableQuery.js"],"names":["__webpack_require__","r","__webpack_exports__","_core_ObservableQuery__WEBPACK_IMPORTED_MODULE_0__","d","_core_networkStatus__WEBPACK_IMPORTED_MODULE_1__","_core_types__WEBPACK_IMPORTED_MODULE_2__","_errors_ApolloError__WEBPACK_IMPORTED_MODULE_3__","_ApolloClient__WEBPACK_IMPORTED_MODULE_4__","isApolloError","ApolloError","tslib__WEBPACK_IMPORTED_MODULE_0__","err","hasOwnProperty","generateErrorMessage","message","Array","isArray","graphQLErrors","length","forEach","graphQLError","errorMessage","networkError","replace","_super","_a","extraInfo","_this","call","this","__proto__","prototype","Error","scheduler_QueryScheduler","QueryScheduler","queryManager","ssrMode","inFlightQueries","registeredQueries","intervalQueries","pollingTimers","stop","Object","keys","queryId","stopPollingQuery","interval","fetchQueriesOnInterval","checkInFlight","query","queryStore","get","networkStatus","core_networkStatus","ready","error","fetchQuery","options","fetchType","Promise","resolve","reject","then","result","catch","startPollingQuery","listener","pollInterval","addQueryListener","addQueryOnInterval","filter","queryOptions","pollingOptions","tslib_es6","fetchPolicy","types","poll","clearInterval","toString","push","setInterval","registerPollingQuery","ObservableQuery","scheduler","MutationStore","store","getStore","mutationId","initMutation","mutation","variables","loading","markMutationError","markMutationResult","reset","queries_QueryStore","QueryStore","initQuery","previousQuery","document","isEqual","isSetVariables","previousVariables","storePreviousVariables","setVariables","isPoll","isRefetch","refetch","metadata","fetchMoreForQueryId","fetchMore","markQueryResult","errors","markQueryError","markQueryResultClient","complete","stopQuery","observableQueryIds","indexOf","reduce","res","key","QueryManager_QueryManager","QueryManager","link","_b","queryDeduplication","_c","onBroadcast","_d","_e","clientAwareness","mutationStore","idCounter","queries","Map","fetchQueryRejectFns","Set","queryIdsByName","deduplicator","lib","from","apollo_link_dedup_lib","dataStore","mutate","optimisticResponse","updateQueriesByName","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","update","errorPolicy","context","generateQueryId","cache","getCache","transformDocument","util_assign","getFromAST","setQuery","generateUpdateQueriesInfo","ret","queryName","updater","markMutationInit","broadcastQueries","storeResult","operation","buildOperationForLink","subscribe","next","errorHandling","markMutationComplete","undefined","refetchQueryPromises","_i","refetchQueries_1","refetchQuery","promise","refetchQueryByName","all","completeMutation","needToFetch","diff","returnPartialData","optimistic","shouldFetch","directives","requestId","generateRequestId","cancel","updateQueryWatch","lastRequestId","invalidated","invalidate","networkResult","fetchRequest","getQuery","data","queryListenerForObserver","observer","previouslyHadError","queryStoreValue","newData","observableQuery","lastResult","getLastResult","lastError","getLastError","shouldNotifyIfLoading","networkStatusChanged","Boolean","errorStatusChanged","notifyOnNetworkStatusChange","apolloError_1","e","setTimeout","environment","console","info","JSON","stringify","isMissing","document_1","readResult","resultFromStore","stale","isDifferentFromLastResult","watchQuery","shouldSubscribe","queryDefinition","variableDefinitions","defaultValues","transformedOptions","kind","add","delete","stopQueryInStore","listeners","concat","watch","previousResult","callback","addObservableQuery","queryDef","name","value","removeObservableQuery","definition","val","clearStore","resetIds","resetStore","reFetchObservableQueries","includeStandby","observableQueryPromises","getObservableQueryPromises","startQuery","startGraphQLSubscription","sub","isCacheEnabled","transformedDoc","observers","Observable","handler","markSubscriptionResult","obs","unsubscribe","removeQuery","subscriptions","x","getCurrentQueryResult","partial","read","getQueryWithPreviousResult","queryIdOrObservable","foundObserveableQuery","id","resetLastResults","errorsFromStore","rejectFetchPromise","forceFetch","subscription","refetchedQueries","map","prev","newInfo","set","extraContext","transformForLink","operationName","getCacheKey","obj","config","dataIdFromObject","store_DataStore","DataStore","initialCache","ignoreErrors","writeWithErrors","write","dataId","optimistic_1","recordOptimisticTransaction","c","orig","cacheWrites_1","currentQueryResult","nextQueryResult","mutationResult","queryVariables","performTransaction","update_1","removeOptimistic","markUpdateQueryResult","newResult","hasSuggestedDevtools","ApolloClient_ApolloClient","ApolloClient","defaultOptions","resetStoreCallbacks","clearStoreCallbacks","ssrForceFetchDelay","connectToDevTools","clientAwarenessName","clientAwarenessVersion","version","supportedCache","supportedDirectives","forward","transform","disableNetworkFetches","bind","defaultConnectToDevTools","window","__APOLLO_CLIENT__","top","self","__APOLLO_DEVTOOLS_GLOBAL_HOOK__","navigator","userAgent","debug","initQueryManager","readQuery","initProxy","readFragment","writeQuery","writeFragment","writeData","__actionHookForDevTools","cb","devToolsHookCb","__requestRaw","payload","action","state","mutations","dataWithOptimisticResults","extract","fn","onResetStore","onClearStore","restore","serializedState","proxy","FetchType","apollo_link__WEBPACK_IMPORTED_MODULE_1__","symbol_observable__WEBPACK_IMPORTED_MODULE_2__","apply","arguments","NetworkStatus","isNetworkRequestInFlight","exports","apollo_utilities__WEBPACK_IMPORTED_MODULE_1__","apollo_utilities__WEBPACK_IMPORTED_MODULE_2__","apollo_utilities__WEBPACK_IMPORTED_MODULE_3__","_networkStatus__WEBPACK_IMPORTED_MODULE_4__","_util_Observable__WEBPACK_IMPORTED_MODULE_5__","_errors_ApolloError__WEBPACK_IMPORTED_MODULE_6__","_types__WEBPACK_IMPORTED_MODULE_7__","onSubscribe","isCurrentlyPolling","isTornDown","subscriptionHandles","that","some","currentResult","storeValue","policy","queryLoading","lastResultSnapshot","snapshot","assign","isNetworkFetchPolicy","combinedOptions","fetchMoreOptions","updateQuery","qid","normal","fetchMoreResult","subscribeToMore","subscriptionData","previous","onError","i","splice","setOptions","opts","oldOptions","startPolling","stopPolling","tryFetch","fetchResults","newVariables","mapFn","_subscription","_observer","stack","setUpQuery","tearDownQuery"],"mappings":"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","file":"bundle.npm.apollo-client.8256b79143298575267a.js","sourcesContent":["export { ObservableQuery, } from './core/ObservableQuery';\nexport { NetworkStatus } from './core/networkStatus';\nexport * from './core/types';\nexport { isApolloError, ApolloError } from './errors/ApolloError';\nimport ApolloClient from './ApolloClient';\nexport { ApolloClient };\nexport default ApolloClient;\n//# sourceMappingURL=index.js.map","import * as tslib_1 from \"tslib\";\nexport function isApolloError(err) {\n    return err.hasOwnProperty('graphQLErrors');\n}\nvar generateErrorMessage = function (err) {\n    var message = '';\n    if (Array.isArray(err.graphQLErrors) && err.graphQLErrors.length !== 0) {\n        err.graphQLErrors.forEach(function (graphQLError) {\n            var errorMessage = graphQLError\n                ? graphQLError.message\n                : 'Error message not found.';\n            message += \"GraphQL error: \" + errorMessage + \"\\n\";\n        });\n    }\n    if (err.networkError) {\n        message += 'Network error: ' + err.networkError.message + '\\n';\n    }\n    message = message.replace(/\\n$/, '');\n    return message;\n};\nvar ApolloError = (function (_super) {\n    tslib_1.__extends(ApolloError, _super);\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.networkError = networkError || null;\n        if (!errorMessage) {\n            _this.message = generateErrorMessage(_this);\n        }\n        else {\n            _this.message = errorMessage;\n        }\n        _this.extraInfo = extraInfo;\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error));\nexport { ApolloError };\n//# sourceMappingURL=ApolloError.js.map","import * as tslib_1 from \"tslib\";\nimport { FetchType } from '../core/types';\nimport { ObservableQuery } from '../core/ObservableQuery';\nimport { NetworkStatus } from '../core/networkStatus';\nvar QueryScheduler = (function () {\n    function QueryScheduler(_a) {\n        var queryManager = _a.queryManager, ssrMode = _a.ssrMode;\n        this.inFlightQueries = {};\n        this.registeredQueries = {};\n        this.intervalQueries = {};\n        this.pollingTimers = {};\n        this.ssrMode = false;\n        this.queryManager = queryManager;\n        this.ssrMode = ssrMode || false;\n    }\n    QueryScheduler.prototype.stop = function () {\n        var _this = this;\n        Object.keys(this.registeredQueries).forEach(function (queryId) {\n            _this.stopPollingQuery(queryId);\n        });\n        Object.keys(this.intervalQueries).forEach(function (interval) {\n            _this.fetchQueriesOnInterval(+interval);\n        });\n    };\n    QueryScheduler.prototype.checkInFlight = function (queryId) {\n        var query = this.queryManager.queryStore.get(queryId);\n        return (query &&\n            query.networkStatus !== NetworkStatus.ready &&\n            query.networkStatus !== NetworkStatus.error);\n    };\n    QueryScheduler.prototype.fetchQuery = function (queryId, options, fetchType) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.queryManager\n                .fetchQuery(queryId, options, fetchType)\n                .then(function (result) {\n                resolve(result);\n            })\n                .catch(function (error) {\n                reject(error);\n            });\n        });\n    };\n    QueryScheduler.prototype.startPollingQuery = function (options, queryId, listener) {\n        if (!options.pollInterval) {\n            throw new Error('Attempted to start a polling query without a polling interval.');\n        }\n        if (this.ssrMode)\n            return queryId;\n        this.registeredQueries[queryId] = options;\n        if (listener) {\n            this.queryManager.addQueryListener(queryId, listener);\n        }\n        this.addQueryOnInterval(queryId, options);\n        return queryId;\n    };\n    QueryScheduler.prototype.stopPollingQuery = function (queryId) {\n        delete this.registeredQueries[queryId];\n    };\n    QueryScheduler.prototype.fetchQueriesOnInterval = function (interval) {\n        var _this = this;\n        this.intervalQueries[interval] = this.intervalQueries[interval].filter(function (queryId) {\n            if (!(_this.registeredQueries.hasOwnProperty(queryId) &&\n                _this.registeredQueries[queryId].pollInterval === interval)) {\n                return false;\n            }\n            if (_this.checkInFlight(queryId)) {\n                return true;\n            }\n            var queryOptions = _this.registeredQueries[queryId];\n            var pollingOptions = tslib_1.__assign({}, queryOptions);\n            pollingOptions.fetchPolicy = 'network-only';\n            _this.fetchQuery(queryId, pollingOptions, FetchType.poll).catch(function () { });\n            return true;\n        });\n        if (this.intervalQueries[interval].length === 0) {\n            clearInterval(this.pollingTimers[interval]);\n            delete this.intervalQueries[interval];\n        }\n    };\n    QueryScheduler.prototype.addQueryOnInterval = function (queryId, queryOptions) {\n        var _this = this;\n        var interval = queryOptions.pollInterval;\n        if (!interval) {\n            throw new Error(\"A poll interval is required to start polling query with id '\" + queryId + \"'.\");\n        }\n        if (this.intervalQueries.hasOwnProperty(interval.toString()) &&\n            this.intervalQueries[interval].length > 0) {\n            this.intervalQueries[interval].push(queryId);\n        }\n        else {\n            this.intervalQueries[interval] = [queryId];\n            this.pollingTimers[interval] = setInterval(function () {\n                _this.fetchQueriesOnInterval(interval);\n            }, interval);\n        }\n    };\n    QueryScheduler.prototype.registerPollingQuery = function (queryOptions) {\n        if (!queryOptions.pollInterval) {\n            throw new Error('Attempted to register a non-polling query with the scheduler.');\n        }\n        return new ObservableQuery({\n            scheduler: this,\n            options: queryOptions,\n        });\n    };\n    return QueryScheduler;\n}());\nexport { QueryScheduler };\n//# sourceMappingURL=scheduler.js.map","var MutationStore = (function () {\n    function MutationStore() {\n        this.store = {};\n    }\n    MutationStore.prototype.getStore = function () {\n        return this.store;\n    };\n    MutationStore.prototype.get = function (mutationId) {\n        return this.store[mutationId];\n    };\n    MutationStore.prototype.initMutation = function (mutationId, mutation, variables) {\n        this.store[mutationId] = {\n            mutation: mutation,\n            variables: variables || {},\n            loading: true,\n            error: null,\n        };\n    };\n    MutationStore.prototype.markMutationError = function (mutationId, error) {\n        var mutation = this.store[mutationId];\n        if (!mutation) {\n            return;\n        }\n        mutation.loading = false;\n        mutation.error = error;\n    };\n    MutationStore.prototype.markMutationResult = function (mutationId) {\n        var mutation = this.store[mutationId];\n        if (!mutation) {\n            return;\n        }\n        mutation.loading = false;\n        mutation.error = null;\n    };\n    MutationStore.prototype.reset = function () {\n        this.store = {};\n    };\n    return MutationStore;\n}());\nexport { MutationStore };\n//# sourceMappingURL=mutations.js.map","import * as tslib_1 from \"tslib\";\nimport { isEqual } from 'apollo-utilities';\nimport { NetworkStatus } from '../core/networkStatus';\nvar QueryStore = (function () {\n    function QueryStore() {\n        this.store = {};\n    }\n    QueryStore.prototype.getStore = function () {\n        return this.store;\n    };\n    QueryStore.prototype.get = function (queryId) {\n        return this.store[queryId];\n    };\n    QueryStore.prototype.initQuery = function (query) {\n        var previousQuery = this.store[query.queryId];\n        if (previousQuery &&\n            previousQuery.document !== query.document &&\n            !isEqual(previousQuery.document, query.document)) {\n            throw new Error('Internal Error: may not update existing query string in store');\n        }\n        var isSetVariables = false;\n        var previousVariables = null;\n        if (query.storePreviousVariables &&\n            previousQuery &&\n            previousQuery.networkStatus !== NetworkStatus.loading) {\n            if (!isEqual(previousQuery.variables, query.variables)) {\n                isSetVariables = true;\n                previousVariables = previousQuery.variables;\n            }\n        }\n        var networkStatus;\n        if (isSetVariables) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        else if (query.isPoll) {\n            networkStatus = NetworkStatus.poll;\n        }\n        else if (query.isRefetch) {\n            networkStatus = NetworkStatus.refetch;\n        }\n        else {\n            networkStatus = NetworkStatus.loading;\n        }\n        var graphQLErrors = [];\n        if (previousQuery && previousQuery.graphQLErrors) {\n            graphQLErrors = previousQuery.graphQLErrors;\n        }\n        this.store[query.queryId] = {\n            document: query.document,\n            variables: query.variables,\n            previousVariables: previousVariables,\n            networkError: null,\n            graphQLErrors: graphQLErrors,\n            networkStatus: networkStatus,\n            metadata: query.metadata,\n        };\n        if (typeof query.fetchMoreForQueryId === 'string' &&\n            this.store[query.fetchMoreForQueryId]) {\n            this.store[query.fetchMoreForQueryId].networkStatus =\n                NetworkStatus.fetchMore;\n        }\n    };\n    QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].graphQLErrors =\n            result.errors && result.errors.length ? result.errors : [];\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = NetworkStatus.ready;\n        if (typeof fetchMoreForQueryId === 'string' &&\n            this.store[fetchMoreForQueryId]) {\n            this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n        }\n    };\n    QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = error;\n        this.store[queryId].networkStatus = NetworkStatus.error;\n        if (typeof fetchMoreForQueryId === 'string') {\n            this.markQueryResultClient(fetchMoreForQueryId, true);\n        }\n    };\n    QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = complete\n            ? NetworkStatus.ready\n            : NetworkStatus.loading;\n    };\n    QueryStore.prototype.stopQuery = function (queryId) {\n        delete this.store[queryId];\n    };\n    QueryStore.prototype.reset = function (observableQueryIds) {\n        var _this = this;\n        this.store = Object.keys(this.store)\n            .filter(function (queryId) {\n            return observableQueryIds.indexOf(queryId) > -1;\n        })\n            .reduce(function (res, key) {\n            res[key] = tslib_1.__assign({}, _this.store[key], { networkStatus: NetworkStatus.loading });\n            return res;\n        }, {});\n    };\n    return QueryStore;\n}());\nexport { QueryStore };\n//# sourceMappingURL=queries.js.map","import * as tslib_1 from \"tslib\";\nimport { execute, ApolloLink } from 'apollo-link';\nimport { DedupLink as Deduplicator } from 'apollo-link-dedup';\nimport { assign, getDefaultValues, getMutationDefinition, getOperationDefinition, getOperationName, getQueryDefinition, isProduction, hasDirectives, } from 'apollo-utilities';\nimport { QueryScheduler } from '../scheduler/scheduler';\nimport { isApolloError, ApolloError } from '../errors/ApolloError';\nimport { Observable } from '../util/Observable';\nimport { MutationStore } from '../data/mutations';\nimport { QueryStore } from '../data/queries';\nimport { ObservableQuery } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { FetchType, } from './types';\nimport { graphQLResultHasError } from 'apollo-utilities';\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, store = _a.store, _c = _a.onBroadcast, onBroadcast = _c === void 0 ? function () { return undefined; } : _c, _d = _a.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _a.clientAwareness, clientAwareness = _e === void 0 ? {} : _e;\n        this.mutationStore = new MutationStore();\n        this.queryStore = new QueryStore();\n        this.clientAwareness = {};\n        this.idCounter = 1;\n        this.queries = new Map();\n        this.fetchQueryRejectFns = new Set();\n        this.queryIdsByName = {};\n        this.link = link;\n        this.deduplicator = ApolloLink.from([new Deduplicator(), link]);\n        this.queryDeduplication = queryDeduplication;\n        this.dataStore = store;\n        this.onBroadcast = onBroadcast;\n        this.clientAwareness = clientAwareness;\n        this.scheduler = new QueryScheduler({ queryManager: this, ssrMode: ssrMode });\n    }\n    QueryManager.prototype.stop = function () {\n        this.scheduler.stop();\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(new Error('QueryManager stopped while query was in flight'));\n        });\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var _this = this;\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueriesByName = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, fetchPolicy = _a.fetchPolicy, _e = _a.context, context = _e === void 0 ? {} : _e;\n        if (!mutation) {\n            throw new Error('mutation option is required. You must specify your GraphQL document in the mutation option.');\n        }\n        if (fetchPolicy && fetchPolicy !== 'no-cache') {\n            throw new Error(\"fetchPolicy for mutations currently only supports the 'no-cache' policy\");\n        }\n        var mutationId = this.generateQueryId();\n        var cache = this.dataStore.getCache();\n        (mutation = cache.transformDocument(mutation)),\n            (variables = assign({}, getDefaultValues(getMutationDefinition(mutation)), variables));\n        this.setQuery(mutationId, function () { return ({ document: mutation }); });\n        var generateUpdateQueriesInfo = function () {\n            var ret = {};\n            if (updateQueriesByName) {\n                Object.keys(updateQueriesByName).forEach(function (queryName) {\n                    return (_this.queryIdsByName[queryName] || []).forEach(function (queryId) {\n                        ret[queryId] = {\n                            updater: updateQueriesByName[queryName],\n                            query: _this.queryStore.get(queryId),\n                        };\n                    });\n                });\n            }\n            return ret;\n        };\n        this.mutationStore.initMutation(mutationId, mutation, variables);\n        this.dataStore.markMutationInit({\n            mutationId: mutationId,\n            document: mutation,\n            variables: variables || {},\n            updateQueries: generateUpdateQueriesInfo(),\n            update: updateWithProxyFn,\n            optimisticResponse: optimisticResponse,\n        });\n        this.broadcastQueries();\n        return new Promise(function (resolve, reject) {\n            var storeResult;\n            var error;\n            var operation = _this.buildOperationForLink(mutation, variables, tslib_1.__assign({}, context, { optimisticResponse: optimisticResponse }));\n            var completeMutation = function () {\n                if (error) {\n                    _this.mutationStore.markMutationError(mutationId, error);\n                }\n                _this.dataStore.markMutationComplete({\n                    mutationId: mutationId,\n                    optimisticResponse: optimisticResponse,\n                });\n                _this.broadcastQueries();\n                if (error) {\n                    return Promise.reject(error);\n                }\n                if (typeof refetchQueries === 'function') {\n                    refetchQueries = refetchQueries(storeResult);\n                }\n                var refetchQueryPromises = [];\n                for (var _i = 0, refetchQueries_1 = refetchQueries; _i < refetchQueries_1.length; _i++) {\n                    var refetchQuery = refetchQueries_1[_i];\n                    if (typeof refetchQuery === 'string') {\n                        var promise = _this.refetchQueryByName(refetchQuery);\n                        if (promise) {\n                            refetchQueryPromises.push(promise);\n                        }\n                        continue;\n                    }\n                    var queryOptions = {\n                        query: refetchQuery.query,\n                        variables: refetchQuery.variables,\n                        fetchPolicy: 'network-only',\n                    };\n                    if (refetchQuery.context) {\n                        queryOptions.context = refetchQuery.context;\n                    }\n                    refetchQueryPromises.push(_this.query(queryOptions));\n                }\n                return Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                    _this.setQuery(mutationId, function () { return ({ document: undefined }); });\n                    if (errorPolicy === 'ignore' &&\n                        storeResult &&\n                        graphQLResultHasError(storeResult)) {\n                        delete storeResult.errors;\n                    }\n                    return storeResult;\n                });\n            };\n            execute(_this.link, operation).subscribe({\n                next: function (result) {\n                    if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                        error = new ApolloError({\n                            graphQLErrors: result.errors,\n                        });\n                        return;\n                    }\n                    _this.mutationStore.markMutationResult(mutationId);\n                    if (fetchPolicy !== 'no-cache') {\n                        _this.dataStore.markMutationResult({\n                            mutationId: mutationId,\n                            result: result,\n                            document: mutation,\n                            variables: variables || {},\n                            updateQueries: generateUpdateQueriesInfo(),\n                            update: updateWithProxyFn,\n                        });\n                    }\n                    storeResult = result;\n                },\n                error: function (err) {\n                    _this.mutationStore.markMutationError(mutationId, err);\n                    _this.dataStore.markMutationComplete({\n                        mutationId: mutationId,\n                        optimisticResponse: optimisticResponse,\n                    });\n                    _this.broadcastQueries();\n                    _this.setQuery(mutationId, function () { return ({ document: undefined }); });\n                    reject(new ApolloError({\n                        networkError: err,\n                    }));\n                },\n                complete: function () { return completeMutation().then(resolve, reject); },\n            });\n        });\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n        var _this = this;\n        var _a = options.variables, variables = _a === void 0 ? {} : _a, _b = options.metadata, metadata = _b === void 0 ? null : _b, _c = options.fetchPolicy, fetchPolicy = _c === void 0 ? 'cache-first' : _c;\n        var cache = this.dataStore.getCache();\n        var query = cache.transformDocument(options.query);\n        var storeResult;\n        var needToFetch = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n        if (fetchType !== FetchType.refetch &&\n            fetchPolicy !== 'network-only' &&\n            fetchPolicy !== 'no-cache') {\n            var _d = this.dataStore.getCache().diff({\n                query: query,\n                variables: variables,\n                returnPartialData: true,\n                optimistic: false,\n            }), complete = _d.complete, result = _d.result;\n            needToFetch = !complete || fetchPolicy === 'cache-and-network';\n            storeResult = result;\n        }\n        var shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n        if (hasDirectives(['live'], query))\n            shouldFetch = true;\n        var requestId = this.generateRequestId();\n        var cancel = this.updateQueryWatch(queryId, query, options);\n        this.setQuery(queryId, function () { return ({\n            document: query,\n            lastRequestId: requestId,\n            invalidated: true,\n            cancel: cancel,\n        }); });\n        this.invalidate(true, fetchMoreForQueryId);\n        this.queryStore.initQuery({\n            queryId: queryId,\n            document: query,\n            storePreviousVariables: shouldFetch,\n            variables: variables,\n            isPoll: fetchType === FetchType.poll,\n            isRefetch: fetchType === FetchType.refetch,\n            metadata: metadata,\n            fetchMoreForQueryId: fetchMoreForQueryId,\n        });\n        this.broadcastQueries();\n        var shouldDispatchClientResult = !shouldFetch || fetchPolicy === 'cache-and-network';\n        if (shouldDispatchClientResult) {\n            this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n            this.invalidate(true, queryId, fetchMoreForQueryId);\n            this.broadcastQueries();\n        }\n        if (shouldFetch) {\n            var networkResult = this.fetchRequest({\n                requestId: requestId,\n                queryId: queryId,\n                document: query,\n                options: options,\n                fetchMoreForQueryId: fetchMoreForQueryId,\n            }).catch(function (error) {\n                if (isApolloError(error)) {\n                    throw error;\n                }\n                else {\n                    var lastRequestId = _this.getQuery(queryId).lastRequestId;\n                    if (requestId >= (lastRequestId || 1)) {\n                        _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n                        _this.invalidate(true, queryId, fetchMoreForQueryId);\n                        _this.broadcastQueries();\n                    }\n                    throw new ApolloError({ networkError: error });\n                }\n            });\n            if (fetchPolicy !== 'cache-and-network') {\n                return networkResult;\n            }\n            else {\n                networkResult.catch(function () { });\n            }\n        }\n        return Promise.resolve({ data: storeResult });\n    };\n    QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n        var _this = this;\n        var previouslyHadError = false;\n        return function (queryStoreValue, newData) {\n            _this.invalidate(false, queryId);\n            if (!queryStoreValue)\n                return;\n            var observableQuery = _this.getQuery(queryId).observableQuery;\n            var fetchPolicy = observableQuery\n                ? observableQuery.options.fetchPolicy\n                : options.fetchPolicy;\n            if (fetchPolicy === 'standby')\n                return;\n            var errorPolicy = observableQuery\n                ? observableQuery.options.errorPolicy\n                : options.errorPolicy;\n            var lastResult = observableQuery\n                ? observableQuery.getLastResult()\n                : null;\n            var lastError = observableQuery ? observableQuery.getLastError() : null;\n            var shouldNotifyIfLoading = (!newData && queryStoreValue.previousVariables != null) ||\n                fetchPolicy === 'cache-only' ||\n                fetchPolicy === 'cache-and-network';\n            var networkStatusChanged = Boolean(lastResult &&\n                queryStoreValue.networkStatus !== lastResult.networkStatus);\n            var errorStatusChanged = errorPolicy &&\n                (lastError && lastError.graphQLErrors) !==\n                    queryStoreValue.graphQLErrors &&\n                errorPolicy !== 'none';\n            if (!isNetworkRequestInFlight(queryStoreValue.networkStatus) ||\n                (networkStatusChanged && options.notifyOnNetworkStatusChange) ||\n                shouldNotifyIfLoading) {\n                if (((!errorPolicy || errorPolicy === 'none') &&\n                    queryStoreValue.graphQLErrors &&\n                    queryStoreValue.graphQLErrors.length > 0) ||\n                    queryStoreValue.networkError) {\n                    var apolloError_1 = new ApolloError({\n                        graphQLErrors: queryStoreValue.graphQLErrors,\n                        networkError: queryStoreValue.networkError,\n                    });\n                    previouslyHadError = true;\n                    if (observer.error) {\n                        try {\n                            observer.error(apolloError_1);\n                        }\n                        catch (e) {\n                            setTimeout(function () {\n                                throw e;\n                            }, 0);\n                        }\n                    }\n                    else {\n                        setTimeout(function () {\n                            throw apolloError_1;\n                        }, 0);\n                        if (!isProduction()) {\n                            console.info('An unhandled error was thrown because no error handler is registered ' +\n                                'for the query ' +\n                                JSON.stringify(queryStoreValue.document));\n                        }\n                    }\n                    return;\n                }\n                try {\n                    var data = void 0;\n                    var isMissing = void 0;\n                    if (newData) {\n                        if (fetchPolicy !== 'no-cache') {\n                            _this.setQuery(queryId, function () { return ({ newData: null }); });\n                        }\n                        data = newData.result;\n                        isMissing = !newData.complete || false;\n                    }\n                    else {\n                        if (lastResult && lastResult.data && !errorStatusChanged) {\n                            data = lastResult.data;\n                            isMissing = false;\n                        }\n                        else {\n                            var document_1 = _this.getQuery(queryId).document;\n                            var readResult = _this.dataStore.getCache().diff({\n                                query: document_1,\n                                variables: queryStoreValue.previousVariables ||\n                                    queryStoreValue.variables,\n                                optimistic: true,\n                            });\n                            data = readResult.result;\n                            isMissing = !readResult.complete;\n                        }\n                    }\n                    var resultFromStore = void 0;\n                    if (isMissing && fetchPolicy !== 'cache-only') {\n                        resultFromStore = {\n                            data: lastResult && lastResult.data,\n                            loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n                            networkStatus: queryStoreValue.networkStatus,\n                            stale: true,\n                        };\n                    }\n                    else {\n                        resultFromStore = {\n                            data: data,\n                            loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n                            networkStatus: queryStoreValue.networkStatus,\n                            stale: false,\n                        };\n                    }\n                    if (errorPolicy === 'all' &&\n                        queryStoreValue.graphQLErrors &&\n                        queryStoreValue.graphQLErrors.length > 0) {\n                        resultFromStore.errors = queryStoreValue.graphQLErrors;\n                    }\n                    if (observer.next) {\n                        if (previouslyHadError ||\n                            !observableQuery ||\n                            observableQuery.isDifferentFromLastResult(resultFromStore)) {\n                            try {\n                                observer.next(resultFromStore);\n                            }\n                            catch (e) {\n                                setTimeout(function () {\n                                    throw e;\n                                }, 0);\n                            }\n                        }\n                    }\n                    previouslyHadError = false;\n                }\n                catch (error) {\n                    previouslyHadError = true;\n                    if (observer.error)\n                        observer.error(new ApolloError({ networkError: error }));\n                    return;\n                }\n            }\n        };\n    };\n    QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n        if (shouldSubscribe === void 0) { shouldSubscribe = true; }\n        if (options.fetchPolicy === 'standby') {\n            throw new Error('client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n        }\n        var queryDefinition = getQueryDefinition(options.query);\n        if (queryDefinition.variableDefinitions &&\n            queryDefinition.variableDefinitions.length) {\n            var defaultValues = getDefaultValues(queryDefinition);\n            options.variables = assign({}, defaultValues, options.variables);\n        }\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var transformedOptions = tslib_1.__assign({}, options);\n        return new ObservableQuery({\n            scheduler: this.scheduler,\n            options: transformedOptions,\n            shouldSubscribe: shouldSubscribe,\n        });\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        if (!options.query) {\n            throw new Error('query option is required. You must specify your GraphQL document ' +\n                'in the query option.');\n        }\n        if (options.query.kind !== 'Document') {\n            throw new Error('You must wrap the query string in a \"gql\" tag.');\n        }\n        if (options.returnPartialData) {\n            throw new Error('returnPartialData option only supported on watchQuery.');\n        }\n        if (options.pollInterval) {\n            throw new Error('pollInterval option only supported on watchQuery.');\n        }\n        return new Promise(function (resolve, reject) {\n            _this.fetchQueryRejectFns.add(reject);\n            _this.watchQuery(options, false)\n                .result()\n                .then(resolve, reject)\n                .then(function () { return _this.fetchQueryRejectFns.delete(reject); });\n        });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        var queryId = this.idCounter.toString();\n        this.idCounter++;\n        return queryId;\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.queryStore.stopQuery(queryId);\n        this.invalidate(true, queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {\n        this.setQuery(queryId, function (_a) {\n            var _b = _a.listeners, listeners = _b === void 0 ? [] : _b;\n            return ({\n                listeners: listeners.concat([listener]),\n                invalidate: false,\n            });\n        });\n    };\n    QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n        var _this = this;\n        var cancel = this.getQuery(queryId).cancel;\n        if (cancel)\n            cancel();\n        var previousResult = function () {\n            var previousResult = null;\n            var observableQuery = _this.getQuery(queryId).observableQuery;\n            if (observableQuery) {\n                var lastResult = observableQuery.getLastResult();\n                if (lastResult) {\n                    previousResult = lastResult.data;\n                }\n            }\n            return previousResult;\n        };\n        return this.dataStore.getCache().watch({\n            query: document,\n            variables: options.variables,\n            optimistic: true,\n            previousResult: previousResult,\n            callback: function (newData) {\n                _this.setQuery(queryId, function () { return ({ invalidated: true, newData: newData }); });\n            },\n        });\n    };\n    QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n        this.setQuery(queryId, function () { return ({ observableQuery: observableQuery }); });\n        var queryDef = getQueryDefinition(observableQuery.options.query);\n        if (queryDef.name && queryDef.name.value) {\n            var queryName = queryDef.name.value;\n            this.queryIdsByName[queryName] = this.queryIdsByName[queryName] || [];\n            this.queryIdsByName[queryName].push(observableQuery.queryId);\n        }\n    };\n    QueryManager.prototype.removeObservableQuery = function (queryId) {\n        var _a = this.getQuery(queryId), observableQuery = _a.observableQuery, cancel = _a.cancel;\n        if (cancel)\n            cancel();\n        if (!observableQuery)\n            return;\n        var definition = getQueryDefinition(observableQuery.options.query);\n        var queryName = definition.name ? definition.name.value : null;\n        this.setQuery(queryId, function () { return ({ observableQuery: null }); });\n        if (queryName) {\n            this.queryIdsByName[queryName] = this.queryIdsByName[queryName].filter(function (val) {\n                return !(observableQuery.queryId === val);\n            });\n        }\n    };\n    QueryManager.prototype.clearStore = function () {\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(new Error('Store reset while query was in flight(not completed in link chain)'));\n        });\n        var resetIds = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery)\n                resetIds.push(queryId);\n        });\n        this.queryStore.reset(resetIds);\n        this.mutationStore.reset();\n        var reset = this.dataStore.reset();\n        return reset;\n    };\n    QueryManager.prototype.resetStore = function () {\n        var _this = this;\n        return this.clearStore().then(function () {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var observableQueryPromises = this.getObservableQueryPromises(includeStandby);\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.startQuery = function (queryId, options, listener) {\n        this.addQueryListener(queryId, listener);\n        this.fetchQuery(queryId, options)\n            .catch(function () { return undefined; });\n        return queryId;\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (options) {\n        var _this = this;\n        var query = options.query;\n        var isCacheEnabled = !(options.fetchPolicy && options.fetchPolicy === 'no-cache');\n        var cache = this.dataStore.getCache();\n        var transformedDoc = cache.transformDocument(query);\n        var variables = assign({}, getDefaultValues(getOperationDefinition(query)), options.variables);\n        var sub;\n        var observers = [];\n        return new Observable(function (observer) {\n            observers.push(observer);\n            if (observers.length === 1) {\n                var handler = {\n                    next: function (result) {\n                        if (isCacheEnabled) {\n                            _this.dataStore.markSubscriptionResult(result, transformedDoc, variables);\n                            _this.broadcastQueries();\n                        }\n                        observers.forEach(function (obs) {\n                            if (graphQLResultHasError(result) && obs.error) {\n                                obs.error(new ApolloError({\n                                    graphQLErrors: result.errors,\n                                }));\n                            }\n                            else if (obs.next) {\n                                obs.next(result);\n                            }\n                        });\n                    },\n                    error: function (error) {\n                        observers.forEach(function (obs) {\n                            if (obs.error) {\n                                obs.error(error);\n                            }\n                        });\n                    },\n                    complete: function () {\n                        observers.forEach(function (obs) {\n                            if (obs.complete) {\n                                obs.complete();\n                            }\n                        });\n                    }\n                };\n                var operation = _this.buildOperationForLink(transformedDoc, variables);\n                sub = execute(_this.link, operation).subscribe(handler);\n            }\n            return function () {\n                observers = observers.filter(function (obs) { return obs !== observer; });\n                if (observers.length === 0 && sub) {\n                    sub.unsubscribe();\n                }\n            };\n        });\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryInStore(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        var subscriptions = this.getQuery(queryId).subscriptions;\n        subscriptions.forEach(function (x) { return x.unsubscribe(); });\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n        if (optimistic === void 0) { optimistic = true; }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query;\n        var lastResult = observableQuery.getLastResult();\n        var newData = this.getQuery(observableQuery.queryId).newData;\n        if (newData && newData.complete) {\n            return { data: newData.result, partial: false };\n        }\n        else {\n            try {\n                var data = this.dataStore.getCache().read({\n                    query: query,\n                    variables: variables,\n                    previousResult: lastResult ? lastResult.data : undefined,\n                    optimistic: optimistic,\n                });\n                return { data: data, partial: false };\n            }\n            catch (e) {\n                return { data: {}, partial: true };\n            }\n        }\n    };\n    QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n        var observableQuery;\n        if (typeof queryIdOrObservable === 'string') {\n            var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n            if (!foundObserveableQuery) {\n                throw new Error(\"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n            }\n            observableQuery = foundObserveableQuery;\n        }\n        else {\n            observableQuery = queryIdOrObservable;\n        }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query;\n        var data = this.getCurrentQueryResult(observableQuery, false).data;\n        return {\n            previousResult: data,\n            variables: variables,\n            document: query,\n        };\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        var _this = this;\n        this.onBroadcast();\n        this.queries.forEach(function (info, id) {\n            if (!info.invalidated || !info.listeners)\n                return;\n            info.listeners\n                .filter(function (x) { return !!x; })\n                .forEach(function (listener) {\n                listener(_this.queryStore.get(id), info.newData);\n            });\n        });\n    };\n    QueryManager.prototype.getObservableQueryPromises = function (includeStandby) {\n        var _this = this;\n        var observableQueryPromises = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (!observableQuery)\n                return;\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (fetchPolicy !== 'cache-only' &&\n                (includeStandby || fetchPolicy !== 'standby')) {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.setQuery(queryId, function () { return ({ newData: null }); });\n            _this.invalidate(true, queryId);\n        });\n        return observableQueryPromises;\n    };\n    QueryManager.prototype.fetchRequest = function (_a) {\n        var _this = this;\n        var requestId = _a.requestId, queryId = _a.queryId, document = _a.document, options = _a.options, fetchMoreForQueryId = _a.fetchMoreForQueryId;\n        var variables = options.variables, context = options.context, _b = options.errorPolicy, errorPolicy = _b === void 0 ? 'none' : _b, fetchPolicy = options.fetchPolicy;\n        var operation = this.buildOperationForLink(document, variables, tslib_1.__assign({}, context, { forceFetch: !this.queryDeduplication }));\n        var resultFromStore;\n        var errorsFromStore;\n        var rejectFetchPromise;\n        return new Promise(function (resolve, reject) {\n            _this.fetchQueryRejectFns.add(rejectFetchPromise = reject);\n            var subscription = execute(_this.deduplicator, operation).subscribe({\n                next: function (result) {\n                    var lastRequestId = _this.getQuery(queryId).lastRequestId;\n                    if (requestId >= (lastRequestId || 1)) {\n                        if (fetchPolicy !== 'no-cache') {\n                            try {\n                                _this.dataStore.markQueryResult(result, document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n                            }\n                            catch (e) {\n                                reject(e);\n                                return;\n                            }\n                        }\n                        else {\n                            _this.setQuery(queryId, function () { return ({\n                                newData: { result: result.data, complete: true },\n                            }); });\n                        }\n                        _this.queryStore.markQueryResult(queryId, result, fetchMoreForQueryId);\n                        _this.invalidate(true, queryId, fetchMoreForQueryId);\n                        _this.broadcastQueries();\n                    }\n                    if (result.errors && errorPolicy === 'none') {\n                        reject(new ApolloError({\n                            graphQLErrors: result.errors,\n                        }));\n                        return;\n                    }\n                    else if (errorPolicy === 'all') {\n                        errorsFromStore = result.errors;\n                    }\n                    if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n                        resultFromStore = result.data;\n                    }\n                    else {\n                        try {\n                            resultFromStore = _this.dataStore.getCache().read({\n                                variables: variables,\n                                query: document,\n                                optimistic: false,\n                            });\n                        }\n                        catch (e) { }\n                    }\n                },\n                error: function (error) {\n                    _this.fetchQueryRejectFns.delete(reject);\n                    _this.setQuery(queryId, function (_a) {\n                        var subscriptions = _a.subscriptions;\n                        return ({\n                            subscriptions: subscriptions.filter(function (x) { return x !== subscription; }),\n                        });\n                    });\n                    reject(error);\n                },\n                complete: function () {\n                    _this.fetchQueryRejectFns.delete(reject);\n                    _this.setQuery(queryId, function (_a) {\n                        var subscriptions = _a.subscriptions;\n                        return ({\n                            subscriptions: subscriptions.filter(function (x) { return x !== subscription; }),\n                        });\n                    });\n                    resolve({\n                        data: resultFromStore,\n                        errors: errorsFromStore,\n                        loading: false,\n                        networkStatus: NetworkStatus.ready,\n                        stale: false,\n                    });\n                },\n            });\n            _this.setQuery(queryId, function (_a) {\n                var subscriptions = _a.subscriptions;\n                return ({\n                    subscriptions: subscriptions.concat([subscription]),\n                });\n            });\n        }).catch(function (error) {\n            _this.fetchQueryRejectFns.delete(rejectFetchPromise);\n            throw error;\n        });\n    };\n    QueryManager.prototype.refetchQueryByName = function (queryName) {\n        var _this = this;\n        var refetchedQueries = this.queryIdsByName[queryName];\n        if (refetchedQueries === undefined)\n            return;\n        return Promise.all(refetchedQueries\n            .map(function (id) { return _this.getQuery(id).observableQuery; })\n            .filter(function (x) { return !!x; })\n            .map(function (x) { return x.refetch(); }));\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        var requestId = this.idCounter;\n        this.idCounter++;\n        return requestId;\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        return (this.queries.get(queryId) || {\n            listeners: [],\n            invalidated: false,\n            document: null,\n            newData: null,\n            lastRequestId: null,\n            observableQuery: null,\n            subscriptions: [],\n        });\n    };\n    QueryManager.prototype.setQuery = function (queryId, updater) {\n        var prev = this.getQuery(queryId);\n        var newInfo = tslib_1.__assign({}, prev, updater(prev));\n        this.queries.set(queryId, newInfo);\n    };\n    QueryManager.prototype.invalidate = function (invalidated, queryId, fetchMoreForQueryId) {\n        if (queryId)\n            this.setQuery(queryId, function () { return ({ invalidated: invalidated }); });\n        if (fetchMoreForQueryId) {\n            this.setQuery(fetchMoreForQueryId, function () { return ({ invalidated: invalidated }); });\n        }\n    };\n    QueryManager.prototype.buildOperationForLink = function (document, variables, extraContext) {\n        var cache = this.dataStore.getCache();\n        return {\n            query: cache.transformForLink\n                ? cache.transformForLink(document)\n                : document,\n            variables: variables,\n            operationName: getOperationName(document) || undefined,\n            context: tslib_1.__assign({}, extraContext, { cache: cache, getCacheKey: function (obj) {\n                    if (cache.config) {\n                        return cache.config.dataIdFromObject(obj);\n                    }\n                    else {\n                        throw new Error('To use context.getCacheKey, you need to use a cache that has a configurable dataIdFromObject, like apollo-cache-inmemory.');\n                    }\n                }, clientAwareness: this.clientAwareness }),\n        };\n    };\n    return QueryManager;\n}());\nexport { QueryManager };\n//# sourceMappingURL=QueryManager.js.map","import { getOperationName, tryFunctionOrLogError, graphQLResultHasError, } from 'apollo-utilities';\nvar DataStore = (function () {\n    function DataStore(initialCache) {\n        this.cache = initialCache;\n    }\n    DataStore.prototype.getCache = function () {\n        return this.cache;\n    };\n    DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n        if (ignoreErrors === void 0) { ignoreErrors = false; }\n        var writeWithErrors = !graphQLResultHasError(result);\n        if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n            writeWithErrors = true;\n        }\n        if (!fetchMoreForQueryId && writeWithErrors) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n        if (!graphQLResultHasError(result)) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_SUBSCRIPTION',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markMutationInit = function (mutation) {\n        var _this = this;\n        if (mutation.optimisticResponse) {\n            var optimistic_1;\n            if (typeof mutation.optimisticResponse === 'function') {\n                optimistic_1 = mutation.optimisticResponse(mutation.variables);\n            }\n            else {\n                optimistic_1 = mutation.optimisticResponse;\n            }\n            var changeFn_1 = function () {\n                _this.markMutationResult({\n                    mutationId: mutation.mutationId,\n                    result: { data: optimistic_1 },\n                    document: mutation.document,\n                    variables: mutation.variables,\n                    updateQueries: mutation.updateQueries,\n                    update: mutation.update,\n                });\n            };\n            this.cache.recordOptimisticTransaction(function (c) {\n                var orig = _this.cache;\n                _this.cache = c;\n                try {\n                    changeFn_1();\n                }\n                finally {\n                    _this.cache = orig;\n                }\n            }, mutation.mutationId);\n        }\n    };\n    DataStore.prototype.markMutationResult = function (mutation) {\n        var _this = this;\n        if (!graphQLResultHasError(mutation.result)) {\n            var cacheWrites_1 = [];\n            cacheWrites_1.push({\n                result: mutation.result.data,\n                dataId: 'ROOT_MUTATION',\n                query: mutation.document,\n                variables: mutation.variables,\n            });\n            if (mutation.updateQueries) {\n                Object.keys(mutation.updateQueries)\n                    .filter(function (id) { return mutation.updateQueries[id]; })\n                    .forEach(function (queryId) {\n                    var _a = mutation.updateQueries[queryId], query = _a.query, updater = _a.updater;\n                    var _b = _this.cache.diff({\n                        query: query.document,\n                        variables: query.variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _b.result, complete = _b.complete;\n                    if (!complete) {\n                        return;\n                    }\n                    var nextQueryResult = tryFunctionOrLogError(function () {\n                        return updater(currentQueryResult, {\n                            mutationResult: mutation.result,\n                            queryName: getOperationName(query.document) || undefined,\n                            queryVariables: query.variables,\n                        });\n                    });\n                    if (nextQueryResult) {\n                        cacheWrites_1.push({\n                            result: nextQueryResult,\n                            dataId: 'ROOT_QUERY',\n                            query: query.document,\n                            variables: query.variables,\n                        });\n                    }\n                });\n            }\n            this.cache.performTransaction(function (c) {\n                cacheWrites_1.forEach(function (write) { return c.write(write); });\n            });\n            var update_1 = mutation.update;\n            if (update_1) {\n                this.cache.performTransaction(function (c) {\n                    tryFunctionOrLogError(function () { return update_1(c, mutation.result); });\n                });\n            }\n        }\n    };\n    DataStore.prototype.markMutationComplete = function (_a) {\n        var mutationId = _a.mutationId, optimisticResponse = _a.optimisticResponse;\n        if (!optimisticResponse)\n            return;\n        this.cache.removeOptimistic(mutationId);\n    };\n    DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n        this.cache.write({\n            result: newResult,\n            dataId: 'ROOT_QUERY',\n            variables: variables,\n            query: document,\n        });\n    };\n    DataStore.prototype.reset = function () {\n        return this.cache.reset();\n    };\n    return DataStore;\n}());\nexport { DataStore };\n//# sourceMappingURL=store.js.map","import * as tslib_1 from \"tslib\";\nimport { ApolloLink, execute, } from 'apollo-link';\nimport { isProduction, removeConnectionDirectiveFromDocument, } from 'apollo-utilities';\nimport { QueryManager } from './core/QueryManager';\nimport { DataStore } from './data/store';\nimport { version } from './version';\nvar hasSuggestedDevtools = false;\nvar ApolloClient = (function () {\n    function ApolloClient(options) {\n        var _this = this;\n        this.defaultOptions = {};\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        this.clientAwareness = {};\n        var link = options.link, cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions, clientAwarenessName = options.name, clientAwarenessVersion = options.version;\n        if (!link || !cache) {\n            throw new Error(\"\\n        In order to initialize Apollo Client, you must specify link & cache properties on the config object.\\n        This is part of the required upgrade when migrating from Apollo Client 1.0 to Apollo Client 2.0.\\n        For more information, please visit:\\n          https://www.apollographql.com/docs/react/basics/setup.html\\n        to help you get started.\\n      \");\n        }\n        var supportedCache = new Map();\n        var supportedDirectives = new ApolloLink(function (operation, forward) {\n            var result = supportedCache.get(operation.query);\n            if (!result) {\n                result = removeConnectionDirectiveFromDocument(operation.query);\n                supportedCache.set(operation.query, result);\n                supportedCache.set(result, result);\n            }\n            operation.query = result;\n            return forward(operation);\n        });\n        this.link = supportedDirectives.concat(link);\n        this.cache = cache;\n        this.store = new DataStore(cache);\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.ssrMode = ssrMode;\n        this.defaultOptions = defaultOptions || {};\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        var defaultConnectToDevTools = !isProduction() &&\n            typeof window !== 'undefined' &&\n            !window.__APOLLO_CLIENT__;\n        if (typeof connectToDevTools === 'undefined'\n            ? defaultConnectToDevTools\n            : connectToDevTools && typeof window !== 'undefined') {\n            window.__APOLLO_CLIENT__ = this;\n        }\n        if (!hasSuggestedDevtools && !isProduction()) {\n            hasSuggestedDevtools = true;\n            if (typeof window !== 'undefined' &&\n                window.document &&\n                window.top === window.self) {\n                if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n                    if (window.navigator &&\n                        window.navigator.userAgent &&\n                        window.navigator.userAgent.indexOf('Chrome') > -1) {\n                        console.debug('Download the Apollo DevTools ' +\n                            'for a better development experience: ' +\n                            'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n                    }\n                }\n            }\n        }\n        this.version = version;\n        if (clientAwarenessName) {\n            this.clientAwareness.name = clientAwarenessName;\n        }\n        if (clientAwarenessVersion) {\n            this.clientAwareness.version = clientAwarenessVersion;\n        }\n    }\n    ApolloClient.prototype.stop = function () {\n        if (this.queryManager) {\n            this.queryManager.stop();\n        }\n    };\n    ApolloClient.prototype.watchQuery = function (options) {\n        if (this.defaultOptions.watchQuery) {\n            options = tslib_1.__assign({}, this.defaultOptions.watchQuery, options);\n        }\n        if (this.disableNetworkFetches &&\n            (options.fetchPolicy === 'network-only' ||\n                options.fetchPolicy === 'cache-and-network')) {\n            options = tslib_1.__assign({}, options, { fetchPolicy: 'cache-first' });\n        }\n        return this.initQueryManager().watchQuery(options);\n    };\n    ApolloClient.prototype.query = function (options) {\n        if (this.defaultOptions.query) {\n            options = tslib_1.__assign({}, this.defaultOptions.query, options);\n        }\n        if (options.fetchPolicy === 'cache-and-network') {\n            throw new Error('cache-and-network fetchPolicy can only be used with watchQuery');\n        }\n        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n            options = tslib_1.__assign({}, options, { fetchPolicy: 'cache-first' });\n        }\n        return this.initQueryManager().query(options);\n    };\n    ApolloClient.prototype.mutate = function (options) {\n        if (this.defaultOptions.mutate) {\n            options = tslib_1.__assign({}, this.defaultOptions.mutate, options);\n        }\n        return this.initQueryManager().mutate(options);\n    };\n    ApolloClient.prototype.subscribe = function (options) {\n        return this.initQueryManager().startGraphQLSubscription(options);\n    };\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.initProxy().readQuery(options, optimistic);\n    };\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.initProxy().readFragment(options, optimistic);\n    };\n    ApolloClient.prototype.writeQuery = function (options) {\n        var result = this.initProxy().writeQuery(options);\n        this.initQueryManager().broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeFragment = function (options) {\n        var result = this.initProxy().writeFragment(options);\n        this.initQueryManager().broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeData = function (options) {\n        var result = this.initProxy().writeData(options);\n        this.initQueryManager().broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return execute(this.link, payload);\n    };\n    ApolloClient.prototype.initQueryManager = function () {\n        var _this = this;\n        if (!this.queryManager) {\n            this.queryManager = new QueryManager({\n                link: this.link,\n                store: this.store,\n                queryDeduplication: this.queryDeduplication,\n                ssrMode: this.ssrMode,\n                clientAwareness: this.clientAwareness,\n                onBroadcast: function () {\n                    if (_this.devToolsHookCb) {\n                        _this.devToolsHookCb({\n                            action: {},\n                            state: {\n                                queries: _this.queryManager\n                                    ? _this.queryManager.queryStore.getStore()\n                                    : {},\n                                mutations: _this.queryManager\n                                    ? _this.queryManager.mutationStore.getStore()\n                                    : {},\n                            },\n                            dataWithOptimisticResults: _this.cache.extract(true),\n                        });\n                    }\n                },\n            });\n        }\n        return this.queryManager;\n    };\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.queryManager\n                ? _this.queryManager.clearStore()\n                : Promise.resolve(null);\n        })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () {\n            return _this.queryManager && _this.queryManager.reFetchObservableQueries\n                ? _this.queryManager.reFetchObservableQueries()\n                : Promise.resolve(null);\n        });\n    };\n    ApolloClient.prototype.clearStore = function () {\n        var _this = this;\n        var queryManager = this.queryManager;\n        return Promise.resolve()\n            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () {\n            return queryManager ? queryManager.clearStore() : Promise.resolve(null);\n        });\n    };\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.onClearStore = function (cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function () {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager\n            ? this.queryManager.reFetchObservableQueries(includeStandby)\n            : Promise.resolve(null);\n    };\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.initProxy().extract(optimistic);\n    };\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.initProxy().restore(serializedState);\n    };\n    ApolloClient.prototype.initProxy = function () {\n        if (!this.proxy) {\n            this.initQueryManager();\n            this.proxy = this.cache;\n        }\n        return this.proxy;\n    };\n    return ApolloClient;\n}());\nexport default ApolloClient;\n//# sourceMappingURL=ApolloClient.js.map","export var FetchType;\n(function (FetchType) {\n    FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n    FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n    FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n})(FetchType || (FetchType = {}));\n//# sourceMappingURL=types.js.map","import * as tslib_1 from \"tslib\";\nimport { Observable as LinkObservable } from 'apollo-link';\nimport $$observable from 'symbol-observable';\nvar Observable = (function (_super) {\n    tslib_1.__extends(Observable, _super);\n    function Observable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Observable.prototype[$$observable] = function () {\n        return this;\n    };\n    Observable.prototype['@@observable'] = function () {\n        return this;\n    };\n    return Observable;\n}(LinkObservable));\nexport { Observable };\n//# sourceMappingURL=Observable.js.map","export var NetworkStatus;\n(function (NetworkStatus) {\n    NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\nexport function isNetworkRequestInFlight(networkStatus) {\n    return networkStatus < 7;\n}\n//# sourceMappingURL=networkStatus.js.map","exports.version = \"2.4.12\"","import * as tslib_1 from \"tslib\";\nimport { isEqual, tryFunctionOrLogError, cloneDeep } from 'apollo-utilities';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { Observable } from '../util/Observable';\nimport { ApolloError } from '../errors/ApolloError';\nimport { FetchType } from './types';\nexport var hasError = function (storeValue, policy) {\n    if (policy === void 0) { policy = 'none'; }\n    return storeValue &&\n        ((storeValue.graphQLErrors &&\n            storeValue.graphQLErrors.length > 0 &&\n            policy === 'none') ||\n            storeValue.networkError);\n};\nvar ObservableQuery = (function (_super) {\n    tslib_1.__extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var scheduler = _a.scheduler, options = _a.options, _b = _a.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;\n        var _this = _super.call(this, function (observer) {\n            return _this.onSubscribe(observer);\n        }) || this;\n        _this.isCurrentlyPolling = false;\n        _this.isTornDown = false;\n        _this.options = options;\n        _this.variables = options.variables || {};\n        _this.queryId = scheduler.queryManager.generateQueryId();\n        _this.shouldSubscribe = shouldSubscribe;\n        _this.scheduler = scheduler;\n        _this.queryManager = scheduler.queryManager;\n        _this.observers = [];\n        _this.subscriptionHandles = [];\n        return _this;\n    }\n    ObservableQuery.prototype.result = function () {\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            var subscription;\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    if (!that.observers.some(function (obs) { return obs !== observer; })) {\n                        that.queryManager.removeQuery(that.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: function (error) {\n                    reject(error);\n                },\n            };\n            subscription = that.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.currentResult = function () {\n        if (this.isTornDown) {\n            return {\n                data: this.lastError ? {} : this.lastResult ? this.lastResult.data : {},\n                error: this.lastError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n            };\n        }\n        var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n        if (hasError(queryStoreValue, this.options.errorPolicy)) {\n            return {\n                data: {},\n                loading: false,\n                networkStatus: queryStoreValue.networkStatus,\n                error: new ApolloError({\n                    graphQLErrors: queryStoreValue.graphQLErrors,\n                    networkError: queryStoreValue.networkError,\n                }),\n            };\n        }\n        var _a = this.queryManager.getCurrentQueryResult(this), data = _a.data, partial = _a.partial;\n        var queryLoading = !queryStoreValue ||\n            queryStoreValue.networkStatus === NetworkStatus.loading;\n        var loading = (this.options.fetchPolicy === 'network-only' && queryLoading) ||\n            (partial && this.options.fetchPolicy !== 'cache-only');\n        var networkStatus;\n        if (queryStoreValue) {\n            networkStatus = queryStoreValue.networkStatus;\n        }\n        else {\n            networkStatus = loading ? NetworkStatus.loading : NetworkStatus.ready;\n        }\n        var result = {\n            data: data,\n            loading: isNetworkRequestInFlight(networkStatus),\n            networkStatus: networkStatus,\n        };\n        if (queryStoreValue &&\n            queryStoreValue.graphQLErrors &&\n            this.options.errorPolicy === 'all') {\n            result.errors = queryStoreValue.graphQLErrors;\n        }\n        if (!partial) {\n            this.lastResult = tslib_1.__assign({}, result, { stale: false });\n            this.lastResultSnapshot = cloneDeep(this.lastResult);\n        }\n        return tslib_1.__assign({}, result, { partial: partial });\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n        var snapshot = this.lastResultSnapshot;\n        return !(snapshot &&\n            newResult &&\n            snapshot.networkStatus === newResult.networkStatus &&\n            snapshot.stale === newResult.stale &&\n            isEqual(snapshot.data, newResult.data));\n    };\n    ObservableQuery.prototype.getLastResult = function () {\n        return this.lastResult;\n    };\n    ObservableQuery.prototype.getLastError = function () {\n        return this.lastError;\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.lastResult;\n        delete this.lastResultSnapshot;\n        delete this.lastError;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'cache-only') {\n            return Promise.reject(new Error('cache-only fetchPolicy option should not be used together with query refetch.'));\n        }\n        if (!isEqual(this.variables, variables)) {\n            this.variables = Object.assign({}, this.variables, variables);\n        }\n        if (!isEqual(this.options.variables, this.variables)) {\n            this.options.variables = Object.assign({}, this.options.variables, this.variables);\n        }\n        var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n        var combinedOptions = tslib_1.__assign({}, this.options, { fetchPolicy: isNetworkFetchPolicy ? fetchPolicy : 'network-only' });\n        return this.queryManager\n            .fetchQuery(this.queryId, combinedOptions, FetchType.refetch)\n            .then(function (result) { return result; });\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        if (!fetchMoreOptions.updateQuery) {\n            throw new Error('updateQuery option is required. This function defines how to update the query data with the new results.');\n        }\n        var combinedOptions;\n        return Promise.resolve()\n            .then(function () {\n            var qid = _this.queryManager.generateQueryId();\n            if (fetchMoreOptions.query) {\n                combinedOptions = fetchMoreOptions;\n            }\n            else {\n                combinedOptions = tslib_1.__assign({}, _this.options, fetchMoreOptions, { variables: Object.assign({}, _this.variables, fetchMoreOptions.variables) });\n            }\n            combinedOptions.fetchPolicy = 'network-only';\n            return _this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, _this.queryId);\n        })\n            .then(function (fetchMoreResult) {\n            _this.updateQuery(function (previousResult) {\n                return fetchMoreOptions.updateQuery(previousResult, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables,\n                });\n            });\n            return fetchMoreResult;\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                if (options.updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return options.updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                console.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptionHandles.push(subscription);\n        return function () {\n            var i = _this.subscriptionHandles.indexOf(subscription);\n            if (i >= 0) {\n                _this.subscriptionHandles.splice(i, 1);\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (opts) {\n        var oldOptions = this.options;\n        this.options = Object.assign({}, this.options, opts);\n        if (opts.pollInterval) {\n            this.startPolling(opts.pollInterval);\n        }\n        else if (opts.pollInterval === 0) {\n            this.stopPolling();\n        }\n        var tryFetch = (oldOptions.fetchPolicy !== 'network-only' &&\n            opts.fetchPolicy === 'network-only') ||\n            (oldOptions.fetchPolicy === 'cache-only' &&\n                opts.fetchPolicy !== 'cache-only') ||\n            (oldOptions.fetchPolicy === 'standby' &&\n                opts.fetchPolicy !== 'standby') ||\n            false;\n        return this.setVariables(this.options.variables, tryFetch, opts.fetchResults);\n    };\n    ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n        if (tryFetch === void 0) { tryFetch = false; }\n        if (fetchResults === void 0) { fetchResults = true; }\n        this.isTornDown = false;\n        var newVariables = variables ? variables : this.variables;\n        if (isEqual(newVariables, this.variables) && !tryFetch) {\n            if (this.observers.length === 0 || !fetchResults) {\n                return new Promise(function (resolve) { return resolve(); });\n            }\n            return this.result();\n        }\n        else {\n            this.variables = newVariables;\n            this.options.variables = newVariables;\n            if (this.observers.length === 0) {\n                return new Promise(function (resolve) { return resolve(); });\n            }\n            return this.queryManager\n                .fetchQuery(this.queryId, tslib_1.__assign({}, this.options, { variables: this.variables }))\n                .then(function (result) { return result; });\n        }\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var _a = this.queryManager.getQueryWithPreviousResult(this.queryId), previousResult = _a.previousResult, variables = _a.variables, document = _a.document;\n        var newResult = tryFunctionOrLogError(function () {\n            return mapFn(previousResult, { variables: variables });\n        });\n        if (newResult) {\n            this.queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n            this.queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        if (this.isCurrentlyPolling) {\n            this.scheduler.stopPollingQuery(this.queryId);\n            this.options.pollInterval = undefined;\n            this.isCurrentlyPolling = false;\n        }\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        if (this.options.fetchPolicy === 'cache-first' ||\n            this.options.fetchPolicy === 'cache-only') {\n            throw new Error('Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n        }\n        if (this.isCurrentlyPolling) {\n            this.scheduler.stopPollingQuery(this.queryId);\n            this.isCurrentlyPolling = false;\n        }\n        this.options.pollInterval = pollInterval;\n        this.isCurrentlyPolling = true;\n        this.scheduler.startPollingQuery(this.options, this.queryId);\n    };\n    ObservableQuery.prototype.onSubscribe = function (observer) {\n        var _this = this;\n        if (observer._subscription &&\n            observer._subscription._observer &&\n            !observer._subscription._observer.error) {\n            observer._subscription._observer.error = function (error) {\n                console.error('Unhandled error', error.message, error.stack);\n            };\n        }\n        this.observers.push(observer);\n        if (observer.next && this.lastResult)\n            observer.next(this.lastResult);\n        if (observer.error && this.lastError)\n            observer.error(this.lastError);\n        if (this.observers.length === 1)\n            this.setUpQuery();\n        return function () {\n            _this.observers = _this.observers.filter(function (obs) { return obs !== observer; });\n            if (_this.observers.length === 0) {\n                _this.tearDownQuery();\n            }\n        };\n    };\n    ObservableQuery.prototype.setUpQuery = function () {\n        var _this = this;\n        if (this.shouldSubscribe) {\n            this.queryManager.addObservableQuery(this.queryId, this);\n        }\n        if (!!this.options.pollInterval) {\n            if (this.options.fetchPolicy === 'cache-first' ||\n                this.options.fetchPolicy === 'cache-only') {\n                throw new Error('Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n            }\n            this.isCurrentlyPolling = true;\n            this.scheduler.startPollingQuery(this.options, this.queryId);\n        }\n        var observer = {\n            next: function (result) {\n                _this.lastResult = result;\n                _this.lastResultSnapshot = cloneDeep(result);\n                _this.observers.forEach(function (obs) { return obs.next && obs.next(result); });\n            },\n            error: function (error) {\n                _this.lastError = error;\n                _this.observers.forEach(function (obs) { return obs.error && obs.error(error); });\n            },\n        };\n        this.queryManager.startQuery(this.queryId, this.options, this.queryManager.queryListenerForObserver(this.queryId, this.options, observer));\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        this.isTornDown = true;\n        if (this.isCurrentlyPolling) {\n            this.scheduler.stopPollingQuery(this.queryId);\n            this.isCurrentlyPolling = false;\n        }\n        this.subscriptionHandles.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptionHandles = [];\n        this.queryManager.removeObservableQuery(this.queryId);\n        this.queryManager.stopQuery(this.queryId);\n        this.observers = [];\n    };\n    return ObservableQuery;\n}(Observable));\nexport { ObservableQuery };\n//# sourceMappingURL=ObservableQuery.js.map"],"sourceRoot":""}