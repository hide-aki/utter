{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/deepmerge/dist/umd.js"],"names":["module","exports","isMergeableObject","value","isNonNullObject","stringValue","Object","prototype","toString","call","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","Symbol","for","cloneUnlessOtherwiseSpecified","options","clone","deepmerge","val","Array","isArray","defaultArrayMerge","target","source","concat","map","element","arrayMerge","sourceIsArray","targetIsArray","sourceAndTargetTypesMatch","destination","keys","forEach","key","mergeObject","all","array","Error","reduce","prev","next","factory"],"mappings":"iFAC6DA,EAAAC,QAG5D,WAAqB,aAEtB,IAAAC,EAAA,SAAAC,GACA,OAIA,SAAAA,GACA,QAAAA,GAAA,iBAAAA,EALAC,CAAAD,KAQA,SAAAA,GACA,IAAAE,EAAAC,OAAAC,UAAAC,SAAAC,KAAAN,GAEA,0BAAAE,GACA,kBAAAA,GAQA,SAAAF,GACA,OAAAA,EAAAO,WAAAC,EARAC,CAAAT,GAZAU,CAAAV,IAiBAQ,EADA,mBAAAG,eAAAC,IACAD,OAAAC,IAAA,uBAUA,SAAAC,EAAAb,EAAAc,GACA,WAAAA,EAAAC,OAAAD,EAAAf,kBAAAC,GACAgB,GANAC,EAMAjB,EALAkB,MAAAC,QAAAF,GAAA,OAKAjB,EAAAc,GACAd,EAPA,IAAAiB,EAUA,SAAAG,EAAAC,EAAAC,EAAAR,GACA,OAAAO,EAAAE,OAAAD,GAAAE,IAAA,SAAAC,GACA,OAAAZ,EAAAY,EAAAX,KAqBA,SAAAE,EAAAK,EAAAC,EAAAR,IACAA,KAAA,IACAY,WAAAZ,EAAAY,YAAAN,EACAN,EAAAf,kBAAAe,EAAAf,qBAEA,IAAA4B,EAAAT,MAAAC,QAAAG,GACAM,EAAAV,MAAAC,QAAAE,GACAQ,EAAAF,IAAAC,EAEA,OAAAC,EAEEF,EACFb,EAAAY,WAAAL,EAAAC,EAAAR,GA7BA,SAAAO,EAAAC,EAAAR,GACA,IAAAgB,EAAA,GAaA,OAZAhB,EAAAf,kBAAAsB,IACAlB,OAAA4B,KAAAV,GAAAW,QAAA,SAAAC,GACAH,EAAAG,GAAApB,EAAAQ,EAAAY,GAAAnB,KAGAX,OAAA4B,KAAAT,GAAAU,QAAA,SAAAC,GACAnB,EAAAf,kBAAAuB,EAAAW,KAAAZ,EAAAY,GAGAH,EAAAG,GAAAjB,EAAAK,EAAAY,GAAAX,EAAAW,GAAAnB,GAFAgB,EAAAG,GAAApB,EAAAS,EAAAW,GAAAnB,KAKAgB,EAiBAI,CAAAb,EAAAC,EAAAR,GAJAD,EAAAS,EAAAR,GAoBA,OAZAE,EAAAmB,IAAA,SAAAC,EAAAtB,GACA,IAAAI,MAAAC,QAAAiB,GACA,UAAAC,MAAA,qCAGA,OAAAD,EAAAE,OAAA,SAAAC,EAAAC,GACA,OAAAxB,EAAAuB,EAAAC,EAAA1B,IACE,KAGFE,EA3F6DyB","file":"bundle.npm.deepmerge.ef3bcdb34ee1d5b403f4.js","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.deepmerge = factory());\n}(this, (function () { 'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = deepmerge(target[key], source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nreturn deepmerge_1;\n\n})));\n"],"sourceRoot":""}