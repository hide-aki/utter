{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-link-http-common/lib/index.js"],"names":["__webpack_require__","d","__webpack_exports__","fallbackHttpConfig","parseAndCheckHttpResponse","checkFetcher","createSignalIfSupported","selectHttpOptionsAndBody","serializeFetchParameter","selectURI","graphql_language_printer__WEBPACK_IMPORTED_MODULE_0__","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","http","includeQuery","includeExtensions","headers","accept","content-type","options","method","throwServerError","response","result","message","error","Error","name","statusCode","status","operations","text","then","bodyText","JSON","parse","err","parseError","Promise","reject","Array","isArray","map","op","operationName","fetcher","fetch","library","window","AbortController","controller","signal","operation","fallbackConfig","configs","_i","credentials","forEach","config","extensions","variables","query","body","label","serialized","stringify","e","fallbackURI","contextURI","getContext","uri"],"mappings":"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","file":"bundle.npm.apollo-link-http-common.98fb90a33c5e47a044bd.js","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { print } from 'graphql/language/printer';\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n};\nvar defaultHeaders = {\n    // headers are case insensitive (https://stackoverflow.com/a/5259004)\n    accept: '*/*',\n    'content-type': 'application/json',\n};\nvar defaultOptions = {\n    method: 'POST',\n};\nexport var fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions,\n};\nexport var throwServerError = function (response, result, message) {\n    var error = new Error(message);\n    error.name = 'ServerError';\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n};\n//TODO: when conditional types come in ts 2.8, operations should be a generic type that extends Operation | Array<Operation>\nexport var parseAndCheckHttpResponse = function (operations) { return function (response) {\n    return (response\n        .text()\n        .then(function (bodyText) {\n        try {\n            return JSON.parse(bodyText);\n        }\n        catch (err) {\n            var parseError = err;\n            parseError.name = 'ServerParseError';\n            parseError.response = response;\n            parseError.statusCode = response.status;\n            parseError.bodyText = bodyText;\n            return Promise.reject(parseError);\n        }\n    })\n        //TODO: when conditional types come out then result should be T extends Array ? Array<FetchResult> : FetchResult\n        .then(function (result) {\n        if (response.status >= 300) {\n            //Network error\n            throwServerError(response, result, \"Response not successful: Received status code \" + response.status);\n        }\n        //TODO should really error per response in a Batch based on properties\n        //    - could be done in a validation link\n        if (!Array.isArray(result) &&\n            !result.hasOwnProperty('data') &&\n            !result.hasOwnProperty('errors')) {\n            //Data error\n            throwServerError(response, result, \"Server response was missing for query '\" + (Array.isArray(operations)\n                ? operations.map(function (op) { return op.operationName; })\n                : operations.operationName) + \"'.\");\n        }\n        return result;\n    }));\n}; };\nexport var checkFetcher = function (fetcher) {\n    if (!fetcher && typeof fetch === 'undefined') {\n        var library = 'unfetch';\n        if (typeof window === 'undefined')\n            library = 'node-fetch';\n        throw new Error(\"\\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\\nyour environment like https://www.npmjs.com/package/\" + library + \".\\n\\nFor example:\\nimport fetch from '\" + library + \"';\\nimport { createHttpLink } from 'apollo-link-http';\\n\\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });\");\n    }\n};\nexport var createSignalIfSupported = function () {\n    if (typeof AbortController === 'undefined')\n        return { controller: false, signal: false };\n    var controller = new AbortController();\n    var signal = controller.signal;\n    return { controller: controller, signal: signal };\n};\nexport var selectHttpOptionsAndBody = function (operation, fallbackConfig) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = __assign({}, fallbackConfig.options, { headers: fallbackConfig.headers, credentials: fallbackConfig.credentials });\n    var http = fallbackConfig.http;\n    /*\n     * use the rest of the configs to populate the options\n     * configs later in the list will overwrite earlier fields\n     */\n    configs.forEach(function (config) {\n        options = __assign({}, options, config.options, { headers: __assign({}, options.headers, config.headers) });\n        if (config.credentials)\n            options.credentials = config.credentials;\n        http = __assign({}, http, config.http);\n    });\n    //The body depends on the http options\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = { operationName: operationName, variables: variables };\n    if (http.includeExtensions)\n        body.extensions = extensions;\n    // not sending the query (i.e persisted queries)\n    if (http.includeQuery)\n        body.query = print(query);\n    return {\n        options: options,\n        body: body,\n    };\n};\nexport var serializeFetchParameter = function (p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    }\n    catch (e) {\n        var parseError = new Error(\"Network request failed. \" + label + \" is not serializable: \" + e.message);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n};\n//selects \"/graphql\" by default\nexport var selectURI = function (operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    }\n    else if (typeof fallbackURI === 'function') {\n        return fallbackURI(operation);\n    }\n    else {\n        return fallbackURI || '/graphql';\n    }\n};\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}