{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-link-dedup/lib/dedupLink.js","webpack:////var/www/html/utter/node_modules/apollo-link-dedup/lib/index.js"],"names":["extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","this","constructor","prototype","create","dedupLink_DedupLink","_super","DedupLink","_this","apply","arguments","inFlightRequestObservables","Map","subscribers","request","operation","forward","getContext","forceFetch","key","toKey","cleanup","operationKey","delete","get","subscription_1","singleObserver_1","sharedObserver","lib","observer","prev","next","error","complete","set","concat","bind","subscribe","result","previous","forEach","err","unsubscribe","__webpack_require__","__webpack_exports__"],"mappings":"gGACAA,cADAC,GACAD,EAAA,SAAAE,EAAAC,GAIA,OAHAH,EAAAI,OAAAC,gBACA,CAAcC,UAAA,cAAgBC,OAAA,SAAAL,EAAAC,GAAsCD,EAAAI,UAAAH,IACpE,SAAAD,EAAAC,GAA6B,QAAAK,KAAAL,IAAAM,eAAAD,KAAAN,EAAAM,GAAAL,EAAAK,MAC7BN,EAAAC,IAEA,SAAAD,EAAAC,GAEA,SAAAO,IAAuBC,KAAAC,YAAAV,EADvBF,EAAAE,EAAAC,GAEAD,EAAAW,UAAA,OAAAV,EAAAC,OAAAU,OAAAX,IAAAO,EAAAG,UAAAV,EAAAU,UAAA,IAAAH,KAOIK,EAAS,SAAAC,GAEb,SAAAC,IACA,IAAAC,EAAA,OAAAF,KAAAG,MAAAR,KAAAS,YAAAT,KAGA,OAFAO,EAAAG,2BAAA,IAAAC,IACAJ,EAAAK,YAAA,IAAAD,IACAJ,EA2DA,OAhEAjB,EAAAgB,EAAAD,GAOAC,EAAAJ,UAAAW,QAAA,SAAAC,EAAAC,GACA,IAAAR,EAAAP,KAEA,GAAAc,EAAAE,aAAAC,WACA,OAAAF,EAAAD,GAEA,IAAAI,EAAAJ,EAAAK,QACAC,EAAA,SAAAC,GAGA,OAFAd,EAAAG,2BAAAY,OAAAD,GACAd,EAAAK,YAAAW,IAAAF,IAGA,IAAArB,KAAAU,2BAAAa,IAAAL,GAAA,CAGA,IACAM,EADAC,EAAAV,EAAAD,GAEAY,EAAA,IAAqCC,EAAA,EAAU,SAAAC,GAG/C,IAAAC,EAAAtB,EAAAK,YAAAW,IAAAL,GA0BA,OAzBAW,IACAA,EAAA,CAA4BC,KAAA,GAAAC,MAAA,GAAAC,SAAA,KAC5BzB,EAAAK,YAAAqB,IAAAf,EAAA,CACAY,KAAAD,EAAAC,KAAAI,OAAA,CAAAN,EAAAE,KAAAK,KAAAP,KACAG,MAAAF,EAAAE,MAAAG,OAAA,CAAAN,EAAAG,MAAAI,KAAAP,KACAI,SAAAH,EAAAG,SAAAE,OAAA,CAAAN,EAAAI,SAAAG,KAAAP,OAEAJ,IACAA,EAAAC,EAAAW,UAAA,CACAN,KAAA,SAAAO,GACA,IAAAC,EAAAlB,EAAAF,GACAX,EAAAK,YAAAU,OAAAJ,GACAoB,IACAA,EAAAR,KAAAS,QAAA,SAAAT,GAAuE,OAAAA,EAAAO,KACvEC,EAAAN,SAAAO,QAAA,SAAAP,GAA+E,OAAAA,QAG/ED,MAAA,SAAAA,GACA,IAAAO,EAAAlB,EAAAF,GACAX,EAAAK,YAAAU,OAAAJ,GACAoB,GACAA,EAAAP,MAAAQ,QAAA,SAAAC,GAAuE,OAAAA,EAAAT,SAIvE,WACAP,GACAA,EAAAiB,cACAlC,EAAAG,2BAAAY,OAAAJ,MAGAlB,KAAAU,2BAAAuB,IAAAf,EAAAQ,GAGA,OAAA1B,KAAAU,2BAAAa,IAAAL,IAEAZ,EAjEa,CAkEXqB,EAAA,GCnFFe,EAAAnD,EAAAoD,EAAA,sBAAAvC","file":"bundle.npm.apollo-link-dedup.1df9589ad26e5e60d440.js","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ApolloLink, Observable, } from 'apollo-link';\n/*\n * Expects context to contain the forceFetch field if no dedup\n */\nvar DedupLink = /** @class */ (function (_super) {\n    __extends(DedupLink, _super);\n    function DedupLink() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inFlightRequestObservables = new Map();\n        _this.subscribers = new Map();\n        return _this;\n    }\n    DedupLink.prototype.request = function (operation, forward) {\n        var _this = this;\n        // sometimes we might not want to deduplicate a request, for example when we want to force fetch it.\n        if (operation.getContext().forceFetch) {\n            return forward(operation);\n        }\n        var key = operation.toKey();\n        var cleanup = function (operationKey) {\n            _this.inFlightRequestObservables.delete(operationKey);\n            var prev = _this.subscribers.get(operationKey);\n            return prev;\n        };\n        if (!this.inFlightRequestObservables.get(key)) {\n            // this is a new request, i.e. we haven't deduplicated it yet\n            // call the next link\n            var singleObserver_1 = forward(operation);\n            var subscription_1;\n            var sharedObserver = new Observable(function (observer) {\n                // this will still be called by each subscriber regardless of\n                // deduplication status\n                var prev = _this.subscribers.get(key);\n                if (!prev)\n                    prev = { next: [], error: [], complete: [] };\n                _this.subscribers.set(key, {\n                    next: prev.next.concat([observer.next.bind(observer)]),\n                    error: prev.error.concat([observer.error.bind(observer)]),\n                    complete: prev.complete.concat([observer.complete.bind(observer)]),\n                });\n                if (!subscription_1) {\n                    subscription_1 = singleObserver_1.subscribe({\n                        next: function (result) {\n                            var previous = cleanup(key);\n                            _this.subscribers.delete(key);\n                            if (previous) {\n                                previous.next.forEach(function (next) { return next(result); });\n                                previous.complete.forEach(function (complete) { return complete(); });\n                            }\n                        },\n                        error: function (error) {\n                            var previous = cleanup(key);\n                            _this.subscribers.delete(key);\n                            if (previous)\n                                previous.error.forEach(function (err) { return err(error); });\n                        },\n                    });\n                }\n                return function () {\n                    if (subscription_1)\n                        subscription_1.unsubscribe();\n                    _this.inFlightRequestObservables.delete(key);\n                };\n            });\n            this.inFlightRequestObservables.set(key, sharedObserver);\n        }\n        // return shared Observable\n        return this.inFlightRequestObservables.get(key);\n    };\n    return DedupLink;\n}(ApolloLink));\nexport { DedupLink };\n//# sourceMappingURL=dedupLink.js.map","export * from './dedupLink';\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}