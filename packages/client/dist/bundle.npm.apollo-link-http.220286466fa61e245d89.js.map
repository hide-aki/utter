{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-link-http/lib/httpLink.js","webpack:////var/www/html/utter/node_modules/apollo-link-http/lib/index.js"],"names":["extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__rest","e","indexOf","getOwnPropertySymbols","createHttpLink","linkOptions","_a","uri","fetcher","fetch","includeExtensions","useGETForQueries","requestOptions","apollo_link_http_common_lib","linkConfig","http","options","fetchOptions","credentials","headers","lib","operation","chosenURI","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","name","version","controller","contextHeaders","contextConfig","_b","body","signal","_c","_controller","query","definitions","some","kind","method","_d","queryParams","addQueryParam","key","value","push","encodeURIComponent","operationName","variables","serializedVariables","parseError","extensions","serializedExtensions","fragment","preFragment","fragmentStart","substr","queryParamsPrefix","newURI","join","rewriteURIForGET","observer","then","response","setContext","result","next","complete","catch","err","errors","data","error","abort","HttpLink","_super","opts","request","__webpack_require__","__webpack_exports__"],"mappings":"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","file":"bundle.npm.apollo-link-http.220286466fa61e245d89.js","sourcesContent":["/* tslint:disable */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { ApolloLink, Observable, fromError } from 'apollo-link';\nimport { serializeFetchParameter, selectURI, parseAndCheckHttpResponse, checkFetcher, selectHttpOptionsAndBody, createSignalIfSupported, fallbackHttpConfig, } from 'apollo-link-http-common';\nexport var createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, \n    // use default global fetch is nothing passed in\n    fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n    // dev warnings to ensure fetch is present\n    checkFetcher(fetcher);\n    //fetcher is set here rather than the destructuring to ensure fetch is\n    //declared before referencing it. Reference in the destructuring would cause\n    //a ReferenceError\n    if (!fetcher) {\n        fetcher = fetch;\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        // `apollographql-client-*` headers are automatically set if a\n        // `clientAwareness` object is found in the context. These headers are\n        // set first, followed by the rest of the headers pulled from\n        // `context.headers`. If desired, `apollographql-client-*` headers set by\n        // the `clientAwareness` object can be overridden by\n        // `apollographql-client-*` headers set in `context.headers`.\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders['apollographql-client-name'] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders['apollographql-client-version'] = version;\n            }\n        }\n        var contextHeaders = __assign({}, clientAwarenessHeaders, context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        //uses fallback, link, and then context to build options\n        var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        var controller;\n        if (!options.signal) {\n            var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;\n            controller = _controller;\n            if (controller)\n                options.signal = signal;\n        }\n        // If requested, set method to GET if there are no mutations.\n        var definitionIsMutation = function (d) {\n            return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n        };\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = 'GET';\n        }\n        if (options.method === 'GET') {\n            var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;\n            if (parseError) {\n                return fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, 'Payload');\n            }\n            catch (parseError) {\n                return fromError(parseError);\n            }\n        }\n        return new Observable(function (observer) {\n            fetcher(chosenURI, options)\n                .then(function (response) {\n                operation.setContext({ response: response });\n                return response;\n            })\n                .then(parseAndCheckHttpResponse(operation))\n                .then(function (result) {\n                // we have data and can send it to back up the link chain\n                observer.next(result);\n                observer.complete();\n                return result;\n            })\n                .catch(function (err) {\n                // fetch was cancelled so its already been cleaned up in the unsubscribe\n                if (err.name === 'AbortError')\n                    return;\n                // if it is a network error, BUT there is graphql result info\n                // fire the next observer before calling error\n                // this gives apollo-client (and react-apollo) the `graphqlErrors` and `networErrors`\n                // to pass to UI\n                // this should only happen if we *also* have data as part of the response key per\n                // the spec\n                if (err.result && err.result.errors && err.result.data) {\n                    // if we dont' call next, the UI can only show networkError because AC didn't\n                    // get andy graphqlErrors\n                    // this is graphql execution result info (i.e errors and possibly data)\n                    // this is because there is no formal spec how errors should translate to\n                    // http status codes. So an auth error (401) could have both data\n                    // from a public field, errors from a private field, and a status of 401\n                    // {\n                    //  user { // this will have errors\n                    //    firstName\n                    //  }\n                    //  products { // this is public so will have data\n                    //    cost\n                    //  }\n                    // }\n                    //\n                    // the result of above *could* look like this:\n                    // {\n                    //   data: { products: [{ cost: \"$10\" }] },\n                    //   errors: [{\n                    //      message: 'your session has timed out',\n                    //      path: []\n                    //   }]\n                    // }\n                    // status code of above would be a 401\n                    // in the UI you want to show data where you can, errors as data where you can\n                    // and use correct http status codes\n                    observer.next(err.result);\n                }\n                observer.error(err);\n            });\n            return function () {\n                // XXX support canceling this request\n                // https://developers.google.com/web/updates/2017/09/abortable-fetch\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nfunction rewriteURIForGET(chosenURI, body) {\n    // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n    // the extra level of JSON serialization!\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(key + \"=\" + encodeURIComponent(value));\n    };\n    if ('query' in body) {\n        addQueryParam('query', body.query);\n    }\n    if (body.operationName) {\n        addQueryParam('operationName', body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('variables', serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('extensions', serializedExtensions);\n    }\n    // Reconstruct the URI with added query params.\n    // XXX This assumes that the URI is well-formed and that it doesn't\n    //     already contain any of these query params. We could instead use the\n    //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n    //     don't support URLSearchParams. Note that some browsers (and\n    //     versions of whatwg-url) support URL but not URLSearchParams!\n    var fragment = '', preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf('#');\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n    return { newURI: newURI };\n}\nvar HttpLink = /** @class */ (function (_super) {\n    __extends(HttpLink, _super);\n    function HttpLink(opts) {\n        return _super.call(this, createHttpLink(opts).request) || this;\n    }\n    return HttpLink;\n}(ApolloLink));\nexport { HttpLink };\n//# sourceMappingURL=httpLink.js.map","export * from './httpLink';\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}