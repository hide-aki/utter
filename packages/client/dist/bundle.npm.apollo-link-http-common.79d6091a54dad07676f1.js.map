{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-link-http-common/lib/bundle.esm.js"],"names":["__webpack_require__","d","__webpack_exports__","fallbackHttpConfig","parseAndCheckHttpResponse","checkFetcher","createSignalIfSupported","selectHttpOptionsAndBody","serializeFetchParameter","selectURI","tslib__WEBPACK_IMPORTED_MODULE_0__","graphql_language_printer__WEBPACK_IMPORTED_MODULE_1__","ts_invariant__WEBPACK_IMPORTED_MODULE_2__","http","includeQuery","includeExtensions","headers","accept","content-type","options","method","throwServerError","response","result","message","error","Error","name","statusCode","status","operations","text","then","bodyText","JSON","parse","err","parseError","Promise","reject","Array","isArray","hasOwnProperty","map","op","operationName","fetcher","fetch","window","AbortController","controller","signal","operation","fallbackConfig","configs","_i","arguments","length","Object","credentials","forEach","config","extensions","variables","query","body","p","label","serialized","stringify","e","fallbackURI","contextURI","getContext","uri"],"mappings":"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","file":"bundle.npm.apollo-link-http-common.79d6091a54dad07676f1.js","sourcesContent":["import { __assign } from 'tslib';\nimport { print } from 'graphql/language/printer';\nimport { InvariantError } from 'ts-invariant';\n\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n};\nvar defaultHeaders = {\n    accept: '*/*',\n    'content-type': 'application/json',\n};\nvar defaultOptions = {\n    method: 'POST',\n};\nvar fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions,\n};\nvar throwServerError = function (response, result, message) {\n    var error = new Error(message);\n    error.name = 'ServerError';\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n};\nvar parseAndCheckHttpResponse = function (operations) { return function (response) {\n    return (response\n        .text()\n        .then(function (bodyText) {\n        try {\n            return JSON.parse(bodyText);\n        }\n        catch (err) {\n            var parseError = err;\n            parseError.name = 'ServerParseError';\n            parseError.response = response;\n            parseError.statusCode = response.status;\n            parseError.bodyText = bodyText;\n            return Promise.reject(parseError);\n        }\n    })\n        .then(function (result) {\n        if (response.status >= 300) {\n            throwServerError(response, result, \"Response not successful: Received status code \" + response.status);\n        }\n        if (!Array.isArray(result) &&\n            !result.hasOwnProperty('data') &&\n            !result.hasOwnProperty('errors')) {\n            throwServerError(response, result, \"Server response was missing for query '\" + (Array.isArray(operations)\n                ? operations.map(function (op) { return op.operationName; })\n                : operations.operationName) + \"'.\");\n        }\n        return result;\n    }));\n}; };\nvar checkFetcher = function (fetcher) {\n    if (!fetcher && typeof fetch === 'undefined') {\n        var library = 'unfetch';\n        if (typeof window === 'undefined')\n            library = 'node-fetch';\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"\\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\\nyour environment like https://www.npmjs.com/package/\" + library + \".\\n\\nFor example:\\nimport fetch from '\" + library + \"';\\nimport { createHttpLink } from 'apollo-link-http';\\n\\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });\");\n    }\n};\nvar createSignalIfSupported = function () {\n    if (typeof AbortController === 'undefined')\n        return { controller: false, signal: false };\n    var controller = new AbortController();\n    var signal = controller.signal;\n    return { controller: controller, signal: signal };\n};\nvar selectHttpOptionsAndBody = function (operation, fallbackConfig) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = __assign({}, fallbackConfig.options, { headers: fallbackConfig.headers, credentials: fallbackConfig.credentials });\n    var http = fallbackConfig.http;\n    configs.forEach(function (config) {\n        options = __assign({}, options, config.options, { headers: __assign({}, options.headers, config.headers) });\n        if (config.credentials)\n            options.credentials = config.credentials;\n        http = __assign({}, http, config.http);\n    });\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = { operationName: operationName, variables: variables };\n    if (http.includeExtensions)\n        body.extensions = extensions;\n    if (http.includeQuery)\n        body.query = print(query);\n    return {\n        options: options,\n        body: body,\n    };\n};\nvar serializeFetchParameter = function (p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    }\n    catch (e) {\n        var parseError = process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"Network request failed. \" + label + \" is not serializable: \" + e.message);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n};\nvar selectURI = function (operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    }\n    else if (typeof fallbackURI === 'function') {\n        return fallbackURI(operation);\n    }\n    else {\n        return fallbackURI || '/graphql';\n    }\n};\n\nexport { fallbackHttpConfig, throwServerError, parseAndCheckHttpResponse, checkFetcher, createSignalIfSupported, selectHttpOptionsAndBody, serializeFetchParameter, selectURI };\n//# sourceMappingURL=bundle.esm.js.map\n"],"sourceRoot":""}