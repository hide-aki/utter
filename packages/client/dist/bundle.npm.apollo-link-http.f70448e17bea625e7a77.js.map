{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-link-http/lib/bundle.esm.js"],"names":["__webpack_require__","d","__webpack_exports__","HttpLink","tslib__WEBPACK_IMPORTED_MODULE_0__","apollo_link__WEBPACK_IMPORTED_MODULE_1__","apollo_link__WEBPACK_IMPORTED_MODULE_2__","apollo_link_http_common__WEBPACK_IMPORTED_MODULE_3__","createHttpLink","linkOptions","_a","uri","fetcher","fetch","includeExtensions","useGETForQueries","requestOptions","Object","linkConfig","http","options","fetchOptions","credentials","headers","operation","chosenURI","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","name","version","controller","contextHeaders","contextConfig","_b","body","signal","_c","_controller","query","definitions","some","kind","method","_d","queryParams","addQueryParam","key","value","push","encodeURIComponent","operationName","variables","serializedVariables","parseError","extensions","serializedExtensions","fragment","preFragment","fragmentStart","indexOf","substr","queryParamsPrefix","newURI","join","rewriteURIForGET","observer","then","response","setContext","result","next","complete","catch","err","errors","data","error","abort","_super","opts","call","this","request"],"mappings":"8FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,QAAAK,EAAAL,EAAA,QAAAM,EAAAN,EAAA,QAAAO,EAAAP,EAAA,QAIAQ,EAAA,SAAAC,QACA,IAAAA,IAAiCA,EAAA,IACjC,IAAAC,EAAAD,EAAAE,WAAA,IAAAD,EAAA,WAAAA,EAAAE,EAAAH,EAAAI,MAAAC,EAAAL,EAAAK,kBAAAC,EAAAN,EAAAM,iBAAAC,EAAuNC,OAAAb,EAAA,EAAAa,CAAMR,EAAA,wDACzNQ,OAAAV,EAAA,EAAAU,CAAYL,GAChBA,IACAA,EAAAC,OAEA,IAAAK,EAAA,CACAC,KAAA,CAAeL,qBACfM,QAAAJ,EAAAK,aACAC,YAAAN,EAAAM,YACAC,QAAAP,EAAAO,SAEA,WAAelB,EAAA,EAAU,SAAAmB,GACzB,IAAAC,EAAwBR,OAAAV,EAAA,EAAAU,CAASO,EAAAb,GACjCe,EAAAF,EAAAG,aACAC,EAAA,GACA,GAAAF,EAAAG,gBAAA,CACA,IAAAnB,EAAAgB,EAAAG,gBAAAC,EAAApB,EAAAqB,KAAAC,EAAAtB,EAAAsB,QACAF,IACAF,EAAA,6BAAAE,GAEAE,IACAJ,EAAA,gCAAAI,GAGA,IAQAC,EARAC,EAA6BjB,OAAAb,EAAA,EAAAa,CAAQ,GAAGW,EAAAF,EAAAH,SACxCY,EAAA,CACAhB,KAAAO,EAAAP,KACAC,QAAAM,EAAAL,aACAC,YAAAI,EAAAJ,YACAC,QAAAW,GAEAE,EAAiBnB,OAAAV,EAAA,EAAAU,CAAwBO,EAAYjB,EAAA,EAAkBW,EAAAiB,GAAAf,EAAAgB,EAAAhB,QAAAiB,EAAAD,EAAAC,KAEvE,IAAAjB,EAAAkB,OAAA,CACA,IAAAC,EAAqBtB,OAAAV,EAAA,EAAAU,GAAuBuB,EAAAD,EAAAN,WAAAK,EAAAC,EAAAD,QAC5CL,EAAAO,KAEApB,EAAAkB,UASA,GAJAvB,IACAS,EAAAiB,MAAAC,YAAAC,KAJA,SAAA1C,GACA,8BAAAA,EAAA2C,MAAA,aAAA3C,EAAAuB,cAIAJ,EAAAyB,OAAA,OAEA,QAAAzB,EAAAyB,OAAA,CACA,IAAAC,EAyCA,SAAArB,EAAAY,GACA,IAAAU,EAAA,GACAC,EAAA,SAAAC,EAAAC,GACAH,EAAAI,KAAAF,EAAA,IAAAG,mBAAAF,KAEA,UAAAb,GACAW,EAAA,QAAAX,EAAAI,OAEAJ,EAAAgB,eACAL,EAAA,gBAAAX,EAAAgB,eAEA,GAAAhB,EAAAiB,UAAA,CACA,IAAAC,OAAA,EACA,IACAA,EAAkCtC,OAAAV,EAAA,EAAAU,CAAuBoB,EAAAiB,UAAA,iBAEzD,MAAAE,GACA,OAAoBA,cAEpBR,EAAA,YAAAO,GAEA,GAAAlB,EAAAoB,WAAA,CACA,IAAAC,OAAA,EACA,IACAA,EAAmCzC,OAAAV,EAAA,EAAAU,CAAuBoB,EAAAoB,WAAA,kBAE1D,MAAAD,GACA,OAAoBA,cAEpBR,EAAA,aAAAU,GAEA,IAAAC,EAAA,GAAAC,EAAAnC,EACAoC,EAAApC,EAAAqC,QAAA,MACA,IAAAD,IACAF,EAAAlC,EAAAsC,OAAAF,GACAD,EAAAnC,EAAAsC,OAAA,EAAAF,IAEA,IAAAG,GAAA,IAAAJ,EAAAE,QAAA,aAEA,OAAYG,OADZL,EAAAI,EAAAjB,EAAAmB,KAAA,KAAAP,GA/EAQ,CAAA1C,EAAAY,GAAA4B,EAAAnB,EAAAmB,OAAAT,EAAAV,EAAAU,WACA,GAAAA,EACA,OAAuBvC,OAAAZ,EAAA,EAAAY,CAASuC,GAEhC/B,EAAAwC,OAGA,IACA7C,EAAAiB,KAA+BpB,OAAAV,EAAA,EAAAU,CAAuBoB,EAAA,WAEtD,MAAAmB,GACA,OAAuBvC,OAAAZ,EAAA,EAAAY,CAASuC,GAGhC,WAAmBlD,EAAA,EAAU,SAAA8D,GAoB7B,OAnBAxD,EAAAa,EAAAL,GACAiD,KAAA,SAAAC,GAEA,OADA9C,EAAA+C,WAAA,CAAsCD,aACtCA,IAEAD,KAAsBpD,OAAAV,EAAA,EAAAU,CAAyBO,IAC/C6C,KAAA,SAAAG,GAGA,OAFAJ,EAAAK,KAAAD,GACAJ,EAAAM,WACAF,IAEAG,MAAA,SAAAC,GACA,eAAAA,EAAA7C,OAEA6C,EAAAJ,QAAAI,EAAAJ,OAAAK,QAAAD,EAAAJ,OAAAM,MACAV,EAAAK,KAAAG,EAAAJ,QAEAJ,EAAAW,MAAAH,MAEA,WACA3C,GACAA,EAAA+C,cA8CA,IAAA7E,EAAA,SAAA8E,GAEA,SAAA9E,EAAA+E,GACA,OAAAD,EAAAE,KAAAC,KAAA5E,EAAA0E,GAAAG,UAAAD,KAEA,OAJInE,OAAAb,EAAA,EAAAa,CAASd,EAAA8E,GAIb9E,EALA,CAMEE,EAAA","file":"bundle.npm.apollo-link-http.f70448e17bea625e7a77.js","sourcesContent":["import { __rest, __assign, __extends } from 'tslib';\nimport { ApolloLink, fromError, Observable } from 'apollo-link';\nimport { checkFetcher, selectURI, selectHttpOptionsAndBody, fallbackHttpConfig, createSignalIfSupported, serializeFetchParameter, parseAndCheckHttpResponse } from 'apollo-link-http-common';\n\nvar createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n    checkFetcher(fetcher);\n    if (!fetcher) {\n        fetcher = fetch;\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders['apollographql-client-name'] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders['apollographql-client-version'] = version;\n            }\n        }\n        var contextHeaders = __assign({}, clientAwarenessHeaders, context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        var controller;\n        if (!options.signal) {\n            var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;\n            controller = _controller;\n            if (controller)\n                options.signal = signal;\n        }\n        var definitionIsMutation = function (d) {\n            return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n        };\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = 'GET';\n        }\n        if (options.method === 'GET') {\n            var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;\n            if (parseError) {\n                return fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, 'Payload');\n            }\n            catch (parseError) {\n                return fromError(parseError);\n            }\n        }\n        return new Observable(function (observer) {\n            fetcher(chosenURI, options)\n                .then(function (response) {\n                operation.setContext({ response: response });\n                return response;\n            })\n                .then(parseAndCheckHttpResponse(operation))\n                .then(function (result) {\n                observer.next(result);\n                observer.complete();\n                return result;\n            })\n                .catch(function (err) {\n                if (err.name === 'AbortError')\n                    return;\n                if (err.result && err.result.errors && err.result.data) {\n                    observer.next(err.result);\n                }\n                observer.error(err);\n            });\n            return function () {\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\nfunction rewriteURIForGET(chosenURI, body) {\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(key + \"=\" + encodeURIComponent(value));\n    };\n    if ('query' in body) {\n        addQueryParam('query', body.query);\n    }\n    if (body.operationName) {\n        addQueryParam('operationName', body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('variables', serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('extensions', serializedExtensions);\n    }\n    var fragment = '', preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf('#');\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n    return { newURI: newURI };\n}\nvar HttpLink = (function (_super) {\n    __extends(HttpLink, _super);\n    function HttpLink(opts) {\n        return _super.call(this, createHttpLink(opts).request) || this;\n    }\n    return HttpLink;\n}(ApolloLink));\n\nexport { createHttpLink, HttpLink };\n//# sourceMappingURL=bundle.esm.js.map\n"],"sourceRoot":""}