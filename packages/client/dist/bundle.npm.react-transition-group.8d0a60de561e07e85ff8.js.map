{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/react-transition-group/utils/PropTypes.js","webpack:////var/www/html/utter/node_modules/react-transition-group/utils/ChildMapping.js","webpack:////var/www/html/utter/node_modules/react-transition-group/Transition.js","webpack:////var/www/html/utter/node_modules/react-transition-group/TransitionGroup.js"],"names":["exports","__esModule","classNamesShape","timeoutsShape","obj","__webpack_require__","getChildMapping","mergeChildMappings","getInitialChildMapping","props","onExited","children","child","_react","cloneElement","bind","in","appear","getProp","enter","exit","getNextChildMapping","nextProps","prevChildMapping","nextChildMapping","Object","keys","forEach","key","isValidElement","hasPrev","hasNext","prevChild","isLeaving","mapFn","result","create","Children","map","c","mapper","prev","next","getValueForKey","i","nextKeysPending","pendingKeys","prevKey","length","push","childMapping","nextKey","pendingNextKey","prop","default","EXITING","ENTERED","ENTERING","EXITED","UNMOUNTED","PropTypes","newObj","prototype","hasOwnProperty","call","desc","defineProperty","getOwnPropertyDescriptor","get","set","_interopRequireWildcard","_interopRequireDefault","_reactDom","_reactLifecyclesCompat","Transition","_React$Component","subClass","superClass","context","_this","this","initialStatus","parentGroup","transitionGroup","isMounting","appearStatus","unmountOnExit","mountOnEnter","state","status","nextCallback","constructor","__proto__","_proto","getChildContext","getDerivedStateFromProps","_ref","prevState","componentDidMount","updateStatus","componentDidUpdate","prevProps","nextStatus","componentWillUnmount","cancelNextCallback","getTimeouts","timeout","mounting","node","findDOMNode","performEnter","performExit","setState","_this2","appearing","timeouts","onEnter","safeSetState","onEntering","onTransitionEnd","onEntered","_this3","onExit","onExiting","cancel","nextState","callback","setNextCallback","_this4","active","event","handler","addEndListener","setTimeout","render","_this$props","childProps","source","excluded","target","sourceKeys","indexOf","_objectWithoutPropertiesLoose","only","Component","noop","contextTypes","object","childContextTypes","propTypes","defaultProps","_default","polyfill","_propTypes","_ChildMapping","_extends","assign","arguments","apply","_assertThisInitialized","self","ReferenceError","values","k","TransitionGroup","handleExited","firstRender","appeared","mounted","currentChildMapping","component","childFactory","createElement","isRequired","module"],"mappings":"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","file":"bundle.npm.react-transition-group.8d0a60de561e07e85ff8.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.classNamesShape = exports.timeoutsShape = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar timeoutsShape = process.env.NODE_ENV !== 'production' ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({\n  enter: _propTypes.default.number,\n  exit: _propTypes.default.number\n}).isRequired]) : null;\nexports.timeoutsShape = timeoutsShape;\nvar classNamesShape = process.env.NODE_ENV !== 'production' ? _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({\n  enter: _propTypes.default.string,\n  exit: _propTypes.default.string,\n  active: _propTypes.default.string\n}), _propTypes.default.shape({\n  enter: _propTypes.default.string,\n  enterDone: _propTypes.default.string,\n  enterActive: _propTypes.default.string,\n  exit: _propTypes.default.string,\n  exitDone: _propTypes.default.string,\n  exitActive: _propTypes.default.string\n})]) : null;\nexports.classNamesShape = classNamesShape;","\"use strict\";\n\nexports.__esModule = true;\nexports.getChildMapping = getChildMapping;\nexports.mergeChildMappings = mergeChildMappings;\nexports.getInitialChildMapping = getInitialChildMapping;\nexports.getNextChildMapping = getNextChildMapping;\n\nvar _react = require(\"react\");\n\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {*} children `this.props.children`\n * @return {object} Mapping of key to child\n */\nfunction getChildMapping(children, mapFn) {\n  var mapper = function mapper(child) {\n    return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;\n  };\n\n  var result = Object.create(null);\n  if (children) _react.Children.map(children, function (c) {\n    return c;\n  }).forEach(function (child) {\n    // run the map function here instead so that the key is the computed one\n    result[child.key] = mapper(child);\n  });\n  return result;\n}\n/**\n * When you're adding or removing children some may be added or removed in the\n * same render pass. We want to show *both* since we want to simultaneously\n * animate elements in and out. This function takes a previous set of keys\n * and a new set of keys and merges them with its best guess of the correct\n * ordering. In the future we may expose some of the utilities in\n * ReactMultiChild to make this easy, but for now React itself does not\n * directly have this concept of the union of prevChildren and nextChildren\n * so we implement it here.\n *\n * @param {object} prev prev children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @param {object} next next children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @return {object} a key set that contains all keys in `prev` and all keys\n * in `next` in a reasonable order.\n */\n\n\nfunction mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n\n  function getValueForKey(key) {\n    return key in next ? next[key] : prev[key];\n  } // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n\n\n  var nextKeysPending = Object.create(null);\n  var pendingKeys = [];\n\n  for (var prevKey in prev) {\n    if (prevKey in next) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n\n  var i;\n  var childMapping = {};\n\n  for (var nextKey in next) {\n    if (nextKeysPending[nextKey]) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n\n    childMapping[nextKey] = getValueForKey(nextKey);\n  } // Finally, add the keys which didn't appear before any key in `next`\n\n\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n\n  return childMapping;\n}\n\nfunction getProp(child, prop, props) {\n  return props[prop] != null ? props[prop] : child.props[prop];\n}\n\nfunction getInitialChildMapping(props, onExited) {\n  return getChildMapping(props.children, function (child) {\n    return (0, _react.cloneElement)(child, {\n      onExited: onExited.bind(null, child),\n      in: true,\n      appear: getProp(child, 'appear', props),\n      enter: getProp(child, 'enter', props),\n      exit: getProp(child, 'exit', props)\n    });\n  });\n}\n\nfunction getNextChildMapping(nextProps, prevChildMapping, onExited) {\n  var nextChildMapping = getChildMapping(nextProps.children);\n  var children = mergeChildMappings(prevChildMapping, nextChildMapping);\n  Object.keys(children).forEach(function (key) {\n    var child = children[key];\n    if (!(0, _react.isValidElement)(child)) return;\n    var hasPrev = key in prevChildMapping;\n    var hasNext = key in nextChildMapping;\n    var prevChild = prevChildMapping[key];\n    var isLeaving = (0, _react.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)\n\n    if (hasNext && (!hasPrev || isLeaving)) {\n      // console.log('entering', key)\n      children[key] = (0, _react.cloneElement)(child, {\n        onExited: onExited.bind(null, child),\n        in: true,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    } else if (!hasNext && hasPrev && !isLeaving) {\n      // item is old (exiting)\n      // console.log('leaving', key)\n      children[key] = (0, _react.cloneElement)(child, {\n        in: false\n      });\n    } else if (hasNext && hasPrev && (0, _react.isValidElement)(prevChild)) {\n      // item hasn't changed transition states\n      // copy over the last transition props;\n      // console.log('unchanged', key)\n      children[key] = (0, _react.cloneElement)(child, {\n        onExited: onExited.bind(null, child),\n        in: prevChild.props.in,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    }\n  });\n  return children;\n}","\"use strict\";\n\nexports.__esModule = true;\nexports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;\n\nvar PropTypes = _interopRequireWildcard(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _reactLifecyclesCompat = require(\"react-lifecycles-compat\");\n\nvar _PropTypes = require(\"./utils/PropTypes\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar UNMOUNTED = 'unmounted';\nexports.UNMOUNTED = UNMOUNTED;\nvar EXITED = 'exited';\nexports.EXITED = EXITED;\nvar ENTERING = 'entering';\nexports.ENTERING = ENTERING;\nvar ENTERED = 'entered';\nexports.ENTERED = ENTERED;\nvar EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the components.\n * It's up to you to give meaning and effect to those states. For example we can\n * add styles to a component when it enters or exits:\n *\n * ```jsx\n * import Transition from 'react-transition-group/Transition';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 0 },\n *   entered:  { opacity: 1 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {(state) => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * As noted the `Transition` component doesn't _do_ anything by itself to its child component.\n * What it does do is track transition states over time so you can update the\n * component (such as by adding styles or classes) when it changes states.\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component begins the\n * \"Enter\" stage. During this stage, the component will shift from its current transition state,\n * to `'entering'` for the duration of the transition and then to the `'entered'` stage once\n * it's complete. Let's take the following example:\n *\n * ```jsx\n * state = { in: false };\n *\n * toggleEnterState = () => {\n *   this.setState({ in: true });\n * }\n *\n * render() {\n *   return (\n *     <div>\n *       <Transition in={this.state.in} timeout={500} />\n *       <button onClick={this.toggleEnterState}>Click to Enter</button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state and\n * stay there for 500ms (the value of `timeout`) before it finally switches to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from `'exiting'` to `'exited'`.\n *\n * ## Timing\n *\n * Timing is often the trickiest part of animation, mistakes can result in slight delays\n * that are hard to pin down. A common example is when you want to add an exit transition,\n * you should set the desired final styles when the state is `'exiting'`. That's when the\n * transition to those styles will start and, if you matched the `timeout` prop with the\n * CSS Transition duration, it will end exactly when the state changes to `'exited'`.\n *\n * > **Note**: For simpler transitions the `Transition` component might be enough, but\n * > take into account that it's platform-agnostic, while the `CSSTransition` component\n * > [forces reflows](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * > in order to make more complex transitions more predictable. For example, even though\n * > classes `example-enter` and `example-enter-active` are applied immediately one after\n * > another, you can still transition from one to the other because of the forced reflow\n * > (read [this issue](https://github.com/reactjs/react-transition-group/issues/159#issuecomment-322761171)\n * > for more info). Take this into account when choosing between `Transition` and\n * > `CSSTransition`.\n */\n\nexports.EXITING = EXITING;\n\nvar Transition =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  var _proto = Transition.prototype;\n\n  _proto.getChildContext = function getChildContext() {\n    return {\n      transitionGroup: null // allows for nested Transitions\n\n    };\n  };\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  }; // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter;\n      appear = timeout.appear;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n\n      var node = _reactDom.default.findDOMNode(this);\n\n      if (nextStatus === ENTERING) {\n        this.performEnter(node, mounting);\n      } else {\n        this.performExit(node);\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(node, mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;\n    var timeouts = this.getTimeouts(); // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(node);\n      });\n      return;\n    }\n\n    this.props.onEnter(node, appearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(node, appearing); // FIXME: appear timeout?\n\n\n      _this2.onTransitionEnd(node, timeouts.enter, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(node, appearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit(node) {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED\n\n    if (!exit) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(node);\n      });\n      return;\n    }\n\n    this.props.onExit(node);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(node);\n\n      _this3.onTransitionEnd(node, timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(node);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {\n    this.setNextCallback(handler);\n\n    if (node) {\n      if (this.props.addEndListener) {\n        this.props.addEndListener(node, this.nextCallback);\n      }\n\n      if (timeout != null) {\n        setTimeout(this.nextCallback, timeout);\n      }\n    } else {\n      setTimeout(this.nextCallback, 0);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\"]); // filter props for Transtition\n\n\n    delete childProps.in;\n    delete childProps.mountOnEnter;\n    delete childProps.unmountOnExit;\n    delete childProps.appear;\n    delete childProps.enter;\n    delete childProps.exit;\n    delete childProps.timeout;\n    delete childProps.addEndListener;\n    delete childProps.onEnter;\n    delete childProps.onEntering;\n    delete childProps.onEntered;\n    delete childProps.onExit;\n    delete childProps.onExiting;\n    delete childProps.onExited;\n\n    if (typeof children === 'function') {\n      return children(status, childProps);\n    }\n\n    var child = _react.default.Children.only(children);\n\n    return _react.default.cloneElement(child, childProps);\n  };\n\n  return Transition;\n}(_react.default.Component);\n\nTransition.contextTypes = {\n  transitionGroup: PropTypes.object\n};\nTransition.childContextTypes = {\n  transitionGroup: function transitionGroup() {}\n};\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A `function` child can be used instead of a React element.\n   * This function is called with the current transition status\n   * ('entering', 'entered', 'exiting', 'exited', 'unmounted'), which can be used\n   * to apply context specific props to a component.\n   *\n   * ```jsx\n   * <Transition timeout={150}>\n   *   {(status) => (\n   *     <MyComponent className={`fade fade-${status}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.\n   * If you want to transition on the first mount set `appear` to `true`, and the\n   * component will transition in as soon as the `<Transition>` mounts.\n   *\n   * > Note: there are no specific \"appear\" states. `appear` only adds an additional `enter` transition.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided\n   *\n   * You may specify a single timeout for all transitions like: `timeout={500}`,\n   * or individually like:\n   *\n   * ```jsx\n   * timeout={{\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * @type {number | { enter?: number, exit?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = process.env.NODE_ENV !== \"production\" ? _PropTypes.timeoutsShape : {};;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. **Note:** Timeouts are still used as a fallback if provided.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func // Name the function so it is clearer in the documentation\n\n} : {};\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = 0;\nTransition.EXITED = 1;\nTransition.ENTERING = 2;\nTransition.ENTERED = 3;\nTransition.EXITING = 4;\n\nvar _default = (0, _reactLifecyclesCompat.polyfill)(Transition);\n\nexports.default = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactLifecyclesCompat = require(\"react-lifecycles-compat\");\n\nvar _ChildMapping = require(\"./utils/ChildMapping\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nvar values = Object.values || function (obj) {\n  return Object.keys(obj).map(function (k) {\n    return obj[k];\n  });\n};\n\nvar defaultProps = {\n  component: 'div',\n  childFactory: function childFactory(child) {\n    return child;\n  }\n  /**\n   * The `<TransitionGroup>` component manages a set of transition components\n   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition\n   * components, `<TransitionGroup>` is a state machine for managing the mounting\n   * and unmounting of components over time.\n   *\n   * Consider the example below. As items are removed or added to the TodoList the\n   * `in` prop is toggled automatically by the `<TransitionGroup>`.\n   *\n   * Note that `<TransitionGroup>`  does not define any animation behavior!\n   * Exactly _how_ a list item animates is up to the individual transition\n   * component. This means you can mix and match animations across different list\n   * items.\n   */\n\n};\n\nvar TransitionGroup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(TransitionGroup, _React$Component);\n\n  function TransitionGroup(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n\n    var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear\n\n\n    _this.state = {\n      handleExited: handleExited,\n      firstRender: true\n    };\n    return _this;\n  }\n\n  var _proto = TransitionGroup.prototype;\n\n  _proto.getChildContext = function getChildContext() {\n    return {\n      transitionGroup: {\n        isMounting: !this.appeared\n      }\n    };\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.appeared = true;\n    this.mounted = true;\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n\n  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\n    var prevChildMapping = _ref.children,\n        handleExited = _ref.handleExited,\n        firstRender = _ref.firstRender;\n    return {\n      children: firstRender ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),\n      firstRender: false\n    };\n  };\n\n  _proto.handleExited = function handleExited(child, node) {\n    var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);\n    if (child.key in currentChildMapping) return;\n\n    if (child.props.onExited) {\n      child.props.onExited(node);\n    }\n\n    if (this.mounted) {\n      this.setState(function (state) {\n        var children = _extends({}, state.children);\n\n        delete children[child.key];\n        return {\n          children: children\n        };\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Component = _this$props.component,\n        childFactory = _this$props.childFactory,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"childFactory\"]);\n\n    var children = values(this.state.children).map(childFactory);\n    delete props.appear;\n    delete props.enter;\n    delete props.exit;\n\n    if (Component === null) {\n      return children;\n    }\n\n    return _react.default.createElement(Component, props, children);\n  };\n\n  return TransitionGroup;\n}(_react.default.Component);\n\nTransitionGroup.childContextTypes = {\n  transitionGroup: _propTypes.default.object.isRequired\n};\nTransitionGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\n   * behavior by providing a `component` prop.\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\n   * you can pass in `component={null}`. This is useful if the wrapping div\n   * borks your css styles.\n   */\n  component: _propTypes.default.any,\n\n  /**\n   * A set of `<Transition>` components, that are toggled `in` and out as they\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\n   * remember to spread them through if you are wrapping the `<Transition>` as\n   * with our `<Fade>` example.\n   */\n  children: _propTypes.default.node,\n\n  /**\n   * A convenience prop that enables or disables appear animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  appear: _propTypes.default.bool,\n\n  /**\n   * A convenience prop that enables or disables enter animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  enter: _propTypes.default.bool,\n\n  /**\n   * A convenience prop that enables or disables exit animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  exit: _propTypes.default.bool,\n\n  /**\n   * You may need to apply reactive updates to a child as it is exiting.\n   * This is generally done by using `cloneElement` however in the case of an exiting\n   * child the element has already been removed and not accessible to the consumer.\n   *\n   * If you do need to update a child as it leaves you can provide a `childFactory`\n   * to wrap every child, even the ones that are leaving.\n   *\n   * @type Function(child: ReactElement) -> ReactElement\n   */\n  childFactory: _propTypes.default.func\n} : {};\nTransitionGroup.defaultProps = defaultProps;\n\nvar _default = (0, _reactLifecyclesCompat.polyfill)(TransitionGroup);\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];"],"sourceRoot":""}