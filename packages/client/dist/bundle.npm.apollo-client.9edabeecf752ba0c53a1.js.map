{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-client/node_modules/zen-observable-ts/lib/bundle.esm.js","webpack:////var/www/html/utter/node_modules/apollo-client/node_modules/apollo-link/node_modules/ts-invariant/lib/invariant.esm.js","webpack:////var/www/html/utter/node_modules/apollo-client/node_modules/apollo-link/lib/bundle.esm.js","webpack:////var/www/html/utter/node_modules/apollo-client/node_modules/ts-invariant/lib/invariant.esm.js","webpack:////var/www/html/utter/node_modules/apollo-client/bundle.esm.js"],"names":["lib_bundle_esm","a","genericMessage","invariant_esm_a","Object","setPrototypeOf","obj","proto","__proto__","invariant_esm_InvariantError","_super","InvariantError","message","_this","call","this","framesToPop","name","prototype","tslib_es6","Error","invariant","condition","warn","args","_i","arguments","length","console","apply","error","LinkError","link","isTerminating","request","createOperation","starting","operation","context","defineProperty","enumerable","value","next","printer","query","JSON","stringify","variables","operationName","getKey","passthrough","op","forward","of","toLink","handler","bundle_esm_ApolloLink","empty","from","links","map","reduce","x","y","concat","split","test","left","right","leftLink","rightLink","ApolloLink","first","second","firstLink","nextLink","execute","bundle_esm_execute","transformedOperation","extensions","bundle_esm","transformOperation","OPERATION_FIELDS","_a","keys","key","indexOf","validateOperation","invariant_esm_genericMessage","lib_invariant_esm_a","invariant_esm_setPrototypeOf","lib_invariant_esm_InvariantError","invariant_esm_invariant","NetworkStatus","isNetworkRequestInFlight","networkStatus","__webpack_require__","d","__webpack_exports__","bundle_esm_ApolloClient","bundle_esm_ObservableQuery","isApolloError","bundle_esm_ApolloError","FetchType","apollo_client_bundle_esm_Observable","Observable","es","err","hasOwnProperty","generateErrorMessage","Array","isArray","graphQLErrors","forEach","graphQLError","errorMessage","networkError","replace","ApolloError","extraInfo","ObservableQuery","queryManager","options","_b","shouldSubscribe","observer","onSubscribe","isTornDown","queryId","generateQueryId","observers","subscriptionHandles","result","that","Promise","resolve","reject","subscription","some","obs","removeQuery","setTimeout","unsubscribe","subscribe","currentResult","getCurrentResult","undefined","data","lastError","lastResult","loading","storeValue","policy","queryStoreValue","queryStore","get","errorPolicy","assign","getCurrentQueryResult","partial","queryLoading","fetchPolicy","ready","errors","stale","lastResultSnapshot","isDifferentFromLastResult","newResult","snapshot","getLastResult","getLastError","resetLastResults","refetch","isNetworkFetchPolicy","combinedOptions","fetchQuery","then","fetchMore","fetchMoreOptions","updateQuery","qid","normal","fetchMoreResult","previousResult","subscribeToMore","startGraphQLSubscription","document","subscriptionData","previous","onError","push","i","splice","setOptions","opts","oldOptions","pollInterval","startPolling","stopPolling","tryFetch","setVariables","fetchResults","newVariables","mapFn","getQueryWithPreviousResult","dataStore","markUpdateQueryResult","broadcastQueries","stopPollingQuery","assertNotCacheFirstOrOnly","startPollingQuery","_subscription","_observer","stack","setUpQuery","filter","tearDownQuery","addObservableQuery","startQuery","queryListenerForObserver","sub","removeObservableQuery","stopQuery","obsQuery","MutationStore","store","getStore","mutationId","initMutation","mutation","markMutationError","markMutationResult","reset","bundle_esm_QueryStore","QueryStore","initQuery","previousQuery","isSetVariables","previousVariables","storePreviousVariables","isPoll","poll","isRefetch","metadata","fetchMoreForQueryId","markQueryResult","markQueryError","markQueryResultClient","complete","observableQueryIds","res","bundle_esm_LocalState","LocalState","cache","client","resolvers","fragmentMatcher","addResolvers","setFragmentMatcher","resolverGroup","setResolvers","getResolvers","runResolvers","remoteResult","onlyRunForcedResolvers","_c","resolveDocument","localResult","getFragmentMatcher","clientQuery","serverQuery","prepareContext","getCacheKey","config","dataIdFromObject","addExportedVariables","buildRootValueFromCache","exportedVariables","shouldForceResolvers","forceResolvers","visitor","Directive","enter","node","arg","kind","shouldForceResolver","field","diff","optimistic","rootValue","mainDefinition","fragments","fragmentMap","definitionOperation","defaultOperationType","execContext","str","charAt","toUpperCase","slice","resolveSelectionSet","selectionSet","resultsToMerge","selection","fragment","typeCondition","resolveField","fieldResult","fragmentResult","all","selections","fieldName","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolverType","resolverMap","__typename","directives","directive","resolveSubSelectedArray","item","bundle_esm_QueryManager","QueryManager","queryDeduplication","onBroadcast","_d","ssrMode","_e","clientAwareness","localState","mutationStore","idCounter","queries","Map","fetchQueryRejectFns","queryIdsByName","pollingInfoByQueryId","nextPoll","deduplicator","apollo_link_dedup_lib_bundle_esm","getCache","stop","_info","stopQueryNoBroadcast","mutate","optimisticResponse","updateQueriesByName","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","update","generateUpdateQueriesInfo","updatedVariables","_f","_g","label","transformDocument","setQuery","ret","queryName","updater","sent","markMutationInit","storeResult","buildOperationForLink","completeMutation","markMutationComplete","refetchQueryPromises","refetchQueries_1","refetchQuery","queryOptions","promise","refetchQueryByName","self","handlingNext","updatedResult","catch","fetchType","updatedOptions","needToFetch","shouldFetch","requestId","cancel","networkResult","returnPartialData","generateRequestId","updateQueryWatch","lastRequestId","invalidated","invalidate","fetchRequest","getQuery","previouslyHadError","newData","observableQuery","shouldNotifyIfLoading","networkStatusChanged","errorStatusChanged","apolloError_1","isMissing","document_1","readResult","resultFromStore","e_1","error_1","Boolean","notifyOnNetworkStatusChange","e","trys","watchQuery","queryDefinition","variableDefinitions","defaultValues","transformedOptions","watchedQuery","set","delete","toString","stopQueryInStore","stopQueryInStoreNoBroadcast","addQueryListener","listener","listeners","watch","callback","queryDef","definition","val","clearStore","resetIds","resetStore","reFetchObservableQueries","includeStandby","observableQueryPromises","getObservableQueryPromises","isCacheEnabled","transformedDoc","activeNextCalls_1","complete_1","handler_1","markSubscriptionResult","subscriptions","read","queryIdOrObservable","foundObserveableQuery","info","id","getLocalState","errorsFromStore","updatedContext","forceFetch","subscriber","refetchedQueries","prev","newInfo","extraContext","transformForLink","newContext","checkInFlight","interval","lastPollTimeMs","Date","now","schedulePoll","timeLimitMs","time","clearTimeout","timeout","nextTimeLimitMs","Infinity","updateLastPollTime","isFinite","bundle_esm_DataStore","DataStore","initialCache","ignoreErrors","writeWithErrors","write","dataId","optimistic_1","recordOptimisticTransaction","c","orig","cacheWrites_1","currentQueryResult","nextQueryResult","mutationResult","queryVariables","performTransaction","update_1","removeOptimistic","version","ApolloClient","defaultOptions","resetStoreCallbacks","clearStoreCallbacks","ssrForceFetchDelay","connectToDevTools","typeDefs","clientAwarenessName","clientAwarenessVersion","supportedCache","supportedDirectives","disableNetworkFetches","bind","window","__APOLLO_CLIENT__","initQueryManager","readQuery","initProxy","readFragment","writeQuery","writeFragment","writeData","__actionHookForDevTools","cb","devToolsHookCb","__requestRaw","payload","action","state","mutations","dataWithOptimisticResults","extract","fn","onResetStore","onClearStore","restore","serializedState","setLocalStateFragmentMatcher","proxy"],"mappings":"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","file":"bundle.npm.apollo-client.9edabeecf752ba0c53a1.js","sourcesContent":["import zenObservable from 'zen-observable';\n\nvar Observable = zenObservable;\n\nexport default Observable;\nexport { Observable };\n//# sourceMappingURL=bundle.esm.js.map\n","import { __extends } from 'tslib';\n\nvar genericMessage = \"Invariant Violation\";\r\nvar _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {\r\n    obj.__proto__ = proto;\r\n    return obj;\r\n} : _a;\r\nvar InvariantError = /** @class */ (function (_super) {\r\n    __extends(InvariantError, _super);\r\n    function InvariantError(message) {\r\n        if (message === void 0) { message = genericMessage; }\r\n        var _this = _super.call(this, typeof message === \"number\"\r\n            ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\"\r\n            : message) || this;\r\n        _this.framesToPop = 1;\r\n        _this.name = genericMessage;\r\n        setPrototypeOf(_this, InvariantError.prototype);\r\n        return _this;\r\n    }\r\n    return InvariantError;\r\n}(Error));\r\nfunction invariant(condition, message) {\r\n    if (!condition) {\r\n        throw new InvariantError(message);\r\n    }\r\n}\r\n(function (invariant) {\r\n    function warn() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return console.warn.apply(console, args);\r\n    }\r\n    invariant.warn = warn;\r\n    function error() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return console.error.apply(console, args);\r\n    }\r\n    invariant.error = error;\r\n})(invariant || (invariant = {}));\r\nvar invariant$1 = invariant;\n\nexport default invariant$1;\nexport { InvariantError, invariant };\n","import Observable from 'zen-observable-ts';\nexport { default as Observable } from 'zen-observable-ts';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { __extends, __assign } from 'tslib';\nimport { print } from 'graphql/language/printer';\nimport { getOperationName } from 'apollo-utilities';\nexport { getOperationName } from 'apollo-utilities';\n\nfunction validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        'query',\n        'operationName',\n        'variables',\n        'extensions',\n        'context',\n    ];\n    for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"illegal argument: \" + key);\n        }\n    }\n    return operation;\n}\nvar LinkError = (function (_super) {\n    __extends(LinkError, _super);\n    function LinkError(message, link) {\n        var _this = _super.call(this, message) || this;\n        _this.link = link;\n        return _this;\n    }\n    return LinkError;\n}(Error));\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nfunction toPromise(observable) {\n    var completed = false;\n    return new Promise(function (resolve, reject) {\n        observable.subscribe({\n            next: function (data) {\n                if (completed) {\n                    process.env.NODE_ENV === \"production\" || invariant.warn(\"Promise Wrapper does not support multiple results from Observable\");\n                }\n                else {\n                    completed = true;\n                    resolve(data);\n                }\n            },\n            error: reject,\n        });\n    });\n}\nvar makePromise = toPromise;\nfunction fromPromise(promise) {\n    return new Observable(function (observer) {\n        promise\n            .then(function (value) {\n            observer.next(value);\n            observer.complete();\n        })\n            .catch(observer.error.bind(observer));\n    });\n}\nfunction fromError(errorValue) {\n    return new Observable(function (observer) {\n        observer.error(errorValue);\n    });\n}\nfunction transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query,\n    };\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName =\n            typeof transformedOperation.query !== 'string'\n                ? getOperationName(transformedOperation.query)\n                : '';\n    }\n    return transformedOperation;\n}\nfunction createOperation(starting, operation) {\n    var context = __assign({}, starting);\n    var setContext = function (next) {\n        if (typeof next === 'function') {\n            context = __assign({}, context, next(context));\n        }\n        else {\n            context = __assign({}, context, next);\n        }\n    };\n    var getContext = function () { return (__assign({}, context)); };\n    Object.defineProperty(operation, 'setContext', {\n        enumerable: false,\n        value: setContext,\n    });\n    Object.defineProperty(operation, 'getContext', {\n        enumerable: false,\n        value: getContext,\n    });\n    Object.defineProperty(operation, 'toKey', {\n        enumerable: false,\n        value: function () { return getKey(operation); },\n    });\n    return operation;\n}\nfunction getKey(operation) {\n    return print(operation.query) + \"|\" + JSON.stringify(operation.variables) + \"|\" + operation.operationName;\n}\n\nfunction passthrough(op, forward) {\n    return forward ? forward(op) : Observable.of();\n}\nfunction toLink(handler) {\n    return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\nfunction empty() {\n    return new ApolloLink(function () { return Observable.of(); });\n}\nfunction from(links) {\n    if (links.length === 0)\n        return empty();\n    return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n}\nfunction split(test, left, right) {\n    var leftLink = toLink(left);\n    var rightLink = toLink(right || new ApolloLink(passthrough));\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n        return new ApolloLink(function (operation) {\n            return test(operation)\n                ? leftLink.request(operation) || Observable.of()\n                : rightLink.request(operation) || Observable.of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return test(operation)\n                ? leftLink.request(operation, forward) || Observable.of()\n                : rightLink.request(operation, forward) || Observable.of();\n        });\n    }\n}\nvar concat = function (first, second) {\n    var firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n        return firstLink;\n    }\n    var nextLink = toLink(second);\n    if (isTerminating(nextLink)) {\n        return new ApolloLink(function (operation) {\n            return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return (firstLink.request(operation, function (op) {\n                return nextLink.request(op, forward) || Observable.of();\n            }) || Observable.of());\n        });\n    }\n};\nvar ApolloLink = (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.prototype.split = function (test, left, right) {\n        return this.concat(split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError('request is not implemented');\n    };\n    ApolloLink.empty = empty;\n    ApolloLink.from = from;\n    ApolloLink.split = split;\n    ApolloLink.execute = execute;\n    return ApolloLink;\n}());\nfunction execute(link, operation) {\n    return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());\n}\n\nexport { createOperation, makePromise, toPromise, fromPromise, fromError, empty, from, split, concat, ApolloLink, execute };\n//# sourceMappingURL=bundle.esm.js.map\n","import { __extends } from 'tslib';\n\nvar genericMessage = \"Invariant Violation\";\r\nvar _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {\r\n    obj.__proto__ = proto;\r\n    return obj;\r\n} : _a;\r\nvar InvariantError = /** @class */ (function (_super) {\r\n    __extends(InvariantError, _super);\r\n    function InvariantError(message) {\r\n        if (message === void 0) { message = genericMessage; }\r\n        var _this = _super.call(this, message) || this;\r\n        _this.framesToPop = 1;\r\n        _this.name = genericMessage;\r\n        setPrototypeOf(_this, InvariantError.prototype);\r\n        return _this;\r\n    }\r\n    return InvariantError;\r\n}(Error));\r\nfunction invariant(condition, message) {\r\n    if (!condition) {\r\n        throw new InvariantError(message);\r\n    }\r\n}\r\n(function (invariant) {\r\n    function warn() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return console.warn.apply(console, args);\r\n    }\r\n    invariant.warn = warn;\r\n    function error() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return console.error.apply(console, args);\r\n    }\r\n    invariant.error = error;\r\n})(invariant || (invariant = {}));\r\nvar invariant$1 = invariant;\n\nexport default invariant$1;\nexport { InvariantError, invariant };\n","import { __extends, __assign, __awaiter, __generator } from 'tslib';\nimport { cloneDeep, isEqual, tryFunctionOrLogError, mergeDeep, hasDirectives, removeClientSetsFromDocument, buildQueryFromSelectionSet, getMainDefinition, getFragmentDefinitions, createFragmentMap, mergeDeepArray, resultKeyNameFromField, argumentsObjectFromField, shouldInclude, isField, isInlineFragment, assign, getDefaultValues, getMutationDefinition, hasClientExports, graphQLResultHasError, getQueryDefinition, getOperationDefinition, getOperationName, removeConnectionDirectiveFromDocument } from 'apollo-utilities';\nimport { Observable as Observable$1, ApolloLink, execute } from 'apollo-link';\nimport $$observable from 'symbol-observable';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { DedupLink } from 'apollo-link-dedup';\nimport { visit, BREAK } from 'graphql/language/visitor';\n\nvar NetworkStatus;\n(function (NetworkStatus) {\n    NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\nfunction isNetworkRequestInFlight(networkStatus) {\n    return networkStatus < 7;\n}\n\nvar Observable = (function (_super) {\n    __extends(Observable, _super);\n    function Observable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Observable.prototype[$$observable] = function () {\n        return this;\n    };\n    Observable.prototype['@@observable'] = function () {\n        return this;\n    };\n    return Observable;\n}(Observable$1));\n\nfunction isApolloError(err) {\n    return err.hasOwnProperty('graphQLErrors');\n}\nvar generateErrorMessage = function (err) {\n    var message = '';\n    if (Array.isArray(err.graphQLErrors) && err.graphQLErrors.length !== 0) {\n        err.graphQLErrors.forEach(function (graphQLError) {\n            var errorMessage = graphQLError\n                ? graphQLError.message\n                : 'Error message not found.';\n            message += \"GraphQL error: \" + errorMessage + \"\\n\";\n        });\n    }\n    if (err.networkError) {\n        message += 'Network error: ' + err.networkError.message + '\\n';\n    }\n    message = message.replace(/\\n$/, '');\n    return message;\n};\nvar ApolloError = (function (_super) {\n    __extends(ApolloError, _super);\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.networkError = networkError || null;\n        if (!errorMessage) {\n            _this.message = generateErrorMessage(_this);\n        }\n        else {\n            _this.message = errorMessage;\n        }\n        _this.extraInfo = extraInfo;\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error));\n\nvar FetchType;\n(function (FetchType) {\n    FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n    FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n    FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n})(FetchType || (FetchType = {}));\n\nvar hasError = function (storeValue, policy) {\n    if (policy === void 0) { policy = 'none'; }\n    return storeValue &&\n        ((storeValue.graphQLErrors &&\n            storeValue.graphQLErrors.length > 0 &&\n            policy === 'none') ||\n            storeValue.networkError);\n};\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, options = _a.options, _b = _a.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;\n        var _this = _super.call(this, function (observer) {\n            return _this.onSubscribe(observer);\n        }) || this;\n        _this.isTornDown = false;\n        _this.options = options;\n        _this.variables = options.variables || {};\n        _this.queryId = queryManager.generateQueryId();\n        _this.shouldSubscribe = shouldSubscribe;\n        _this.queryManager = queryManager;\n        _this.observers = [];\n        _this.subscriptionHandles = [];\n        return _this;\n    }\n    ObservableQuery.prototype.result = function () {\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            var subscription;\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    if (!that.observers.some(function (obs) { return obs !== observer; })) {\n                        that.queryManager.removeQuery(that.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: function (error) {\n                    reject(error);\n                },\n            };\n            subscription = that.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.currentResult = function () {\n        var result = this.getCurrentResult();\n        if (result.data === undefined) {\n            result.data = {};\n        }\n        return result;\n    };\n    ObservableQuery.prototype.getCurrentResult = function () {\n        if (this.isTornDown) {\n            return {\n                data: this.lastError\n                    ? undefined\n                    : this.lastResult\n                        ? this.lastResult.data\n                        : undefined,\n                error: this.lastError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n            };\n        }\n        var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n        if (hasError(queryStoreValue, this.options.errorPolicy)) {\n            return {\n                data: undefined,\n                loading: false,\n                networkStatus: queryStoreValue.networkStatus,\n                error: new ApolloError({\n                    graphQLErrors: queryStoreValue.graphQLErrors,\n                    networkError: queryStoreValue.networkError,\n                }),\n            };\n        }\n        if (queryStoreValue && queryStoreValue.variables) {\n            this.options.variables = Object.assign({}, this.options.variables, queryStoreValue.variables);\n        }\n        var _a = this.queryManager.getCurrentQueryResult(this), data = _a.data, partial = _a.partial;\n        var queryLoading = !queryStoreValue ||\n            queryStoreValue.networkStatus === NetworkStatus.loading;\n        var loading = (this.options.fetchPolicy === 'network-only' && queryLoading) ||\n            (partial && this.options.fetchPolicy !== 'cache-only');\n        var networkStatus;\n        if (queryStoreValue) {\n            networkStatus = queryStoreValue.networkStatus;\n        }\n        else {\n            networkStatus = loading ? NetworkStatus.loading : NetworkStatus.ready;\n        }\n        var result = {\n            data: data,\n            loading: isNetworkRequestInFlight(networkStatus),\n            networkStatus: networkStatus,\n        };\n        if (queryStoreValue &&\n            queryStoreValue.graphQLErrors &&\n            this.options.errorPolicy === 'all') {\n            result.errors = queryStoreValue.graphQLErrors;\n        }\n        if (!partial) {\n            this.lastResult = __assign({}, result, { stale: false });\n            this.lastResultSnapshot = cloneDeep(this.lastResult);\n        }\n        return __assign({}, result, { partial: partial });\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n        var snapshot = this.lastResultSnapshot;\n        return !(snapshot &&\n            newResult &&\n            snapshot.networkStatus === newResult.networkStatus &&\n            snapshot.stale === newResult.stale &&\n            isEqual(snapshot.data, newResult.data));\n    };\n    ObservableQuery.prototype.getLastResult = function () {\n        return this.lastResult;\n    };\n    ObservableQuery.prototype.getLastError = function () {\n        return this.lastError;\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.lastResult;\n        delete this.lastResultSnapshot;\n        delete this.lastError;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'cache-only') {\n            return Promise.reject(new Error('cache-only fetchPolicy option should not be used together with query refetch.'));\n        }\n        if (!isEqual(this.variables, variables)) {\n            this.variables = Object.assign({}, this.variables, variables);\n        }\n        if (!isEqual(this.options.variables, this.variables)) {\n            this.options.variables = Object.assign({}, this.options.variables, this.variables);\n        }\n        var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n        var combinedOptions = __assign({}, this.options, { fetchPolicy: isNetworkFetchPolicy ? fetchPolicy : 'network-only' });\n        return this.queryManager\n            .fetchQuery(this.queryId, combinedOptions, FetchType.refetch)\n            .then(function (result) { return result; });\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(fetchMoreOptions.updateQuery) : invariant(fetchMoreOptions.updateQuery, 'updateQuery option is required. This function defines how to update the query data with the new results.');\n        var combinedOptions;\n        return Promise.resolve()\n            .then(function () {\n            var qid = _this.queryManager.generateQueryId();\n            if (fetchMoreOptions.query) {\n                combinedOptions = fetchMoreOptions;\n            }\n            else {\n                combinedOptions = __assign({}, _this.options, fetchMoreOptions, { variables: Object.assign({}, _this.variables, fetchMoreOptions.variables) });\n            }\n            combinedOptions.fetchPolicy = 'network-only';\n            return _this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, _this.queryId);\n        })\n            .then(function (fetchMoreResult) {\n            _this.updateQuery(function (previousResult) {\n                return fetchMoreOptions.updateQuery(previousResult, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables,\n                });\n            });\n            return fetchMoreResult;\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                if (options.updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return options.updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                console.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptionHandles.push(subscription);\n        return function () {\n            var i = _this.subscriptionHandles.indexOf(subscription);\n            if (i >= 0) {\n                _this.subscriptionHandles.splice(i, 1);\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (opts) {\n        var oldOptions = this.options;\n        this.options = Object.assign({}, this.options, opts);\n        if (opts.pollInterval) {\n            this.startPolling(opts.pollInterval);\n        }\n        else if (opts.pollInterval === 0) {\n            this.stopPolling();\n        }\n        var tryFetch = (oldOptions.fetchPolicy !== 'network-only' &&\n            opts.fetchPolicy === 'network-only') ||\n            (oldOptions.fetchPolicy === 'cache-only' &&\n                opts.fetchPolicy !== 'cache-only') ||\n            (oldOptions.fetchPolicy === 'standby' &&\n                opts.fetchPolicy !== 'standby') ||\n            false;\n        return this.setVariables(this.options.variables, tryFetch, opts.fetchResults);\n    };\n    ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n        if (tryFetch === void 0) { tryFetch = false; }\n        if (fetchResults === void 0) { fetchResults = true; }\n        this.isTornDown = false;\n        var newVariables = variables ? variables : this.variables;\n        if (isEqual(newVariables, this.variables) && !tryFetch) {\n            if (this.observers.length === 0 || !fetchResults) {\n                return new Promise(function (resolve) { return resolve(); });\n            }\n            return this.result();\n        }\n        else {\n            this.variables = newVariables;\n            this.options.variables = newVariables;\n            if (this.observers.length === 0) {\n                return new Promise(function (resolve) { return resolve(); });\n            }\n            return this.queryManager\n                .fetchQuery(this.queryId, __assign({}, this.options, { variables: this.variables }))\n                .then(function (result) { return result; });\n        }\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var _a = this.queryManager.getQueryWithPreviousResult(this.queryId), previousResult = _a.previousResult, variables = _a.variables, document = _a.document;\n        var newResult = tryFunctionOrLogError(function () {\n            return mapFn(previousResult, { variables: variables });\n        });\n        if (newResult) {\n            this.queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n            this.queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        this.queryManager.stopPollingQuery(this.queryId);\n        this.options.pollInterval = undefined;\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        assertNotCacheFirstOrOnly(this);\n        this.options.pollInterval = pollInterval;\n        this.queryManager.startPollingQuery(this.options, this.queryId);\n    };\n    ObservableQuery.prototype.onSubscribe = function (observer) {\n        var _this = this;\n        if (observer._subscription &&\n            observer._subscription._observer &&\n            !observer._subscription._observer.error) {\n            observer._subscription._observer.error = function (error) {\n                console.error('Unhandled error', error.message, error.stack);\n            };\n        }\n        this.observers.push(observer);\n        if (observer.next && this.lastResult)\n            observer.next(this.lastResult);\n        if (observer.error && this.lastError)\n            observer.error(this.lastError);\n        if (this.observers.length === 1)\n            this.setUpQuery();\n        return function () {\n            _this.observers = _this.observers.filter(function (obs) { return obs !== observer; });\n            if (_this.observers.length === 0) {\n                _this.tearDownQuery();\n            }\n        };\n    };\n    ObservableQuery.prototype.setUpQuery = function () {\n        var _this = this;\n        if (this.shouldSubscribe) {\n            this.queryManager.addObservableQuery(this.queryId, this);\n        }\n        if (!!this.options.pollInterval) {\n            assertNotCacheFirstOrOnly(this);\n            this.queryManager.startPollingQuery(this.options, this.queryId);\n        }\n        var observer = {\n            next: function (result) {\n                _this.lastResult = result;\n                _this.lastResultSnapshot = cloneDeep(result);\n                _this.observers.forEach(function (obs) { return obs.next && obs.next(result); });\n            },\n            error: function (error) {\n                _this.lastError = error;\n                _this.observers.forEach(function (obs) { return obs.error && obs.error(error); });\n            },\n        };\n        this.queryManager.startQuery(this.queryId, this.options, this.queryManager.queryListenerForObserver(this.queryId, this.options, observer));\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        this.isTornDown = true;\n        this.queryManager.stopPollingQuery(this.queryId);\n        this.subscriptionHandles.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptionHandles = [];\n        this.queryManager.removeObservableQuery(this.queryId);\n        this.queryManager.stopQuery(this.queryId);\n        this.observers = [];\n    };\n    return ObservableQuery;\n}(Observable));\nfunction assertNotCacheFirstOrOnly(obsQuery) {\n    var fetchPolicy = obsQuery.options.fetchPolicy;\n    process.env.NODE_ENV === \"production\" ? invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only') : invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n}\n\nvar MutationStore = (function () {\n    function MutationStore() {\n        this.store = {};\n    }\n    MutationStore.prototype.getStore = function () {\n        return this.store;\n    };\n    MutationStore.prototype.get = function (mutationId) {\n        return this.store[mutationId];\n    };\n    MutationStore.prototype.initMutation = function (mutationId, mutation, variables) {\n        this.store[mutationId] = {\n            mutation: mutation,\n            variables: variables || {},\n            loading: true,\n            error: null,\n        };\n    };\n    MutationStore.prototype.markMutationError = function (mutationId, error) {\n        var mutation = this.store[mutationId];\n        if (!mutation) {\n            return;\n        }\n        mutation.loading = false;\n        mutation.error = error;\n    };\n    MutationStore.prototype.markMutationResult = function (mutationId) {\n        var mutation = this.store[mutationId];\n        if (!mutation) {\n            return;\n        }\n        mutation.loading = false;\n        mutation.error = null;\n    };\n    MutationStore.prototype.reset = function () {\n        this.store = {};\n    };\n    return MutationStore;\n}());\n\nvar QueryStore = (function () {\n    function QueryStore() {\n        this.store = {};\n    }\n    QueryStore.prototype.getStore = function () {\n        return this.store;\n    };\n    QueryStore.prototype.get = function (queryId) {\n        return this.store[queryId];\n    };\n    QueryStore.prototype.initQuery = function (query) {\n        var previousQuery = this.store[query.queryId];\n        if (previousQuery &&\n            previousQuery.document !== query.document &&\n            !isEqual(previousQuery.document, query.document)) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError('Internal Error: may not update existing query string in store');\n        }\n        var isSetVariables = false;\n        var previousVariables = null;\n        if (query.storePreviousVariables &&\n            previousQuery &&\n            previousQuery.networkStatus !== NetworkStatus.loading) {\n            if (!isEqual(previousQuery.variables, query.variables)) {\n                isSetVariables = true;\n                previousVariables = previousQuery.variables;\n            }\n        }\n        var networkStatus;\n        if (isSetVariables) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        else if (query.isPoll) {\n            networkStatus = NetworkStatus.poll;\n        }\n        else if (query.isRefetch) {\n            networkStatus = NetworkStatus.refetch;\n        }\n        else {\n            networkStatus = NetworkStatus.loading;\n        }\n        var graphQLErrors = [];\n        if (previousQuery && previousQuery.graphQLErrors) {\n            graphQLErrors = previousQuery.graphQLErrors;\n        }\n        this.store[query.queryId] = {\n            document: query.document,\n            variables: query.variables,\n            previousVariables: previousVariables,\n            networkError: null,\n            graphQLErrors: graphQLErrors,\n            networkStatus: networkStatus,\n            metadata: query.metadata,\n        };\n        if (typeof query.fetchMoreForQueryId === 'string' &&\n            this.store[query.fetchMoreForQueryId]) {\n            this.store[query.fetchMoreForQueryId].networkStatus =\n                NetworkStatus.fetchMore;\n        }\n    };\n    QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].graphQLErrors =\n            result.errors && result.errors.length ? result.errors : [];\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = NetworkStatus.ready;\n        if (typeof fetchMoreForQueryId === 'string' &&\n            this.store[fetchMoreForQueryId]) {\n            this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n        }\n    };\n    QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = error;\n        this.store[queryId].networkStatus = NetworkStatus.error;\n        if (typeof fetchMoreForQueryId === 'string') {\n            this.markQueryResultClient(fetchMoreForQueryId, true);\n        }\n    };\n    QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = complete\n            ? NetworkStatus.ready\n            : NetworkStatus.loading;\n    };\n    QueryStore.prototype.stopQuery = function (queryId) {\n        delete this.store[queryId];\n    };\n    QueryStore.prototype.reset = function (observableQueryIds) {\n        var _this = this;\n        this.store = Object.keys(this.store)\n            .filter(function (queryId) {\n            return observableQueryIds.indexOf(queryId) > -1;\n        })\n            .reduce(function (res, key) {\n            res[key] = __assign({}, _this.store[key], { networkStatus: NetworkStatus.loading });\n            return res;\n        }, {});\n    };\n    return QueryStore;\n}());\n\nfunction capitalizeFirstLetter(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nvar LocalState = (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    LocalState.prototype.runResolvers = function (_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_c) {\n                if (document) {\n                    return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign({}, remoteResult, { data: localResult.result })); })];\n                }\n                return [2, remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    LocalState.prototype.clientQuery = function (document) {\n        if (hasDirectives(['client'], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n            process.env.NODE_ENV === \"production\" || invariant.warn('Found @client directives in query but no client resolvers were specified. ' +\n                'You can now pass apollo-link-state resolvers to the ApolloClient constructor.');\n        }\n        return null;\n    };\n    LocalState.prototype.serverQuery = function (document) {\n        return this.resolvers ? removeClientSetsFromDocument(document) : document;\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var cache = this.cache;\n        var newContext = __assign({}, context, { cache: cache, getCacheKey: function (obj) {\n                if (cache.config) {\n                    return cache.config.dataIdFromObject(obj);\n                }\n                else {\n                    process.env.NODE_ENV === \"production\" ? invariant(false) : invariant(false, 'To use context.getCacheKey, you need to use a cache that has ' +\n                        'a configurable dataIdFromObject, like apollo-cache-inmemory.');\n                }\n            } });\n        return newContext;\n    };\n    LocalState.prototype.addExportedVariables = function (document, variables, context) {\n        if (variables === void 0) { variables = {}; }\n        if (context === void 0) { context = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (document) {\n                    return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign({}, variables, data.exportedVariables)); })];\n                }\n                return [2, __assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === 'client' && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === 'always' &&\n                                arg.value.kind === 'BooleanValue' &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    LocalState.prototype.shouldForceResolver = function (field) {\n        return this.shouldForceResolvers(field);\n    };\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: buildQueryFromSelectionSet(document),\n            variables: variables,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) { context = {}; }\n        if (variables === void 0) { variables = {}; }\n        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n            return __generator(this, function (_b) {\n                mainDefinition = getMainDefinition(document);\n                fragments = getFragmentDefinitions(document);\n                fragmentMap = createFragmentMap(fragments);\n                definitionOperation = mainDefinition\n                    .operation;\n                defaultOperationType = definitionOperation\n                    ? capitalizeFirstLetter(definitionOperation)\n                    : 'Query';\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: __assign({}, context, { cache: cache,\n                        client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return __generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return __generator(this, function (_a) {\n                        if (!shouldInclude(selection, variables)) {\n                            return [2];\n                        }\n                        if (isField(selection)) {\n                            return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== 'undefined') {\n                                        resultsToMerge.push((_a = {},\n                                            _a[resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            fragment = fragmentMap[selection.name.value];\n                            process.env.NODE_ENV === \"production\" ? invariant(fragment) : invariant(fragment, \"No fragment named \" + selection.name.value);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2];\n                    });\n                }); };\n                return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return __generator(this, function (_a) {\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolver(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, { field: field }));\n                        }\n                    }\n                }\n                return [2, resultPromise.then(function (result) {\n                        if (result === void 0) { result = defaultResult; }\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === 'export' && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        if (result == null) {\n                            return result;\n                        }\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, result, execContext);\n                        }\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, item, execContext);\n            }\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n            }\n        }));\n    };\n    return LocalState;\n}());\n\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, store = _a.store, _c = _a.onBroadcast, onBroadcast = _c === void 0 ? function () { return undefined; } : _c, _d = _a.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _a.clientAwareness, clientAwareness = _e === void 0 ? {} : _e, localState = _a.localState;\n        this.mutationStore = new MutationStore();\n        this.queryStore = new QueryStore();\n        this.clientAwareness = {};\n        this.idCounter = 1;\n        this.queries = new Map();\n        this.fetchQueryRejectFns = new Map();\n        this.queryIdsByName = {};\n        this.pollingInfoByQueryId = new Map();\n        this.nextPoll = null;\n        this.link = link;\n        this.deduplicator = ApolloLink.from([new DedupLink(), link]);\n        this.queryDeduplication = queryDeduplication;\n        this.dataStore = store;\n        this.onBroadcast = onBroadcast;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: store.getCache() });\n        this.ssrMode = ssrMode;\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(new Error('QueryManager stopped while query was in flight'));\n        });\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueriesByName = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, fetchPolicy = _a.fetchPolicy, _e = _a.context, context = _e === void 0 ? {} : _e;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, cache, generateUpdateQueriesInfo, updatedVariables, _f;\n            var _this = this;\n            return __generator(this, function (_g) {\n                switch (_g.label) {\n                    case 0:\n                        process.env.NODE_ENV === \"production\" ? invariant(mutation) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n                        process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache') : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"fetchPolicy for mutations currently only supports the 'no-cache' policy\");\n                        mutationId = this.generateQueryId();\n                        cache = this.dataStore.getCache();\n                        (mutation = cache.transformDocument(mutation)),\n                            (variables = assign({}, getDefaultValues(getMutationDefinition(mutation)), variables));\n                        this.setQuery(mutationId, function () { return ({ document: mutation }); });\n                        generateUpdateQueriesInfo = function () {\n                            var ret = {};\n                            if (updateQueriesByName) {\n                                Object.keys(updateQueriesByName).forEach(function (queryName) {\n                                    return (_this.queryIdsByName[queryName] || []).forEach(function (queryId) {\n                                        ret[queryId] = {\n                                            updater: updateQueriesByName[queryName],\n                                            query: _this.queryStore.get(queryId),\n                                        };\n                                    });\n                                });\n                            }\n                            return ret;\n                        };\n                        if (!hasClientExports(mutation)) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        _f = _g.sent();\n                        return [3, 3];\n                    case 2:\n                        _f = variables;\n                        _g.label = 3;\n                    case 3:\n                        updatedVariables = _f;\n                        this.mutationStore.initMutation(mutationId, mutation, updatedVariables);\n                        this.dataStore.markMutationInit({\n                            mutationId: mutationId,\n                            document: mutation,\n                            variables: updatedVariables || {},\n                            updateQueries: generateUpdateQueriesInfo(),\n                            update: updateWithProxyFn,\n                            optimisticResponse: optimisticResponse,\n                        });\n                        this.broadcastQueries();\n                        return [2, new Promise(function (resolve, reject) {\n                                var storeResult;\n                                var error;\n                                var operation = _this.buildOperationForLink(mutation, updatedVariables, __assign({}, context, { optimisticResponse: optimisticResponse }));\n                                var completeMutation = function () {\n                                    if (error) {\n                                        _this.mutationStore.markMutationError(mutationId, error);\n                                    }\n                                    _this.dataStore.markMutationComplete({\n                                        mutationId: mutationId,\n                                        optimisticResponse: optimisticResponse,\n                                    });\n                                    _this.broadcastQueries();\n                                    if (error) {\n                                        return Promise.reject(error);\n                                    }\n                                    if (typeof refetchQueries === 'function') {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    var refetchQueryPromises = [];\n                                    for (var _i = 0, refetchQueries_1 = refetchQueries; _i < refetchQueries_1.length; _i++) {\n                                        var refetchQuery = refetchQueries_1[_i];\n                                        if (typeof refetchQuery === 'string') {\n                                            var promise = _this.refetchQueryByName(refetchQuery);\n                                            if (promise) {\n                                                refetchQueryPromises.push(promise);\n                                            }\n                                            continue;\n                                        }\n                                        var queryOptions = {\n                                            query: refetchQuery.query,\n                                            variables: refetchQuery.variables,\n                                            fetchPolicy: 'network-only',\n                                        };\n                                        if (refetchQuery.context) {\n                                            queryOptions.context = refetchQuery.context;\n                                        }\n                                        refetchQueryPromises.push(_this.query(queryOptions));\n                                    }\n                                    return Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                                        _this.setQuery(mutationId, function () { return ({ document: null }); });\n                                        if (errorPolicy === 'ignore' &&\n                                            storeResult &&\n                                            graphQLResultHasError(storeResult)) {\n                                            delete storeResult.errors;\n                                        }\n                                        return storeResult;\n                                    });\n                                };\n                                var clientQuery = _this.localState.clientQuery(operation.query);\n                                var serverQuery = _this.localState.serverQuery(operation.query);\n                                if (serverQuery) {\n                                    operation.query = serverQuery;\n                                }\n                                var obs = serverQuery\n                                    ? execute(_this.link, operation)\n                                    : Observable.of({\n                                        data: {},\n                                    });\n                                var self = _this;\n                                var complete = false;\n                                var handlingNext = false;\n                                obs.subscribe({\n                                    next: function (result) { return __awaiter(_this, void 0, void 0, function () {\n                                        var updatedResult, context, variables;\n                                        return __generator(this, function (_a) {\n                                            switch (_a.label) {\n                                                case 0:\n                                                    handlingNext = true;\n                                                    if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                                        handlingNext = false;\n                                                        error = new ApolloError({\n                                                            graphQLErrors: result.errors,\n                                                        });\n                                                        return [2];\n                                                    }\n                                                    self.mutationStore.markMutationResult(mutationId);\n                                                    updatedResult = result;\n                                                    context = operation.context, variables = operation.variables;\n                                                    if (!(clientQuery && hasDirectives(['client'], clientQuery))) return [3, 2];\n                                                    return [4, self.localState\n                                                            .runResolvers({\n                                                            document: clientQuery,\n                                                            remoteResult: result,\n                                                            context: context,\n                                                            variables: variables,\n                                                        })\n                                                            .catch(function (error) {\n                                                            handlingNext = false;\n                                                            reject(error);\n                                                            return result;\n                                                        })];\n                                                case 1:\n                                                    updatedResult = _a.sent();\n                                                    _a.label = 2;\n                                                case 2:\n                                                    if (fetchPolicy !== 'no-cache') {\n                                                        self.dataStore.markMutationResult({\n                                                            mutationId: mutationId,\n                                                            result: updatedResult,\n                                                            document: mutation,\n                                                            variables: updatedVariables || {},\n                                                            updateQueries: generateUpdateQueriesInfo(),\n                                                            update: updateWithProxyFn,\n                                                        });\n                                                    }\n                                                    storeResult = updatedResult;\n                                                    handlingNext = false;\n                                                    if (complete) {\n                                                        completeMutation().then(resolve, reject);\n                                                    }\n                                                    return [2];\n                                            }\n                                        });\n                                    }); },\n                                    error: function (err) {\n                                        self.mutationStore.markMutationError(mutationId, err);\n                                        self.dataStore.markMutationComplete({\n                                            mutationId: mutationId,\n                                            optimisticResponse: optimisticResponse,\n                                        });\n                                        self.broadcastQueries();\n                                        self.setQuery(mutationId, function () { return ({ document: null }); });\n                                        reject(new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                    complete: function () {\n                                        if (!handlingNext) {\n                                            completeMutation().then(resolve, reject);\n                                        }\n                                        complete = true;\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, variables, _b, metadata, _c, fetchPolicy, _d, context, cache, query, updatedVariables, _e, updatedOptions, storeResult, needToFetch, _f, complete, result, shouldFetch, requestId, cancel, shouldDispatchClientResult, networkResult;\n            var _this = this;\n            return __generator(this, function (_g) {\n                switch (_g.label) {\n                    case 0:\n                        _a = options.variables, variables = _a === void 0 ? {} : _a, _b = options.metadata, metadata = _b === void 0 ? null : _b, _c = options.fetchPolicy, fetchPolicy = _c === void 0 ? 'cache-first' : _c, _d = options.context, context = _d === void 0 ? {} : _d;\n                        cache = this.dataStore.getCache();\n                        query = cache.transformDocument(options.query);\n                        if (!hasClientExports(query)) return [3, 2];\n                        return [4, this.localState.addExportedVariables(query, variables, context)];\n                    case 1:\n                        _e = _g.sent();\n                        return [3, 3];\n                    case 2:\n                        _e = variables;\n                        _g.label = 3;\n                    case 3:\n                        updatedVariables = _e;\n                        updatedOptions = __assign({}, options, { variables: updatedVariables });\n                        needToFetch = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n                        if (fetchType !== FetchType.refetch &&\n                            fetchPolicy !== 'network-only' &&\n                            fetchPolicy !== 'no-cache') {\n                            _f = this.dataStore.getCache().diff({\n                                query: query,\n                                variables: updatedVariables,\n                                returnPartialData: true,\n                                optimistic: false,\n                            }), complete = _f.complete, result = _f.result;\n                            needToFetch = !complete || fetchPolicy === 'cache-and-network';\n                            storeResult = result;\n                        }\n                        shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n                        if (hasDirectives(['live'], query))\n                            shouldFetch = true;\n                        requestId = this.generateRequestId();\n                        cancel = this.updateQueryWatch(queryId, query, updatedOptions);\n                        this.setQuery(queryId, function () { return ({\n                            document: query,\n                            lastRequestId: requestId,\n                            invalidated: true,\n                            cancel: cancel,\n                        }); });\n                        this.invalidate(true, fetchMoreForQueryId);\n                        this.queryStore.initQuery({\n                            queryId: queryId,\n                            document: query,\n                            storePreviousVariables: shouldFetch,\n                            variables: updatedVariables,\n                            isPoll: fetchType === FetchType.poll,\n                            isRefetch: fetchType === FetchType.refetch,\n                            metadata: metadata,\n                            fetchMoreForQueryId: fetchMoreForQueryId,\n                        });\n                        this.broadcastQueries();\n                        shouldDispatchClientResult = !shouldFetch || fetchPolicy === 'cache-and-network';\n                        if (shouldDispatchClientResult) {\n                            this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n                            this.invalidate(true, queryId, fetchMoreForQueryId);\n                            this.broadcastQueries(this.localState.shouldForceResolvers(query));\n                        }\n                        if (shouldFetch) {\n                            networkResult = this.fetchRequest({\n                                requestId: requestId,\n                                queryId: queryId,\n                                document: query,\n                                options: updatedOptions,\n                                fetchMoreForQueryId: fetchMoreForQueryId,\n                            }).catch(function (error) {\n                                if (isApolloError(error)) {\n                                    throw error;\n                                }\n                                else {\n                                    var lastRequestId = _this.getQuery(queryId).lastRequestId;\n                                    if (requestId >= (lastRequestId || 1)) {\n                                        _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n                                        _this.invalidate(true, queryId, fetchMoreForQueryId);\n                                        _this.broadcastQueries();\n                                    }\n                                    throw new ApolloError({ networkError: error });\n                                }\n                            });\n                            if (fetchPolicy !== 'cache-and-network') {\n                                return [2, networkResult];\n                            }\n                            else {\n                                networkResult.catch(function () { });\n                            }\n                        }\n                        return [2, Promise.resolve({ data: storeResult })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n        var _this = this;\n        var previouslyHadError = false;\n        return function (queryStoreValue, newData, forceResolvers) { return __awaiter(_this, void 0, void 0, function () {\n            var observableQuery, fetchPolicy, errorPolicy, lastResult, lastError, shouldNotifyIfLoading, networkStatusChanged, errorStatusChanged, apolloError_1, data, isMissing, document_1, readResult, resultFromStore, query, variables, context, updatedResult, e_1, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.invalidate(false, queryId);\n                        if (!queryStoreValue)\n                            return [2];\n                        observableQuery = this.getQuery(queryId).observableQuery;\n                        fetchPolicy = observableQuery\n                            ? observableQuery.options.fetchPolicy\n                            : options.fetchPolicy;\n                        if (fetchPolicy === 'standby')\n                            return [2];\n                        errorPolicy = observableQuery\n                            ? observableQuery.options.errorPolicy\n                            : options.errorPolicy;\n                        lastResult = observableQuery\n                            ? observableQuery.getLastResult()\n                            : null;\n                        lastError = observableQuery ? observableQuery.getLastError() : null;\n                        shouldNotifyIfLoading = (!newData && queryStoreValue.previousVariables != null) ||\n                            fetchPolicy === 'cache-only' ||\n                            fetchPolicy === 'cache-and-network';\n                        networkStatusChanged = Boolean(lastResult &&\n                            queryStoreValue.networkStatus !== lastResult.networkStatus);\n                        errorStatusChanged = errorPolicy &&\n                            (lastError && lastError.graphQLErrors) !==\n                                queryStoreValue.graphQLErrors &&\n                            errorPolicy !== 'none';\n                        if (!(!isNetworkRequestInFlight(queryStoreValue.networkStatus) ||\n                            (networkStatusChanged && options.notifyOnNetworkStatusChange) ||\n                            shouldNotifyIfLoading)) return [3, 8];\n                        if (((!errorPolicy || errorPolicy === 'none') &&\n                            queryStoreValue.graphQLErrors &&\n                            queryStoreValue.graphQLErrors.length > 0) ||\n                            queryStoreValue.networkError) {\n                            apolloError_1 = new ApolloError({\n                                graphQLErrors: queryStoreValue.graphQLErrors,\n                                networkError: queryStoreValue.networkError,\n                            });\n                            previouslyHadError = true;\n                            if (observer.error) {\n                                try {\n                                    observer.error(apolloError_1);\n                                }\n                                catch (e) {\n                                    setTimeout(function () {\n                                        throw e;\n                                    }, 0);\n                                }\n                            }\n                            else {\n                                setTimeout(function () {\n                                    throw apolloError_1;\n                                }, 0);\n                                if (process.env.NODE_ENV !== 'production') {\n                                    console.info('An unhandled error was thrown because no error handler is registered ' +\n                                        'for the query ' +\n                                        JSON.stringify(queryStoreValue.document));\n                                }\n                            }\n                            return [2];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 7, , 8]);\n                        data = void 0;\n                        isMissing = void 0;\n                        if (newData) {\n                            if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n                                this.setQuery(queryId, function () { return ({ newData: null }); });\n                            }\n                            data = newData.result;\n                            isMissing = !newData.complete || false;\n                        }\n                        else {\n                            if (lastResult && lastResult.data && !errorStatusChanged) {\n                                data = lastResult.data;\n                                isMissing = false;\n                            }\n                            else {\n                                document_1 = this.getQuery(queryId).document;\n                                readResult = this.dataStore.getCache().diff({\n                                    query: document_1,\n                                    variables: queryStoreValue.previousVariables ||\n                                        queryStoreValue.variables,\n                                    optimistic: true,\n                                });\n                                data = readResult.result;\n                                isMissing = !readResult.complete;\n                            }\n                        }\n                        resultFromStore = void 0;\n                        if (isMissing && fetchPolicy !== 'cache-only') {\n                            resultFromStore = {\n                                data: lastResult && lastResult.data,\n                                loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n                                networkStatus: queryStoreValue.networkStatus,\n                                stale: true,\n                            };\n                        }\n                        else {\n                            resultFromStore = {\n                                data: data,\n                                loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n                                networkStatus: queryStoreValue.networkStatus,\n                                stale: false,\n                            };\n                        }\n                        if (errorPolicy === 'all' &&\n                            queryStoreValue.graphQLErrors &&\n                            queryStoreValue.graphQLErrors.length > 0) {\n                            resultFromStore.errors = queryStoreValue.graphQLErrors;\n                        }\n                        if (!observer.next) return [3, 6];\n                        if (!(previouslyHadError ||\n                            !observableQuery ||\n                            observableQuery.isDifferentFromLastResult(resultFromStore))) return [3, 6];\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 5, , 6]);\n                        if (!forceResolvers) return [3, 4];\n                        query = options.query, variables = options.variables, context = options.context;\n                        return [4, this.localState.runResolvers({\n                                document: query,\n                                remoteResult: resultFromStore,\n                                context: context,\n                                variables: variables,\n                                onlyRunForcedResolvers: forceResolvers,\n                            })];\n                    case 3:\n                        updatedResult = _a.sent();\n                        resultFromStore = __assign({}, resultFromStore, updatedResult);\n                        _a.label = 4;\n                    case 4:\n                        observer.next(resultFromStore);\n                        return [3, 6];\n                    case 5:\n                        e_1 = _a.sent();\n                        setTimeout(function () {\n                            throw e_1;\n                        }, 0);\n                        return [3, 6];\n                    case 6:\n                        previouslyHadError = false;\n                        return [3, 8];\n                    case 7:\n                        error_1 = _a.sent();\n                        previouslyHadError = true;\n                        if (observer.error)\n                            observer.error(new ApolloError({ networkError: error_1 }));\n                        return [2];\n                    case 8: return [2];\n                }\n            });\n        }); };\n    };\n    QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n        if (shouldSubscribe === void 0) { shouldSubscribe = true; }\n        process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'standby') : invariant(options.fetchPolicy !== 'standby', 'client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n        var queryDefinition = getQueryDefinition(options.query);\n        if (queryDefinition.variableDefinitions &&\n            queryDefinition.variableDefinitions.length) {\n            var defaultValues = getDefaultValues(queryDefinition);\n            options.variables = assign({}, defaultValues, options.variables);\n        }\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var transformedOptions = __assign({}, options);\n        return new ObservableQuery({\n            queryManager: this,\n            options: transformedOptions,\n            shouldSubscribe: shouldSubscribe,\n        });\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(options.query) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.');\n        process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document') : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n        return new Promise(function (resolve, reject) {\n            var watchedQuery = _this.watchQuery(options, false);\n            _this.fetchQueryRejectFns.set(\"query:\" + watchedQuery.queryId, reject);\n            watchedQuery\n                .result()\n                .then(resolve, reject)\n                .then(function () {\n                return _this.fetchQueryRejectFns.delete(\"query:\" + watchedQuery.queryId);\n            });\n        });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        var queryId = this.idCounter.toString();\n        this.idCounter++;\n        return queryId;\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        this.stopPollingQuery(queryId);\n        this.queryStore.stopQuery(queryId);\n        this.invalidate(true, queryId);\n    };\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {\n        this.setQuery(queryId, function (_a) {\n            var _b = _a.listeners, listeners = _b === void 0 ? [] : _b;\n            return ({\n                listeners: listeners.concat([listener]),\n                invalidated: false,\n            });\n        });\n    };\n    QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n        var _this = this;\n        var cancel = this.getQuery(queryId).cancel;\n        if (cancel)\n            cancel();\n        var previousResult = function () {\n            var previousResult = null;\n            var observableQuery = _this.getQuery(queryId).observableQuery;\n            if (observableQuery) {\n                var lastResult = observableQuery.getLastResult();\n                if (lastResult) {\n                    previousResult = lastResult.data;\n                }\n            }\n            return previousResult;\n        };\n        return this.dataStore.getCache().watch({\n            query: document,\n            variables: options.variables,\n            optimistic: true,\n            previousResult: previousResult,\n            callback: function (newData) {\n                _this.setQuery(queryId, function () { return ({ invalidated: true, newData: newData }); });\n            },\n        });\n    };\n    QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n        this.setQuery(queryId, function () { return ({ observableQuery: observableQuery }); });\n        var queryDef = getQueryDefinition(observableQuery.options.query);\n        if (queryDef.name && queryDef.name.value) {\n            var queryName = queryDef.name.value;\n            this.queryIdsByName[queryName] = this.queryIdsByName[queryName] || [];\n            this.queryIdsByName[queryName].push(observableQuery.queryId);\n        }\n    };\n    QueryManager.prototype.removeObservableQuery = function (queryId) {\n        var _a = this.getQuery(queryId), observableQuery = _a.observableQuery, cancel = _a.cancel;\n        if (cancel)\n            cancel();\n        if (!observableQuery)\n            return;\n        var definition = getQueryDefinition(observableQuery.options.query);\n        var queryName = definition.name ? definition.name.value : null;\n        this.setQuery(queryId, function () { return ({ observableQuery: null }); });\n        if (queryName) {\n            this.queryIdsByName[queryName] = this.queryIdsByName[queryName].filter(function (val) {\n                return !(observableQuery.queryId === val);\n            });\n        }\n    };\n    QueryManager.prototype.clearStore = function () {\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(new Error('Store reset while query was in flight(not completed in link chain)'));\n        });\n        var resetIds = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery)\n                resetIds.push(queryId);\n        });\n        this.queryStore.reset(resetIds);\n        this.mutationStore.reset();\n        var reset = this.dataStore.reset();\n        return reset;\n    };\n    QueryManager.prototype.resetStore = function () {\n        var _this = this;\n        return this.clearStore().then(function () {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var observableQueryPromises = this.getObservableQueryPromises(includeStandby);\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.startQuery = function (queryId, options, listener) {\n        this.addQueryListener(queryId, listener);\n        this.fetchQuery(queryId, options)\n            .catch(function () { return undefined; });\n        return queryId;\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (options) {\n        var _this = this;\n        var query = options.query;\n        var isCacheEnabled = !(options.fetchPolicy && options.fetchPolicy === 'no-cache');\n        var cache = this.dataStore.getCache();\n        var transformedDoc = cache.transformDocument(query);\n        var variables = assign({}, getDefaultValues(getOperationDefinition(query)), options.variables);\n        var updatedVariables = variables;\n        var sub;\n        var observers = [];\n        var clientQuery = this.localState.clientQuery(transformedDoc);\n        return new Observable(function (observer) {\n            observers.push(observer);\n            if (observers.length === 1) {\n                var activeNextCalls_1 = 0;\n                var complete_1 = false;\n                var handler_1 = {\n                    next: function (result) { return __awaiter(_this, void 0, void 0, function () {\n                        var updatedResult;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    activeNextCalls_1 += 1;\n                                    updatedResult = result;\n                                    if (!(clientQuery && hasDirectives(['client'], clientQuery))) return [3, 2];\n                                    return [4, this.localState.runResolvers({\n                                            document: clientQuery,\n                                            remoteResult: result,\n                                            context: {},\n                                            variables: updatedVariables,\n                                        })];\n                                case 1:\n                                    updatedResult = _a.sent();\n                                    _a.label = 2;\n                                case 2:\n                                    if (isCacheEnabled) {\n                                        this.dataStore.markSubscriptionResult(updatedResult, transformedDoc, updatedVariables);\n                                        this.broadcastQueries();\n                                    }\n                                    observers.forEach(function (obs) {\n                                        if (graphQLResultHasError(updatedResult) && obs.error) {\n                                            obs.error(new ApolloError({\n                                                graphQLErrors: updatedResult.errors,\n                                            }));\n                                        }\n                                        else if (obs.next) {\n                                            obs.next(updatedResult);\n                                        }\n                                        activeNextCalls_1 -= 1;\n                                    });\n                                    if (activeNextCalls_1 === 0 && complete_1) {\n                                        handler_1.complete();\n                                    }\n                                    return [2];\n                            }\n                        });\n                    }); },\n                    error: function (error) {\n                        observers.forEach(function (obs) {\n                            if (obs.error) {\n                                obs.error(error);\n                            }\n                        });\n                    },\n                    complete: function () {\n                        if (activeNextCalls_1 === 0) {\n                            observers.forEach(function (obs) {\n                                if (obs.complete) {\n                                    obs.complete();\n                                }\n                            });\n                        }\n                        complete_1 = true;\n                    }\n                };\n                (function () { return __awaiter(_this, void 0, void 0, function () {\n                    var updatedVariables, _a, serverQuery, operation;\n                    return __generator(this, function (_b) {\n                        switch (_b.label) {\n                            case 0:\n                                if (!hasClientExports(transformedDoc)) return [3, 2];\n                                return [4, this.localState.addExportedVariables(transformedDoc, variables)];\n                            case 1:\n                                _a = _b.sent();\n                                return [3, 3];\n                            case 2:\n                                _a = variables;\n                                _b.label = 3;\n                            case 3:\n                                updatedVariables = _a;\n                                serverQuery = this.localState.serverQuery(transformedDoc);\n                                if (serverQuery) {\n                                    operation = this.buildOperationForLink(serverQuery, updatedVariables);\n                                    sub = execute(this.link, operation).subscribe(handler_1);\n                                }\n                                else {\n                                    sub = Observable.of({ data: {} }).subscribe(handler_1);\n                                }\n                                return [2];\n                        }\n                    });\n                }); })();\n            }\n            return function () {\n                observers = observers.filter(function (obs) { return obs !== observer; });\n                if (observers.length === 0 && sub) {\n                    sub.unsubscribe();\n                }\n            };\n        });\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        var subscriptions = this.getQuery(queryId).subscriptions;\n        this.fetchQueryRejectFns.delete(\"query:\" + queryId);\n        this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n        subscriptions.forEach(function (x) { return x.unsubscribe(); });\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n        if (optimistic === void 0) { optimistic = true; }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query, fetchPolicy = _a.fetchPolicy;\n        var lastResult = observableQuery.getLastResult();\n        var newData = this.getQuery(observableQuery.queryId).newData;\n        if (newData && newData.complete) {\n            return { data: newData.result, partial: false };\n        }\n        else if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n            return { data: undefined, partial: false };\n        }\n        else {\n            try {\n                var data = this.dataStore.getCache().read({\n                    query: query,\n                    variables: variables,\n                    previousResult: lastResult ? lastResult.data : undefined,\n                    optimistic: optimistic,\n                }) || undefined;\n                return { data: data, partial: false };\n            }\n            catch (e) {\n                return { data: undefined, partial: true };\n            }\n        }\n    };\n    QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n        var observableQuery;\n        if (typeof queryIdOrObservable === 'string') {\n            var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n            process.env.NODE_ENV === \"production\" ? invariant(foundObserveableQuery) : invariant(foundObserveableQuery, \"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n            observableQuery = foundObserveableQuery;\n        }\n        else {\n            observableQuery = queryIdOrObservable;\n        }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query;\n        var data = this.getCurrentQueryResult(observableQuery, false).data;\n        return {\n            previousResult: data,\n            variables: variables,\n            document: query,\n        };\n    };\n    QueryManager.prototype.broadcastQueries = function (forceResolvers) {\n        var _this = this;\n        if (forceResolvers === void 0) { forceResolvers = false; }\n        this.onBroadcast();\n        this.queries.forEach(function (info, id) {\n            if (!info.invalidated || !info.listeners)\n                return;\n            info.listeners\n                .filter(function (x) { return !!x; })\n                .forEach(function (listener) {\n                listener(_this.queryStore.get(id), info.newData, forceResolvers);\n            });\n        });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableQueryPromises = function (includeStandby) {\n        var _this = this;\n        var observableQueryPromises = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (!observableQuery)\n                return;\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (fetchPolicy !== 'cache-only' &&\n                (includeStandby || fetchPolicy !== 'standby')) {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.setQuery(queryId, function () { return ({ newData: null }); });\n            _this.invalidate(true, queryId);\n        });\n        return observableQueryPromises;\n    };\n    QueryManager.prototype.fetchRequest = function (_a) {\n        var _this = this;\n        var requestId = _a.requestId, queryId = _a.queryId, document = _a.document, options = _a.options, fetchMoreForQueryId = _a.fetchMoreForQueryId;\n        var variables = options.variables, context = options.context, _b = options.errorPolicy, errorPolicy = _b === void 0 ? 'none' : _b, fetchPolicy = options.fetchPolicy;\n        var resultFromStore;\n        var errorsFromStore;\n        return new Promise(function (resolve, reject) {\n            var obs;\n            var updatedContext = {};\n            var clientQuery = _this.localState.clientQuery(document);\n            var serverQuery = _this.localState.serverQuery(document);\n            if (serverQuery) {\n                var operation = _this.buildOperationForLink(serverQuery, variables, __assign({}, context, { forceFetch: !_this.queryDeduplication }));\n                updatedContext = operation.context;\n                obs = execute(_this.deduplicator, operation);\n            }\n            else {\n                updatedContext = _this.prepareContext(context);\n                obs = Observable.of({ data: {} });\n            }\n            _this.fetchQueryRejectFns.set(\"fetchRequest:\" + queryId, reject);\n            var complete = false;\n            var handlingNext = true;\n            var subscriber = {\n                next: function (result) { return __awaiter(_this, void 0, void 0, function () {\n                    var updatedResult, lastRequestId;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                handlingNext = true;\n                                updatedResult = result;\n                                lastRequestId = this.getQuery(queryId).lastRequestId;\n                                if (!(requestId >= (lastRequestId || 1))) return [3, 3];\n                                if (!(clientQuery && hasDirectives(['client'], clientQuery))) return [3, 2];\n                                return [4, this.localState\n                                        .runResolvers({\n                                        document: clientQuery,\n                                        remoteResult: result,\n                                        context: updatedContext,\n                                        variables: variables,\n                                    })\n                                        .catch(function (error) {\n                                        handlingNext = false;\n                                        reject(error);\n                                        return result;\n                                    })];\n                            case 1:\n                                updatedResult = _a.sent();\n                                _a.label = 2;\n                            case 2:\n                                if (fetchPolicy !== 'no-cache') {\n                                    try {\n                                        this.dataStore.markQueryResult(updatedResult, document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n                                    }\n                                    catch (e) {\n                                        handlingNext = false;\n                                        reject(e);\n                                        return [2];\n                                    }\n                                }\n                                else {\n                                    this.setQuery(queryId, function () { return ({\n                                        newData: { result: updatedResult.data, complete: true },\n                                    }); });\n                                }\n                                this.queryStore.markQueryResult(queryId, updatedResult, fetchMoreForQueryId);\n                                this.invalidate(true, queryId, fetchMoreForQueryId);\n                                this.broadcastQueries();\n                                _a.label = 3;\n                            case 3:\n                                if (updatedResult.errors && errorPolicy === 'none') {\n                                    handlingNext = false;\n                                    reject(new ApolloError({\n                                        graphQLErrors: updatedResult.errors,\n                                    }));\n                                    return [2];\n                                }\n                                else if (errorPolicy === 'all') {\n                                    errorsFromStore = updatedResult.errors;\n                                }\n                                if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n                                    resultFromStore = updatedResult.data;\n                                }\n                                else {\n                                    try {\n                                        resultFromStore = this.dataStore.getCache().read({\n                                            variables: variables,\n                                            query: document,\n                                            optimistic: false,\n                                        });\n                                    }\n                                    catch (e) { }\n                                }\n                                handlingNext = false;\n                                if (complete) {\n                                    subscriber.complete();\n                                }\n                                return [2];\n                        }\n                    });\n                }); },\n                error: function (error) {\n                    _this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n                    _this.setQuery(queryId, function (_a) {\n                        var subscriptions = _a.subscriptions;\n                        return ({\n                            subscriptions: subscriptions.filter(function (x) { return x !== subscription; }),\n                        });\n                    });\n                    reject(error);\n                },\n                complete: function () {\n                    if (!handlingNext) {\n                        _this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n                        _this.setQuery(queryId, function (_a) {\n                            var subscriptions = _a.subscriptions;\n                            return ({\n                                subscriptions: subscriptions.filter(function (x) { return x !== subscription; }),\n                            });\n                        });\n                        resolve({\n                            data: resultFromStore,\n                            errors: errorsFromStore,\n                            loading: false,\n                            networkStatus: NetworkStatus.ready,\n                            stale: false,\n                        });\n                    }\n                    complete = true;\n                },\n            };\n            var subscription = obs.subscribe(subscriber);\n            _this.setQuery(queryId, function (_a) {\n                var subscriptions = _a.subscriptions;\n                return ({\n                    subscriptions: subscriptions.concat([subscription]),\n                });\n            });\n        }).catch(function (error) {\n            _this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n            throw error;\n        });\n    };\n    QueryManager.prototype.refetchQueryByName = function (queryName) {\n        var _this = this;\n        var refetchedQueries = this.queryIdsByName[queryName];\n        if (refetchedQueries === undefined)\n            return;\n        return Promise.all(refetchedQueries\n            .map(function (id) { return _this.getQuery(id).observableQuery; })\n            .filter(function (x) { return !!x; })\n            .map(function (x) { return x.refetch(); }));\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        var requestId = this.idCounter;\n        this.idCounter++;\n        return requestId;\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        return (this.queries.get(queryId) || {\n            listeners: [],\n            invalidated: false,\n            document: null,\n            newData: null,\n            lastRequestId: null,\n            observableQuery: null,\n            subscriptions: [],\n        });\n    };\n    QueryManager.prototype.setQuery = function (queryId, updater) {\n        var prev = this.getQuery(queryId);\n        var newInfo = __assign({}, prev, updater(prev));\n        this.queries.set(queryId, newInfo);\n    };\n    QueryManager.prototype.invalidate = function (invalidated, queryId, fetchMoreForQueryId) {\n        if (queryId)\n            this.setQuery(queryId, function () { return ({ invalidated: invalidated }); });\n        if (fetchMoreForQueryId) {\n            this.setQuery(fetchMoreForQueryId, function () { return ({ invalidated: invalidated }); });\n        }\n    };\n    QueryManager.prototype.buildOperationForLink = function (document, variables, extraContext) {\n        var cache = this.dataStore.getCache();\n        return {\n            query: cache.transformForLink\n                ? cache.transformForLink(document)\n                : document,\n            variables: variables,\n            operationName: getOperationName(document) || undefined,\n            context: this.prepareContext(extraContext),\n        };\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign({}, newContext, { clientAwareness: this.clientAwareness });\n    };\n    QueryManager.prototype.checkInFlight = function (queryId) {\n        var query = this.queryStore.get(queryId);\n        return (query &&\n            query.networkStatus !== NetworkStatus.ready &&\n            query.networkStatus !== NetworkStatus.error);\n    };\n    QueryManager.prototype.startPollingQuery = function (options, queryId, listener) {\n        var pollInterval = options.pollInterval;\n        process.env.NODE_ENV === \"production\" ? invariant(pollInterval) : invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n        if (!this.ssrMode) {\n            this.pollingInfoByQueryId.set(queryId, {\n                interval: pollInterval,\n                lastPollTimeMs: Date.now() - 10,\n                options: __assign({}, options, { fetchPolicy: 'network-only' }),\n            });\n            if (listener) {\n                this.addQueryListener(queryId, listener);\n            }\n            this.schedulePoll(pollInterval);\n        }\n        return queryId;\n    };\n    QueryManager.prototype.stopPollingQuery = function (queryId) {\n        this.pollingInfoByQueryId.delete(queryId);\n    };\n    QueryManager.prototype.schedulePoll = function (timeLimitMs) {\n        var _this = this;\n        var now = Date.now();\n        if (this.nextPoll) {\n            if (timeLimitMs < this.nextPoll.time - now) {\n                clearTimeout(this.nextPoll.timeout);\n            }\n            else {\n                return;\n            }\n        }\n        this.nextPoll = {\n            time: now + timeLimitMs,\n            timeout: setTimeout(function () {\n                _this.nextPoll = null;\n                var nextTimeLimitMs = Infinity;\n                _this.pollingInfoByQueryId.forEach(function (info, queryId) {\n                    if (info.interval < nextTimeLimitMs) {\n                        nextTimeLimitMs = info.interval;\n                    }\n                    if (!_this.checkInFlight(queryId)) {\n                        if (Date.now() - info.lastPollTimeMs >= info.interval) {\n                            var updateLastPollTime = function () {\n                                info.lastPollTimeMs = Date.now();\n                            };\n                            _this.fetchQuery(queryId, info.options, FetchType.poll).then(updateLastPollTime, updateLastPollTime);\n                        }\n                    }\n                });\n                if (isFinite(nextTimeLimitMs)) {\n                    _this.schedulePoll(nextTimeLimitMs);\n                }\n            }, timeLimitMs),\n        };\n    };\n    return QueryManager;\n}());\n\nvar DataStore = (function () {\n    function DataStore(initialCache) {\n        this.cache = initialCache;\n    }\n    DataStore.prototype.getCache = function () {\n        return this.cache;\n    };\n    DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n        if (ignoreErrors === void 0) { ignoreErrors = false; }\n        var writeWithErrors = !graphQLResultHasError(result);\n        if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n            writeWithErrors = true;\n        }\n        if (!fetchMoreForQueryId && writeWithErrors) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n        if (!graphQLResultHasError(result)) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_SUBSCRIPTION',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markMutationInit = function (mutation) {\n        var _this = this;\n        if (mutation.optimisticResponse) {\n            var optimistic_1;\n            if (typeof mutation.optimisticResponse === 'function') {\n                optimistic_1 = mutation.optimisticResponse(mutation.variables);\n            }\n            else {\n                optimistic_1 = mutation.optimisticResponse;\n            }\n            var changeFn_1 = function () {\n                _this.markMutationResult({\n                    mutationId: mutation.mutationId,\n                    result: { data: optimistic_1 },\n                    document: mutation.document,\n                    variables: mutation.variables,\n                    updateQueries: mutation.updateQueries,\n                    update: mutation.update,\n                });\n            };\n            this.cache.recordOptimisticTransaction(function (c) {\n                var orig = _this.cache;\n                _this.cache = c;\n                try {\n                    changeFn_1();\n                }\n                finally {\n                    _this.cache = orig;\n                }\n            }, mutation.mutationId);\n        }\n    };\n    DataStore.prototype.markMutationResult = function (mutation) {\n        var _this = this;\n        if (!graphQLResultHasError(mutation.result)) {\n            var cacheWrites_1 = [];\n            cacheWrites_1.push({\n                result: mutation.result.data,\n                dataId: 'ROOT_MUTATION',\n                query: mutation.document,\n                variables: mutation.variables,\n            });\n            if (mutation.updateQueries) {\n                Object.keys(mutation.updateQueries)\n                    .filter(function (id) { return mutation.updateQueries[id]; })\n                    .forEach(function (queryId) {\n                    var _a = mutation.updateQueries[queryId], query = _a.query, updater = _a.updater;\n                    var _b = _this.cache.diff({\n                        query: query.document,\n                        variables: query.variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _b.result, complete = _b.complete;\n                    if (!complete) {\n                        return;\n                    }\n                    var nextQueryResult = tryFunctionOrLogError(function () {\n                        return updater(currentQueryResult, {\n                            mutationResult: mutation.result,\n                            queryName: getOperationName(query.document) || undefined,\n                            queryVariables: query.variables,\n                        });\n                    });\n                    if (nextQueryResult) {\n                        cacheWrites_1.push({\n                            result: nextQueryResult,\n                            dataId: 'ROOT_QUERY',\n                            query: query.document,\n                            variables: query.variables,\n                        });\n                    }\n                });\n            }\n            this.cache.performTransaction(function (c) {\n                cacheWrites_1.forEach(function (write) { return c.write(write); });\n            });\n            var update_1 = mutation.update;\n            if (update_1) {\n                this.cache.performTransaction(function (c) {\n                    tryFunctionOrLogError(function () { return update_1(c, mutation.result); });\n                });\n            }\n        }\n    };\n    DataStore.prototype.markMutationComplete = function (_a) {\n        var mutationId = _a.mutationId, optimisticResponse = _a.optimisticResponse;\n        if (!optimisticResponse)\n            return;\n        this.cache.removeOptimistic(mutationId);\n    };\n    DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n        this.cache.write({\n            result: newResult,\n            dataId: 'ROOT_QUERY',\n            variables: variables,\n            query: document,\n        });\n    };\n    DataStore.prototype.reset = function () {\n        return this.cache.reset();\n    };\n    return DataStore;\n}());\n\nvar version = \"2.5.1\";\n\nvar hasSuggestedDevtools = false;\nvar ApolloClient = (function () {\n    function ApolloClient(options) {\n        var _this = this;\n        this.defaultOptions = {};\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        this.clientAwareness = {};\n        var cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;\n        var link = options.link;\n        if (!link && resolvers) {\n            link = ApolloLink.empty();\n        }\n        if (!link || !cache) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"\\n        In order to initialize Apollo Client, you must specify link & cache properties on the config object.\\n        This is part of the required upgrade when migrating from Apollo Client 1.0 to Apollo Client 2.0.\\n        For more information, please visit:\\n          https://www.apollographql.com/docs/react/basics/setup.html\\n        to help you get started.\\n      \");\n        }\n        var supportedCache = new Map();\n        var supportedDirectives = new ApolloLink(function (operation, forward) {\n            var result = supportedCache.get(operation.query);\n            if (!result) {\n                result = removeConnectionDirectiveFromDocument(operation.query);\n                supportedCache.set(operation.query, result);\n                supportedCache.set(result, result);\n            }\n            operation.query = result;\n            return forward(operation);\n        });\n        this.link = supportedDirectives.concat(link);\n        this.cache = cache;\n        this.store = new DataStore(cache);\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.ssrMode = ssrMode;\n        this.defaultOptions = defaultOptions || {};\n        this.typeDefs = typeDefs;\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        var defaultConnectToDevTools = process.env.NODE_ENV !== 'production' &&\n            typeof window !== 'undefined' &&\n            !window.__APOLLO_CLIENT__;\n        if (typeof connectToDevTools === 'undefined'\n            ? defaultConnectToDevTools\n            : connectToDevTools && typeof window !== 'undefined') {\n            window.__APOLLO_CLIENT__ = this;\n        }\n        if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n            hasSuggestedDevtools = true;\n            if (typeof window !== 'undefined' &&\n                window.document &&\n                window.top === window.self) {\n                if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n                    if (window.navigator &&\n                        window.navigator.userAgent &&\n                        window.navigator.userAgent.indexOf('Chrome') > -1) {\n                        console.debug('Download the Apollo DevTools ' +\n                            'for a better development experience: ' +\n                            'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n                    }\n                }\n            }\n        }\n        this.version = version;\n        if (clientAwarenessName) {\n            this.clientAwareness.name = clientAwarenessName;\n        }\n        if (clientAwarenessVersion) {\n            this.clientAwareness.version = clientAwarenessVersion;\n        }\n        this.localState = new LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher,\n        });\n    }\n    ApolloClient.prototype.stop = function () {\n        if (this.queryManager) {\n            this.queryManager.stop();\n        }\n    };\n    ApolloClient.prototype.watchQuery = function (options) {\n        if (this.defaultOptions.watchQuery) {\n            options = __assign({}, this.defaultOptions.watchQuery, options);\n        }\n        if (this.disableNetworkFetches &&\n            (options.fetchPolicy === 'network-only' ||\n                options.fetchPolicy === 'cache-and-network')) {\n            options = __assign({}, options, { fetchPolicy: 'cache-first' });\n        }\n        return this.initQueryManager().watchQuery(options);\n    };\n    ApolloClient.prototype.query = function (options) {\n        if (this.defaultOptions.query) {\n            options = __assign({}, this.defaultOptions.query, options);\n        }\n        process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'cache-and-network') : invariant(options.fetchPolicy !== 'cache-and-network', 'cache-and-network fetchPolicy can only be used with watchQuery');\n        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n            options = __assign({}, options, { fetchPolicy: 'cache-first' });\n        }\n        return this.initQueryManager().query(options);\n    };\n    ApolloClient.prototype.mutate = function (options) {\n        if (this.defaultOptions.mutate) {\n            options = __assign({}, this.defaultOptions.mutate, options);\n        }\n        return this.initQueryManager().mutate(options);\n    };\n    ApolloClient.prototype.subscribe = function (options) {\n        return this.initQueryManager().startGraphQLSubscription(options);\n    };\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.initProxy().readQuery(options, optimistic);\n    };\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.initProxy().readFragment(options, optimistic);\n    };\n    ApolloClient.prototype.writeQuery = function (options) {\n        var result = this.initProxy().writeQuery(options);\n        this.initQueryManager().broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeFragment = function (options) {\n        var result = this.initProxy().writeFragment(options);\n        this.initQueryManager().broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeData = function (options) {\n        var result = this.initProxy().writeData(options);\n        this.initQueryManager().broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return execute(this.link, payload);\n    };\n    ApolloClient.prototype.initQueryManager = function () {\n        var _this = this;\n        if (!this.queryManager) {\n            this.queryManager = new QueryManager({\n                link: this.link,\n                store: this.store,\n                queryDeduplication: this.queryDeduplication,\n                ssrMode: this.ssrMode,\n                clientAwareness: this.clientAwareness,\n                localState: this.localState,\n                onBroadcast: function () {\n                    if (_this.devToolsHookCb) {\n                        _this.devToolsHookCb({\n                            action: {},\n                            state: {\n                                queries: _this.queryManager\n                                    ? _this.queryManager.queryStore.getStore()\n                                    : {},\n                                mutations: _this.queryManager\n                                    ? _this.queryManager.mutationStore.getStore()\n                                    : {},\n                            },\n                            dataWithOptimisticResults: _this.cache.extract(true),\n                        });\n                    }\n                },\n            });\n        }\n        return this.queryManager;\n    };\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.queryManager\n                ? _this.queryManager.clearStore()\n                : Promise.resolve(null);\n        })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () {\n            return _this.queryManager && _this.queryManager.reFetchObservableQueries\n                ? _this.queryManager.reFetchObservableQueries()\n                : Promise.resolve(null);\n        });\n    };\n    ApolloClient.prototype.clearStore = function () {\n        var _this = this;\n        var queryManager = this.queryManager;\n        return Promise.resolve()\n            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () {\n            return queryManager ? queryManager.clearStore() : Promise.resolve(null);\n        });\n    };\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.onClearStore = function (cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function () {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager\n            ? this.queryManager.reFetchObservableQueries(includeStandby)\n            : Promise.resolve(null);\n    };\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.initProxy().extract(optimistic);\n    };\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.initProxy().restore(serializedState);\n    };\n    ApolloClient.prototype.addResolvers = function (resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    ApolloClient.prototype.setResolvers = function (resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    ApolloClient.prototype.getResolvers = function () {\n        return this.localState.getResolvers();\n    };\n    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    ApolloClient.prototype.initProxy = function () {\n        if (!this.proxy) {\n            this.initQueryManager();\n            this.proxy = this.cache;\n        }\n        return this.proxy;\n    };\n    return ApolloClient;\n}());\n\nexport default ApolloClient;\nexport { ApolloClient, ObservableQuery, NetworkStatus, isApolloError, ApolloError, FetchType };\n//# sourceMappingURL=bundle.esm.js.map\n"],"sourceRoot":""}