{"version":3,"sources":["webpack:///./layouts/courses/containers/courses-created.js"],"names":["drawerWidth","styles","theme","actions","display","justifyContent","appBar","zIndex","card","minHeight","flexDirection","cardGrid","padding","cardMedia","paddingTop","&:hover","cursor","cardContent","flexGrow","content","editButton","color","backgroundColor","root","width","drawer","flexShrink","drawerPaper","formControl","margin","unit","minWidth","heroUnit","paper","heroContent","maxWidth","heroButtons","marginTop","selectEmpty","searchField","icon","marginRight","layout","marginLeft","getCreatedCourses","_templateObject","initialState","search","owner","courseInput","courseName","selectionBox","resources","teachingLang","usingLang","items","next","resetCursor","CoursesCreatedContainer","state","cloneDeep","handleImageClick","data","history","pathname","courseId","id","this","props","toggleFooter","_this2","classes","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","Fragment","className","autoComplete","_material_ui_core_Drawer__WEBPACK_IMPORTED_MODULE_17___default","variant","_components__WEBPACK_IMPORTED_MODULE_20__","align","_material_ui_core_Link__WEBPACK_IMPORTED_MODULE_19___default","component","react_router_dom__WEBPACK_IMPORTED_MODULE_9__","to","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_22___default","gutterBottom","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_18___default","react_helmet__WEBPACK_IMPORTED_MODULE_10__","charset","name","rel","href","react_apollo__WEBPACK_IMPORTED_MODULE_24__","query","fetchPolicy","errorPolicy","variables","_ref2","loading","error","fetchMore","style","textAlign","_ref3","i","message","mappedKey","classNames","container","spacing","item","key","_id","xs","sm","md","lg","_material_ui_core_Card__WEBPACK_IMPORTED_MODULE_13___default","_material_ui_core_CardMedia__WEBPACK_IMPORTED_MODULE_16___default","onClick","image","courseImage","title","_material_ui_core_CardContent__WEBPACK_IMPORTED_MODULE_15___default","_material_ui_core_CardActions__WEBPACK_IMPORTED_MODULE_14___default","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_12___default","size","console","updateQuery","previousResult","_ref4","fetchMoreResult","newCourses","courses","length","__typename","PureComponent","mapDispatchToProps","connect","withStyles","_default2","__webpack_exports__"],"mappings":"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","file":"bundle.courses-created.7cc9e92174eaa80085aa.js","sourcesContent":["import React, {PureComponent} from \"react\"\nimport {connect} from \"react-redux\"\nimport {Link as RouterLink} from \"react-router-dom\"\nimport {Helmet} from \"react-helmet\"\n\nimport classNames from \"classnames\"\nimport Button from \"@material-ui/core/Button\"\nimport Card from \"@material-ui/core/Card\"\nimport CardActions from \"@material-ui/core/CardActions\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport CardMedia from \"@material-ui/core/CardMedia\"\nimport Drawer from \"@material-ui/core/Drawer\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Link from \"@material-ui/core/Link\"\nimport {GraphError, Spacer, LoaderCircle} from \"../../../components\"\nimport {withStyles} from \"@material-ui/core/styles\"\nimport Typography from \"@material-ui/core/Typography\"\nimport cloneDeep from \"lodash/cloneDeep\"\n/* import update from \"immutability-helper\" */\n\nimport {Query} from \"react-apollo\"\nimport gql from \"graphql-tag\"\n\nimport {history} from \"@utterzone/connector\"\nimport {toggleFooter} from \"../../../core/actions/toggle-footer-action.js\"\n/* import isEmpty from \"lodash/isEmpty\" */\nimport \"react-select/dist/react-select.css\"\n\nconst drawerWidth = 240\nconst styles = theme => ({\n  actions: {\n    display: \"flex\",\n    justifyContent: \"flex-end\"\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1\n  },\n  card: {\n    minHeight: \"300px\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardGrid: {\n    padding: `${theme.spacing.unit * 8}px 0`\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\", // 16:9\n    \"&:hover\": {\n      cursor: \"pointer\"\n    }\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing.unit * 3\n  },\n  editButton: {\n    color: \"white\",\n    backgroundColor: \"#ff7f7e\",\n    \"&:hover\": {\n      backgroundColor: \"#c56564\"\n    }\n  },\n  root: {\n    display: \"flex\",\n    flexGrow: 1,\n    width: \"100%\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    minWidth: 120\n  },\n  heroUnit: {\n    backgroundColor: theme.palette.background.paper\n  },\n  heroContent: {\n    maxWidth: 600,\n    margin: \"0 auto\",\n    padding: `${theme.spacing.unit * 8}px 0 ${theme.spacing.unit * 6}px`\n  },\n  heroButtons: {\n    marginTop: theme.spacing.unit * 4\n  },\n  selectEmpty: {\n    marginTop: theme.spacing.unit * 2\n  },\n  searchField: {\n    marginTop: \"7px\"\n  },\n\n  icon: {\n    marginRight: theme.spacing.unit * 2\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing.unit * 3,\n    marginRight: theme.spacing.unit * 3,\n    [theme.breakpoints.up(1100 + theme.spacing.unit * 3 * 2)]: {\n      width: 1100,\n      marginLeft: \"auto\",\n      marginRight: \"auto\"\n    }\n  }\n})\n\nconst getCreatedCourses = gql`\n  query getCreatedCourses($cursor: String) {\n    getCreatedCourses(cursor: $cursor) {\n      courses {\n        _id\n        courseImage\n        courseDescription\n        courseName\n        courseMode\n        owner {\n          username\n        }\n      }\n      cursor\n    }\n  }\n`\n\nconst initialState = {\n  search: \"\",\n  owner: \"\",\n  courseInput: \"\",\n  courseName: \"\",\n  selectionBox: \"title\",\n  resources: [],\n  teachingLang: \"\",\n  usingLang: \"\",\n  items: \"\",\n  next: \"\",\n  resetCursor: \"\"\n}\n\nclass CoursesCreatedContainer extends PureComponent {\n  state = cloneDeep(initialState)\n\n  componentDidMount() {\n    this.props.toggleFooter(false)\n  }\n\n  handleImageClick = data => {\n    const payload = {}\n    payload.course = data\n\n    history.push({\n      pathname: \"/course/course-introduction\",\n      state: {courseId: data.id}\n    })\n  }\n\n  render() {\n    const {classes} = this.props\n\n    return (\n      <React.Fragment>\n        <form className={classes.root} autoComplete=\"off\">\n          <Drawer\n            className={classes.drawer}\n            variant=\"permanent\"\n            classes={{\n              paper: classes.drawerPaper\n            }}>\n            <Spacer margin=\"100px 0 0 0\" />\n            <div align=\"center\">\n              <Spacer margin=\"40px 0 0 0\" />\n              <Link component={RouterLink} to=\"/courses/create\">\n                <Typography align=\"center\" gutterBottom>\n                  Create a Course\n                </Typography>\n              </Link>\n            </div>\n          </Drawer>\n          <main className={classes.content}>\n            <Grid>\n              <Helmet>\n                <meta charset=\"utf-8\" />\n                <meta\n                  name=\"viewport\"\n                  content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n                />\n                <meta\n                  name=\"description\"\n                  content=\"Make direct contact with our team throught our contact information form.  We will do our best to respond in a timely manner.  If you are a business or educational institution this would be an ideal place to shoot a short inquiry.\"\n                />\n                <meta name=\"author\" content=\"Isaac Pak\" />\n                <title>Utterzone | Courses</title>\n                <link rel=\"canonical\" href=\"https://utter.zone/courses\" />\n              </Helmet>\n\n              {/* Hero unit */}\n              <div className={classes.heroUnit}>\n                <div className={classes.heroContent}>\n                  <Typography\n                    variant=\"h4\"\n                    align=\"center\"\n                    color=\"textPrimary\"\n                    gutterBottom>\n                    Edit one of your Courses\n                  </Typography>\n                </div>\n              </div>\n              {/* End hero unit */}\n              {/* TODO: remove network only by writing new courses to the cache */}\n              <Query\n                query={getCreatedCourses}\n                fetchPolicy=\"network-only\"\n                errorPolicy=\"all\"\n                variables={{\n                  cursor: \"\"\n                }}>\n                {({loading, data, error, fetchMore}) => {\n                  if (loading)\n                    return (\n                      <Grid style={{textAlign: \"center\", margin: \"160px\"}}>\n                        <LoaderCircle />\n                      </Grid>\n                    )\n\n                  if (error) {\n                    return (\n                      <Grid>\n                        {error.graphQLErrors.map(({message}, i) => (\n                          <GraphError mappedKey={i}>{message}</GraphError>\n                        ))}\n                      </Grid>\n                    )\n                  }\n                  return (\n                    <div>\n                      <div\n                        className={classNames(\n                          classes.layout,\n                          classes.cardGrid\n                        )}>\n                        {/* End hero unit */}\n                        <Grid container spacing={8}>\n                          {data.getCreatedCourses.courses.map(card => (\n                            <Grid\n                              item\n                              key={card._id}\n                              xs={12}\n                              sm={12}\n                              md={4}\n                              lg={3}>\n                              <Card className={classes.card}>\n                                <CardMedia\n                                  onClick={() => this.handleImageClick(card)}\n                                  className={classes.cardMedia}\n                                  image={`${card.courseImage}`}\n                                  title={`${card.courseName}`}\n                                />\n                                <CardContent className={classes.cardContent}>\n                                  <Typography\n                                    gutterBottom\n                                    variant=\"h6\"\n                                    component=\"h6\">\n                                    {card.courseName}\n                                  </Typography>\n                                </CardContent>\n                                <CardActions className={classes.actions}>\n                                  <Button\n                                    onClick={() => this.handleImageClick(card)}\n                                    size=\"large\"\n                                    className={classes.editButton}>\n                                    Edit\n                                  </Button>\n                                </CardActions>\n                              </Card>\n                            </Grid>\n                          ))}\n                        </Grid>\n                      </div>\n                      {console.log(\"data: \", data)}\n                      {data.getCreatedCourses &&\n                        data.getCreatedCourses.cursor !== \"done\" && (\n                          <Button\n                            onClick={() =>\n                              fetchMore({\n                                variables: {\n                                  cursor: data.getCreatedCourses.cursor\n                                },\n                                updateQuery: (\n                                  previousResult,\n                                  {fetchMoreResult}\n                                ) => {\n                                  const newCourses =\n                                    fetchMoreResult.getCreatedCourses.courses\n                                  const {\n                                    cursor\n                                  } = fetchMoreResult.getCreatedCourses\n\n                                  return newCourses.length\n                                    ? {\n                                        // Put the new getCreatedCourses at the end of the list and update `cursor`\n                                        // so we have the new `endCursor` and `hasNextPage` values\n                                        getCreatedCourses: {\n                                          __typename:\n                                            previousResult.getCreatedCourses\n                                              .__typename,\n                                          courses: [\n                                            ...previousResult.getCreatedCourses\n                                              .courses,\n                                            ...newCourses\n                                          ],\n                                          cursor\n                                        }\n                                      }\n                                    : previousResult\n                                }\n                              })\n                            }>\n                            Load More\n                          </Button>\n                        )}\n                    </div>\n                  )\n                }}\n              </Query>\n            </Grid>\n          </main>\n        </form>\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapDispatchToProps = () => {\n  return {\n    toggleFooter\n  }\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(withStyles(styles)(CoursesCreatedContainer))\n"],"sourceRoot":""}