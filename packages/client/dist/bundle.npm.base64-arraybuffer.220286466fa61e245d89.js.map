{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/base64-arraybuffer/lib/base64-arraybuffer.js"],"names":["chars","lookup","Uint8Array","i","length","charCodeAt","exports","encode","arraybuffer","bytes","len","base64","substring","decode","encoded1","encoded2","encoded3","encoded4","bufferLength","p","ArrayBuffer"],"mappings":"8EAOA,WACA,aAMA,IAJA,IAAAA,EAAA,mEAGAC,EAAA,IAAAC,WAAA,KACAC,EAAA,EAAiBA,EAAAH,EAAAI,OAAkBD,IACnCF,EAAAD,EAAAK,WAAAF,MAGAG,EAAAC,OAAA,SAAAC,GACA,IACAL,EADAM,EAAA,IAAAP,WAAAM,GACAE,EAAAD,EAAAL,OAAAO,EAAA,GAEA,IAAAR,EAAA,EAAeA,EAAAO,EAASP,GAAA,EACxBQ,GAAAX,EAAAS,EAAAN,IAAA,GACAQ,GAAAX,GAAA,EAAAS,EAAAN,KAAA,EAAAM,EAAAN,EAAA,OACAQ,GAAAX,GAAA,GAAAS,EAAAN,EAAA,OAAAM,EAAAN,EAAA,OACAQ,GAAAX,EAAA,GAAAS,EAAAN,EAAA,IASA,OANAO,EAAA,KACAC,IAAAC,UAAA,EAAAD,EAAAP,OAAA,OACKM,EAAA,OACLC,IAAAC,UAAA,EAAAD,EAAAP,OAAA,SAGAO,GAGAL,EAAAO,OAAA,SAAAF,GACA,IACAR,EACAW,EAAAC,EAAAC,EAAAC,EAFAC,EAAA,IAAAP,EAAAP,OACAM,EAAAC,EAAAP,OAAAe,EAAA,EAGA,MAAAR,IAAAP,OAAA,KACAc,IACA,MAAAP,IAAAP,OAAA,IACAc,KAIA,IAAAV,EAAA,IAAAY,YAAAF,GACAT,EAAA,IAAAP,WAAAM,GAEA,IAAAL,EAAA,EAAeA,EAAAO,EAASP,GAAA,EACxBW,EAAAb,EAAAU,EAAAN,WAAAF,IACAY,EAAAd,EAAAU,EAAAN,WAAAF,EAAA,IACAa,EAAAf,EAAAU,EAAAN,WAAAF,EAAA,IACAc,EAAAhB,EAAAU,EAAAN,WAAAF,EAAA,IAEAM,EAAAU,KAAAL,GAAA,EAAAC,GAAA,EACAN,EAAAU,MAAA,GAAAJ,IAAA,EAAAC,GAAA,EACAP,EAAAU,MAAA,EAAAH,IAAA,KAAAC,EAGA,OAAAT,GAzDA","file":"bundle.npm.base64-arraybuffer.220286466fa61e245d89.js","sourcesContent":["/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n(function(){\n  \"use strict\";\n\n  var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n  // Use a lookup table to find the index.\n  var lookup = new Uint8Array(256);\n  for (var i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n  }\n\n  exports.encode = function(arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer),\n    i, len = bytes.length, base64 = \"\";\n\n    for (i = 0; i < len; i+=3) {\n      base64 += chars[bytes[i] >> 2];\n      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n      base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if ((len % 3) === 2) {\n      base64 = base64.substring(0, base64.length - 1) + \"=\";\n    } else if (len % 3 === 1) {\n      base64 = base64.substring(0, base64.length - 2) + \"==\";\n    }\n\n    return base64;\n  };\n\n  exports.decode =  function(base64) {\n    var bufferLength = base64.length * 0.75,\n    len = base64.length, i, p = 0,\n    encoded1, encoded2, encoded3, encoded4;\n\n    if (base64[base64.length - 1] === \"=\") {\n      bufferLength--;\n      if (base64[base64.length - 2] === \"=\") {\n        bufferLength--;\n      }\n    }\n\n    var arraybuffer = new ArrayBuffer(bufferLength),\n    bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i+=4) {\n      encoded1 = lookup[base64.charCodeAt(i)];\n      encoded2 = lookup[base64.charCodeAt(i+1)];\n      encoded3 = lookup[base64.charCodeAt(i+2)];\n      encoded4 = lookup[base64.charCodeAt(i+3)];\n\n      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n  };\n})();\n"],"sourceRoot":""}