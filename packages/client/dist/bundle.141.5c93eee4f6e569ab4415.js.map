{"version":3,"sources":["webpack:///./layouts/courses/containers/course-settings.js"],"names":["CourseSettings","state","name","email","submittedName","submittedEmail","handleChange","e","_ref2","value","_this","setState","babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default","handleSubmit","_this$state","openModalClicked","props","openModal","this","toggleFooter","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","semantic_ui_react__WEBPACK_IMPORTED_MODULE_10__","_containers__WEBPACK_IMPORTED_MODULE_14__","padding","semantic_ui_react__WEBPACK_IMPORTED_MODULE_11__","as","react_helmet__WEBPACK_IMPORTED_MODULE_7___default","charset","content","rel","href","semantic_ui_react__WEBPACK_IMPORTED_MODULE_12__","onSubmit","style","position","_containers_modals_modal_mgr_js__WEBPACK_IMPORTED_MODULE_9__","paddingBottom","text","attached","block","semantic_ui_react__WEBPACK_IMPORTED_MODULE_13__","Button","color","onClick","floated","onButtonClick","fontSize","right","Component","mapStateToProps","session","schema","apiReducer","User","course","Course","ref","user","toRefArray","actions","_containers_modals_actions_js__WEBPACK_IMPORTED_MODULE_16__","connect","_default2","__webpack_exports__"],"mappings":"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","file":"bundle.141.5c93eee4f6e569ab4415.js","sourcesContent":["import React, {Component} from \"react\"\nimport {connect} from \"react-redux\"\nimport Helmet from \"react-helmet\"\n/* import {Can} from \"../../../components\" */\nimport schema from \"../../../app/schema\"\nimport ModalMgr from \"../../../containers/modals/modal-mgr.js\"\n/* import {history} from \"@utterzone/connector\" */\nimport {Container, Header, Form, Segment} from \"semantic-ui-react\"\nimport {Masthead} from \"../../../containers\"\n/* import {getEntitiesSession} from \"../../../api/entities/selectors.js\" */\n\n// actions\nimport {toggleFooter} from \"../../../app/actions/toggle-footer-action.js\"\nimport {openModal} from \"../../../containers/modals/actions.js\"\n\nclass CourseSettings extends Component {\n  state = {name: \"\", email: \"\", submittedName: \"\", submittedEmail: \"\"}\n\n  componentDidMount() {\n    this.props.toggleFooter(false)\n  }\n\n  handleChange = (e, {name, value}) => this.setState({[name]: value})\n\n  handleSubmit = () => {\n    const {name, email} = this.state\n\n    this.setState({submittedName: name, submittedEmail: email})\n  }\n\n  openModalClicked = e => {\n    e.preventDefault()\n    this.props.openModal(\"courseModal\", null)\n  }\n\n  render() {\n    /* const {name, email, submittedName, submittedEmail} = this.state */\n    /* const {user} = this.props */\n\n    return (\n      <div>\n        <Container>\n          <Container>\n            <Masthead padding=\"60px 20px 40px  20px\">\n              <Header as=\"h1\">Course Settings</Header>\n            </Masthead>\n            <Helmet>\n              <meta charset=\"utf-8\" />\n              <meta\n                name=\"viewport\"\n                content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n              />\n              <meta name=\"description\" content=\"Affordable language learning\" />\n              <meta name=\"author\" content=\"Isaac Pak\" />\n              <title>Utterzone | Settings</title>\n              <link rel=\"canonical\" href=\"https://utter.zone/settings\" />\n            </Helmet>\n          </Container>\n          <Form onSubmit={this.handleSubmit} style={{position: \"relative\"}}>\n            <ModalMgr />\n            <Container style={{paddingBottom: \"5em\"}} text>\n              <Header as=\"h2\">General Settings</Header>\n              <Header as=\"h4\" attached=\"top\" block />\n              <Segment attached>General</Segment>\n              <Header as=\"h4\" attached=\"bottom\" block />\n            </Container>\n            <Container style={{paddingBottom: \"5em\"}} text>\n              <Header as=\"h2\">Danger Zone</Header>\n              <Header as=\"h4\" attached=\"top\" block />\n              <Segment attached>This is permanent</Segment>\n              <Form.Button color=\"red\" onClick={this.openModalClicked} attached>\n                Delete Course\n              </Form.Button>\n              <Header as=\"h4\" attached=\"bottom\" block />\n            </Container>\n            {/*\n            <Form.Group>\n              <Segment>\n                <Grid>\n                  <Grid.Column width={8}>\n                    <Segment>\n                      <div>\n                        {this.state.secure_url === \"\" ? null : (\n                          <Form.Field\n                            label=\"Course Thumbnail Preview\"\n                            name=\"image\"\n                            control={Image}\n                            src={this.props.course.courseImage}\n                            size=\"small\"\n                          />\n                        )}\n                      </div>\n                      <p>{this.state.uploadedFile.name}</p>\n                      <Dropzone\n                        style={{\n                          padding: \"3px\",\n                          position: \"relative\",\n                          width: \"100px\",\n                          height: \"50px\",\n                          borderWidth: \"2px\",\n                          borderColor: \"rgb(102, 102, 102)\",\n                          borderStyle: \"dashed\",\n                          borderRadius: \"5px\"\n                        }}\n                        multiple={false}\n                        accept=\"image/*\"\n                        onDrop={this.onImageDrop}>\n                        <p>\n                          Drop an image or click to select a file to upload.\n                        </p>\n                      </Dropzone>\n                    </Segment>\n                    <FormEditWrapper\n                      singleValue\n                      value={{courseName}}\n                      onChange={this.inputChange}>\n                      <Form.Field\n                        label=\"Course Name\"\n                        name=\"courseName\"\n                        control={Input}\n                        placeholder=\"Name\"\n                      />\n                    </FormEditWrapper>\n                    <FormEditWrapper\n                      singleValue\n                      value={{courseDescription}}\n                      onChange={this.inputChange}>\n                      <Form.Field\n                        label=\"Course Description\"\n                        name=\"courseDescription\"\n                        control={TextArea}\n                        placeholder=\"This section will describe this course.\"\n                      />\n                    </FormEditWrapper>\n                  </Grid.Column>\n                  <Grid.Column width={8}>\n                    <Segment>\n                      <Label>Course Reference</Label>\n                      <Select.Creatable\n                        id=\"courseRef\"\n                        wrapperStyle={{\n                          margin: \"20px 0 0 0\",\n                          width: \"100%\"\n                        }}\n                        style={{\n                          width: \"100%\"\n                        }}\n                        menuContainerStyle={{\n                          width: \"100%\"\n                        }}\n                        menuStyle={{\n                          width: \"100%\"\n                        }}\n                        multi={multi}\n                        options={options}\n                        onChange={this.updateValue}\n                        value={multi ? multiValue : value}\n                      />\n                      <Label>Using Language</Label>\n                      <Select\n                        id=\"usingLang\"\n                        /* ref={ref => { */\n            /*   this.select = ref */\n            /* }} \n                        onBlurResetsInput={false}\n                        onSelectResetsInput={false}\n                        options={languageData}\n                        simpleValue\n                        clearable={this.state.clearable}\n                        wrapperStyle={{\n                          margin: \"20px 0 0 0\",\n                          width: \"100%\"\n                        }}\n                        style={{\n                          width: \"100%\"\n                        }}\n                        menuContainerStyle={{\n                          width: \"100%\"\n                        }}\n                        menuStyle={{\n                          width: \"100%\"\n                        }}\n                        name=\"usingLang\"\n                        disabled={this.state.disabled}\n                        value={course.usingLang}\n                        onChange={this.usingDropdownChange}\n                        rtl={this.state.rtl}\n                        searchable={this.state.searchable}\n                      />\n                      <Label>Teaching Language</Label>\n                      <Select\n                        id=\"teachingLang\"\n                        /* ref={ref => { */\n            /*   this.select = ref */\n            /* }} \n                        onBlurResetsInput={false}\n                        onSelectResetsInput={false}\n                        options={languageData}\n                        simpleValue\n                        clearable={this.state.clearable}\n                        wrapperStyle={{\n                          margin: \"20px 0 0 0\",\n                          width: \"100%\"\n                        }}\n                        style={{\n                          width: \"100%\"\n                        }}\n                        menuContainerStyle={{\n                          width: \"100%\"\n                        }}\n                        menuStyle={{\n                          width: \"100%\"\n                        }}\n                        name=\"teachingLang\"\n                        disabled={this.state.disabled}\n                        value={course.teachingLang}\n                        onChange={this.teachingDropdownChange}\n                        rtl={this.state.rtl}\n                        searchable={this.state.searchable}\n                      />\n                    </Segment>\n                    <Button\n                      style={{background: \"#F6D155\"}}\n                      loading={this.props.courseMeta.loading}>\n                      Save\n                    </Button>\n                  </Grid.Column>\n                </Grid>\n              </Segment>\n            </Form.Group>\n\t\t\t\t*/}\n            <Container\n              style={{position: \"relative\", paddingBottom: \"5em\"}}\n              text>\n              <Form.Button\n                floated=\"right\"\n                onClick={this.onButtonClick}\n                content=\"Save Changes\"\n                color=\"yellow\"\n                fontSize=\"1.5rem\"\n                style={{position: \"absolute\", right: \"0\"}}\n              />\n            </Container>\n          </Form>\n        </Container>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  const session = schema.session(state.apiReducer)\n  const {User, Course} = session\n  const course = Course.first().ref\n  const userObj = User.all().toRefArray()\n  const user = {user: userObj[0]}\n  return {\n    user,\n    course\n  }\n}\n\nconst actions = {\n  openModal,\n  toggleFooter\n}\n\nexport default connect(\n  mapStateToProps,\n  actions\n)(CourseSettings)\n"],"sourceRoot":""}