{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/cuid/lib/fingerprint.browser.js","webpack:////var/www/html/utter/node_modules/cuid/lib/pad.js","webpack:////var/www/html/utter/node_modules/cuid/index.js"],"names":["pad","__webpack_require__","env","window","self","globalCount","Object","keys","length","clientId","navigator","mimeTypes","userAgent","toString","module","exports","num","size","s","substr","fingerprint","c","blockSize","base","discreteValues","Math","pow","randomBlock","random","safeCounter","cuid","Date","getTime","slug","date","counter","slice","print","isCuid","stringToCheck","startsWith","isSlug","stringLength"],"mappings":"iFAAA,IAAAA,EAAUC,EAAQ,QAElBC,EAAA,iBAAAC,cAAAC,KACAC,EAAAC,OAAAC,KAAAL,GAAAM,OAEAC,EAAAT,IADAU,UAAAC,UAAAD,UAAAC,UAAAH,OAAA,GAEAE,UAAAE,UAAAJ,QAAAK,SAAA,IACAR,EAAAQ,SAAA,OAEAC,EAAAC,QAAA,WACA,OAAAN,uBCVAK,EAAAC,QAAA,SAAAC,EAAAC,GACA,IAAAC,EAAA,YAAAF,EACA,OAAAE,EAAAC,OAAAD,EAAAV,OAAAS,0BCUA,IAAAG,EAAkBnB,EAAQ,QAC1BD,EAAUC,EAAQ,QAElBoB,EAAA,EACAC,EAAA,EACAC,EAAA,GACAC,EAAAC,KAAAC,IAAAH,EAAAD,GAEA,SAAAK,IACA,OAAA3B,GAAAyB,KAAAG,SACAJ,GAAA,GACAX,SAAAU,GAAAD,GAGA,SAAAO,IAGA,OAFAR,IAAAG,EAAAH,EAAA,IACAA,EACA,EAGA,SAAAS,IAqBA,MAlBA,KAKA,IAAAC,MAAAC,UAAAnB,SAAAU,GAGAvB,EAAA6B,IAAAhB,SAAAU,GAAAD,GAKAF,KAGAO,SAKAG,EAAAG,KAAA,WACA,IAAAC,GAAA,IAAAH,MAAAC,UAAAnB,SAAA,IACAsB,EAAAN,IAAAhB,SAAA,IAAAuB,OAAA,GACAC,EAAAjB,IAAAgB,MAAA,KACAhB,IAAAgB,OAAA,GACAR,EAAAD,IAAAS,OAAA,GAEA,OAAAF,EAAAE,OAAA,GACAD,EAAAE,EAAAT,GAGAE,EAAAQ,OAAA,SAAAC,GACA,uBAAAA,KACAA,EAAAC,WAAA,MAIAV,EAAAW,OAAA,SAAAF,GACA,oBAAAA,EAAA,SACA,IAAAG,EAAAH,EAAA/B,OACA,OAAAkC,GAAA,GAAAA,GAAA,IAIAZ,EAAAV,cAEAN,EAAAC,QAAAe","file":"bundle.npm.cuid.6254262b4a366399c0ea.js","sourcesContent":["var pad = require('./pad.js');\n\nvar env = typeof window === 'object' ? window : self;\nvar globalCount = Object.keys(env).length;\nvar mimeTypesLength = navigator.mimeTypes ? navigator.mimeTypes.length : 0;\nvar clientId = pad((mimeTypesLength +\n  navigator.userAgent.length).toString(36) +\n  globalCount.toString(36), 4);\n\nmodule.exports = function fingerprint () {\n  return clientId;\n};\n","module.exports = function pad (num, size) {\n  var s = '000000000' + num;\n  return s.substr(s.length - size);\n};\n","/**\n * cuid.js\n * Collision-resistant UID generator for browsers and node.\n * Sequential for fast db lookups and recency sorting.\n * Safe for element IDs and server-side lookups.\n *\n * Extracted from CLCTR\n *\n * Copyright (c) Eric Elliott 2012\n * MIT License\n */\n\nvar fingerprint = require('./lib/fingerprint.js');\nvar pad = require('./lib/pad.js');\n\nvar c = 0,\n  blockSize = 4,\n  base = 36,\n  discreteValues = Math.pow(base, blockSize);\n\nfunction randomBlock () {\n  return pad((Math.random() *\n    discreteValues << 0)\n    .toString(base), blockSize);\n}\n\nfunction safeCounter () {\n  c = c < discreteValues ? c : 0;\n  c++; // this is not subliminal\n  return c - 1;\n}\n\nfunction cuid () {\n  // Starting with a lowercase letter makes\n  // it HTML element ID friendly.\n  var letter = 'c', // hard-coded allows for sequential access\n\n    // timestamp\n    // warning: this exposes the exact date and time\n    // that the uid was created.\n    timestamp = (new Date().getTime()).toString(base),\n\n    // Prevent same-machine collisions.\n    counter = pad(safeCounter().toString(base), blockSize),\n\n    // A few chars to generate distinct ids for different\n    // clients (so different computers are far less\n    // likely to generate the same id)\n    print = fingerprint(),\n\n    // Grab some more chars from Math.random()\n    random = randomBlock() + randomBlock();\n\n  return letter + timestamp + counter + print + random;\n}\n\ncuid.slug = function slug () {\n  var date = new Date().getTime().toString(36),\n    counter = safeCounter().toString(36).slice(-4),\n    print = fingerprint().slice(0, 1) +\n      fingerprint().slice(-1),\n    random = randomBlock().slice(-2);\n\n  return date.slice(-2) +\n    counter + print + random;\n};\n\ncuid.isCuid = function isCuid (stringToCheck) {\n  if (typeof stringToCheck !== 'string') return false;\n  if (stringToCheck.startsWith('c')) return true;\n  return false;\n};\n\ncuid.isSlug = function isSlug (stringToCheck) {\n  if (typeof stringToCheck !== 'string') return false;\n  var stringLength = stringToCheck.length;\n  if (stringLength >= 7 && stringLength <= 10) return true;\n  return false;\n};\n\ncuid.fingerprint = fingerprint;\n\nmodule.exports = cuid;\n"],"sourceRoot":""}