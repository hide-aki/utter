{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/jss-camel-case/lib/index.js"],"names":["Object","defineProperty","exports","value","onProcessStyle","style","Array","isArray","index","length","convertCase","onChangeValue","prop","rule","hyphenatedProp","_hyphenateStyleName2","obj","_hyphenateStyleName","__webpack_require__","__esModule","default","converted","fallbacks","map"],"mappings":"4FAEAA,OAAAC,eAAAC,EAAA,cACAC,OAAA,IAEAD,EAAA,QAiCA,WAyBA,OAAUE,eAxBV,SAAAC,GACA,GAAAC,MAAAC,QAAAF,GAAA,CAEA,QAAAG,EAAA,EAAyBA,EAAAH,EAAAI,OAAsBD,IAC/CH,EAAAG,GAAAE,EAAAL,EAAAG,IAEA,OAAAH,EAGA,OAAAK,EAAAL,IAeUM,cAZV,SAAAR,EAAAS,EAAAC,GACA,IAAAC,GAAA,EAAAC,EAAA,SAAAH,GAGA,OAAAA,IAAAE,EAAAX,GAEAU,EAAAD,KAAAE,EAAAX,GAGA,SArDA,IAIAa,EAJAC,EAA0BC,EAAQ,QAElCH,GAEAC,EAFAC,IAEsCD,EAAAG,WAAAH,EAAA,CAAuCI,QAAAJ,GAQ7E,SAAAN,EAAAL,GACA,IAAAgB,EAAA,GAEA,QAAAT,KAAAP,EACAgB,GAAA,EAAAN,EAAA,SAAAH,IAAAP,EAAAO,GAOA,OAJAP,EAAAiB,YACAhB,MAAAC,QAAAF,EAAAiB,WAAAD,EAAAC,UAAAjB,EAAAiB,UAAAC,IAAAb,GAA+FW,EAAAC,UAAAZ,EAAAL,EAAAiB,YAG/FD","file":"bundle.npm.jss-camel-case.9d6fd4e968b173ef24ce.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = camelCase;\n\nvar _hyphenateStyleName = require('hyphenate-style-name');\n\nvar _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Convert camel cased property names to dash separated.\n *\n * @param {Object} style\n * @return {Object}\n */\nfunction convertCase(style) {\n  var converted = {};\n\n  for (var prop in style) {\n    converted[(0, _hyphenateStyleName2['default'])(prop)] = style[prop];\n  }\n\n  if (style.fallbacks) {\n    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);\n  }\n\n  return converted;\n}\n\n/**\n * Allow camel cased property names by converting them back to dasherized.\n *\n * @param {Rule} rule\n */\nfunction camelCase() {\n  function onProcessStyle(style) {\n    if (Array.isArray(style)) {\n      // Handle rules like @font-face, which can have multiple styles in an array\n      for (var index = 0; index < style.length; index++) {\n        style[index] = convertCase(style[index]);\n      }\n      return style;\n    }\n\n    return convertCase(style);\n  }\n\n  function onChangeValue(value, prop, rule) {\n    var hyphenatedProp = (0, _hyphenateStyleName2['default'])(prop);\n\n    // There was no camel case in place\n    if (prop === hyphenatedProp) return value;\n\n    rule.prop(hyphenatedProp, value);\n\n    // Core will ignore that property value we set the proper one above.\n    return null;\n  }\n\n  return { onProcessStyle: onProcessStyle, onChangeValue: onChangeValue };\n}"],"sourceRoot":""}