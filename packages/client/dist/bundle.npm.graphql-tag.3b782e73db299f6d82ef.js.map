{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/graphql-tag/src/index.js"],"names":["parse","__webpack_require__","normalize","string","replace","trim","docCache","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","parseDocument","doc","cacheKey","parsed","kind","Error","stripLoc","removeLocAtThisLevel","docType","Object","prototype","toString","call","map","d","loc","startToken","endToken","key","value","valueType","keys","hasOwnProperty","ast","astFragmentMap","definitions","i","length","fragmentDefinition","fragmentName","name","sourceKey","source","body","substring","start","end","console","warn","push","processFragments","gql","args","Array","slice","arguments","literals","result","default","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","module","exports"],"mappings":"+EAAA,IAEAA,EAFaC,EAAQ,QAErBD,MAIA,SAAAE,EAAAC,GACA,OAAAA,EAAAC,QAAA,eAAAC,OAIA,IAAAC,EAAA,GAGAC,EAAA,GAeA,IAAAC,GAAA,EA2FA,IAAAC,GAAA,EACA,SAAAC,EAAAC,GACA,IAAAC,EAAAV,EAAAS,GAEA,GAAAL,EAAAM,GACA,OAAAN,EAAAM,GAGA,IAAAC,EAAAb,EAAAW,EAAA,CAA2BF,kCAC3B,IAAAI,GAAA,aAAAA,EAAAC,KACA,UAAAC,MAAA,iCASA,OAHAF,EA5DA,SAAAG,EAAAL,EAAAM,GACA,IAAAC,EAAAC,OAAAC,UAAAC,SAAAC,KAAAX,GAEA,sBAAAO,EACA,OAAAP,EAAAY,IAAA,SAAAC,GACA,OAAAR,EAAAQ,EAAAP,KAIA,uBAAAC,EACA,UAAAH,MAAA,qBAKAE,GAAAN,EAAAc,YACAd,EAAAc,IAIAd,EAAAc,aACAd,EAAAc,IAAAC,kBACAf,EAAAc,IAAAE,UAGA,IACAC,EACAC,EACAC,EAHAC,EAAAZ,OAAAY,KAAApB,GAKA,IAAAiB,KAAAG,EACAA,EAAAC,eAAAJ,KACAC,EAAAlB,EAAAoB,EAAAH,IAGA,qBAFAE,EAAAX,OAAAC,UAAAC,SAAAC,KAAAO,KAEA,mBAAAC,IACAnB,EAAAoB,EAAAH,IAAAZ,EAAAa,GAAA,KAKA,OAAAlB,EAmBAK,CADAH,EAzGA,SAAAoB,GAIA,IAHA,IAfAR,EAeAS,EAAA,GACAC,EAAA,GAEAC,EAAA,EAAiBA,EAAAH,EAAAE,YAAAE,OAA4BD,IAAA,CAC7C,IAAAE,EAAAL,EAAAE,YAAAC,GAEA,0BAAAE,EAAAxB,KAAA,CACA,IAAAyB,EAAAD,EAAAE,KAAAX,MACAY,EAtBAvC,GADAuB,EAuBAa,EAAAb,KAtBAiB,OAAAC,KAAAC,UAAAnB,EAAAoB,MAAApB,EAAAqB,MAyBAvC,EAAAyB,eAAAO,KAAAhC,EAAAgC,GAAAE,IAIAjC,GACAuC,QAAAC,KAAA,+BAAAT,EAAA,iMAKAhC,EAAAgC,GAAAE,IAAA,GAEOlC,EAAAyB,eAAAO,KACPhC,EAAAgC,GAAA,GACAhC,EAAAgC,GAAAE,IAAA,GAGAP,EAAAO,KACAP,EAAAO,IAAA,EACAN,EAAAc,KAAAX,SAGAH,EAAAc,KAAAX,GAKA,OADAL,EAAAE,cACAF,EAkEAiB,CAAArC,IACA,GACAP,EAAAM,GAAAC,EAEAA,EAYA,SAAAsC,IAQA,IAPA,IAAAC,EAAAC,MAAAjC,UAAAkC,MAAAhC,KAAAiC,WAEAC,EAAAJ,EAAA,GAGAK,EAAA,mBAAAD,IAAA,GAEApB,EAAA,EAAiBA,EAAAgB,EAAAf,OAAiBD,IAClCgB,EAAAhB,IAAAgB,EAAAhB,GAAAtB,MAAA,aAAAsC,EAAAhB,GAAAtB,KACA2C,GAAAL,EAAAhB,GAAAX,IAAAiB,OAAAC,KAEAc,GAAAL,EAAAhB,GAGAqB,GAAAD,EAAApB,GAGA,OAAA1B,EAAA+C,GAIAN,EAAAO,QAAAP,EACAA,EAAAQ,YAzJA,WACArD,EAAA,GACAC,EAAA,IAwJA4C,EAAAS,wBAvGA,WACApD,GAAA,GAuGA2C,EAAAU,oCAlCA,WACApD,GAAA,GAkCA0C,EAAAW,qCA/BA,WACArD,GAAA,GAgCAsD,EAAAC,QAAAb","file":"bundle.npm.graphql-tag.3b782e73db299f6d82ef.js","sourcesContent":["var parser = require('graphql/language/parser');\n\nvar parse = parser.parse;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\n// A map docString -> graphql document\nvar docCache = {};\n\n// A map fragmentName -> [normalized source]\nvar fragmentSourceMap = {};\n\nfunction cacheKeyFromLoc(loc) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// For testing.\nfunction resetCaches() {\n  docCache = {};\n  fragmentSourceMap = {};\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nvar printFragmentWarnings = true;\nfunction processFragments(ast) {\n  var astFragmentMap = {};\n  var definitions = [];\n\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var fragmentDefinition = ast.definitions[i];\n\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n\n      // We know something about this fragment\n      if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {\n\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n\n      } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {\n        fragmentSourceMap[fragmentName] = {};\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n      }\n\n      if (!astFragmentMap[sourceKey]) {\n        astFragmentMap[sourceKey] = true;\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  }\n\n  ast.definitions = definitions;\n  return ast;\n}\n\nfunction disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nfunction stripLoc(doc, removeLocAtThisLevel) {\n  var docType = Object.prototype.toString.call(doc);\n\n  if (docType === '[object Array]') {\n    return doc.map(function (d) {\n      return stripLoc(d, removeLocAtThisLevel);\n    });\n  }\n\n  if (docType !== '[object Object]') {\n    throw new Error('Unexpected input.');\n  }\n\n  // We don't want to remove the root loc field so we can use it\n  // for fragment substitution (see below)\n  if (removeLocAtThisLevel && doc.loc) {\n    delete doc.loc;\n  }\n\n  // https://github.com/apollographql/graphql-tag/issues/40\n  if (doc.loc) {\n    delete doc.loc.startToken;\n    delete doc.loc.endToken;\n  }\n\n  var keys = Object.keys(doc);\n  var key;\n  var value;\n  var valueType;\n\n  for (key in keys) {\n    if (keys.hasOwnProperty(key)) {\n      value = doc[keys[key]];\n      valueType = Object.prototype.toString.call(value);\n\n      if (valueType === '[object Object]' || valueType === '[object Array]') {\n        doc[keys[key]] = stripLoc(value, true);\n      }\n    }\n  }\n\n  return doc;\n}\n\nvar experimentalFragmentVariables = false;\nfunction parseDocument(doc) {\n  var cacheKey = normalize(doc);\n\n  if (docCache[cacheKey]) {\n    return docCache[cacheKey];\n  }\n\n  var parsed = parse(doc, { experimentalFragmentVariables: experimentalFragmentVariables });\n  if (!parsed || parsed.kind !== 'Document') {\n    throw new Error('Not a valid GraphQL document.');\n  }\n\n  // check that all \"new\" fragments inside the documents are consistent with\n  // existing fragments of the same name\n  parsed = processFragments(parsed);\n  parsed = stripLoc(parsed, false);\n  docCache[cacheKey] = parsed;\n\n  return parsed;\n}\n\nfunction enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nfunction disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nfunction gql(/* arguments */) {\n  var args = Array.prototype.slice.call(arguments);\n\n  var literals = args[0];\n\n  // We always get literals[0] and then matching post literals for each arg given\n  var result = (typeof(literals) === \"string\") ? literals : literals[0];\n\n  for (var i = 1; i < args.length; i++) {\n    if (args[i] && args[i].kind && args[i].kind === 'Document') {\n      result += args[i].loc.source.body;\n    } else {\n      result += args[i];\n    }\n\n    result += literals[i];\n  }\n\n  return parseDocument(result);\n}\n\n// Support typescript, which isn't as nice as Babel about default exports\ngql.default = gql;\ngql.resetCaches = resetCaches;\ngql.disableFragmentWarnings = disableFragmentWarnings;\ngql.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;\ngql.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;\n\nmodule.exports = gql;\n"],"sourceRoot":""}