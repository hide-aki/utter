{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-link-http/node_modules/zen-observable-ts/lib/bundle.esm.js","webpack:////var/www/html/utter/node_modules/apollo-link-http/node_modules/apollo-link/lib/bundle.esm.js","webpack:////var/www/html/utter/node_modules/apollo-link-http/lib/bundle.esm.js"],"names":["bundle_esm","a","_super","LinkError","message","link","_this","call","this","Object","tslib_es6","Error","isTerminating","request","length","fromError","errorValue","observer","error","createOperation","starting","operation","context","defineProperty","enumerable","value","next","printer","query","JSON","stringify","variables","operationName","getKey","passthrough","op","forward","of","toLink","handler","bundle_esm_ApolloLink","empty","from","links","map","reduce","x","y","concat","split","test","left","right","leftLink","rightLink","ApolloLink","prototype","first","second","firstLink","nextLink","invariant_esm","execute","transformedOperation","extensions","lib_bundle_esm","transformOperation","OPERATION_FIELDS","_i","_a","keys","key","indexOf","validateOperation","__webpack_require__","d","__webpack_exports__","bundle_esm_HttpLink","createHttpLink","linkOptions","uri","fetcher","fetch","includeExtensions","useGETForQueries","requestOptions","apollo_link_http_common_lib_bundle_esm","linkConfig","http","options","fetchOptions","credentials","headers","chosenURI","getContext","clientAwarenessHeaders","clientAwareness","name_1","name","version","controller","contextHeaders","contextConfig","_b","body","signal","_c","_controller","definitions","some","kind","method","_d","queryParams","addQueryParam","push","encodeURIComponent","serializedVariables","parseError","serializedExtensions","fragment","preFragment","fragmentStart","substr","queryParamsPrefix","newURI","join","rewriteURIForGET","then","response","setContext","result","complete","catch","err","errors","data","abort","HttpLink","opts"],"mappings":"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","file":"bundle.npm.apollo-link-http.9edabeecf752ba0c53a1.js","sourcesContent":["import zenObservable from 'zen-observable';\n\nvar Observable = zenObservable;\n\nexport default Observable;\nexport { Observable };\n//# sourceMappingURL=bundle.esm.js.map\n","import Observable from 'zen-observable-ts';\nexport { default as Observable } from 'zen-observable-ts';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { __extends, __assign } from 'tslib';\nimport { print } from 'graphql/language/printer';\nimport { getOperationName } from 'apollo-utilities';\nexport { getOperationName } from 'apollo-utilities';\n\nfunction validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        'query',\n        'operationName',\n        'variables',\n        'extensions',\n        'context',\n    ];\n    for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"illegal argument: \" + key);\n        }\n    }\n    return operation;\n}\nvar LinkError = (function (_super) {\n    __extends(LinkError, _super);\n    function LinkError(message, link) {\n        var _this = _super.call(this, message) || this;\n        _this.link = link;\n        return _this;\n    }\n    return LinkError;\n}(Error));\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nfunction toPromise(observable) {\n    var completed = false;\n    return new Promise(function (resolve, reject) {\n        observable.subscribe({\n            next: function (data) {\n                if (completed) {\n                    process.env.NODE_ENV === \"production\" || invariant.warn(\"Promise Wrapper does not support multiple results from Observable\");\n                }\n                else {\n                    completed = true;\n                    resolve(data);\n                }\n            },\n            error: reject,\n        });\n    });\n}\nvar makePromise = toPromise;\nfunction fromPromise(promise) {\n    return new Observable(function (observer) {\n        promise\n            .then(function (value) {\n            observer.next(value);\n            observer.complete();\n        })\n            .catch(observer.error.bind(observer));\n    });\n}\nfunction fromError(errorValue) {\n    return new Observable(function (observer) {\n        observer.error(errorValue);\n    });\n}\nfunction transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query,\n    };\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName =\n            typeof transformedOperation.query !== 'string'\n                ? getOperationName(transformedOperation.query)\n                : '';\n    }\n    return transformedOperation;\n}\nfunction createOperation(starting, operation) {\n    var context = __assign({}, starting);\n    var setContext = function (next) {\n        if (typeof next === 'function') {\n            context = __assign({}, context, next(context));\n        }\n        else {\n            context = __assign({}, context, next);\n        }\n    };\n    var getContext = function () { return (__assign({}, context)); };\n    Object.defineProperty(operation, 'setContext', {\n        enumerable: false,\n        value: setContext,\n    });\n    Object.defineProperty(operation, 'getContext', {\n        enumerable: false,\n        value: getContext,\n    });\n    Object.defineProperty(operation, 'toKey', {\n        enumerable: false,\n        value: function () { return getKey(operation); },\n    });\n    return operation;\n}\nfunction getKey(operation) {\n    return print(operation.query) + \"|\" + JSON.stringify(operation.variables) + \"|\" + operation.operationName;\n}\n\nfunction passthrough(op, forward) {\n    return forward ? forward(op) : Observable.of();\n}\nfunction toLink(handler) {\n    return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\nfunction empty() {\n    return new ApolloLink(function () { return Observable.of(); });\n}\nfunction from(links) {\n    if (links.length === 0)\n        return empty();\n    return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n}\nfunction split(test, left, right) {\n    var leftLink = toLink(left);\n    var rightLink = toLink(right || new ApolloLink(passthrough));\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n        return new ApolloLink(function (operation) {\n            return test(operation)\n                ? leftLink.request(operation) || Observable.of()\n                : rightLink.request(operation) || Observable.of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return test(operation)\n                ? leftLink.request(operation, forward) || Observable.of()\n                : rightLink.request(operation, forward) || Observable.of();\n        });\n    }\n}\nvar concat = function (first, second) {\n    var firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n        return firstLink;\n    }\n    var nextLink = toLink(second);\n    if (isTerminating(nextLink)) {\n        return new ApolloLink(function (operation) {\n            return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return (firstLink.request(operation, function (op) {\n                return nextLink.request(op, forward) || Observable.of();\n            }) || Observable.of());\n        });\n    }\n};\nvar ApolloLink = (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.prototype.split = function (test, left, right) {\n        return this.concat(split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError('request is not implemented');\n    };\n    ApolloLink.empty = empty;\n    ApolloLink.from = from;\n    ApolloLink.split = split;\n    ApolloLink.execute = execute;\n    return ApolloLink;\n}());\nfunction execute(link, operation) {\n    return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());\n}\n\nexport { createOperation, makePromise, toPromise, fromPromise, fromError, empty, from, split, concat, ApolloLink, execute };\n//# sourceMappingURL=bundle.esm.js.map\n","import { __rest, __assign, __extends } from 'tslib';\nimport { ApolloLink, fromError, Observable } from 'apollo-link';\nimport { checkFetcher, selectURI, selectHttpOptionsAndBody, fallbackHttpConfig, createSignalIfSupported, serializeFetchParameter, parseAndCheckHttpResponse } from 'apollo-link-http-common';\n\nvar createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n    checkFetcher(fetcher);\n    if (!fetcher) {\n        fetcher = fetch;\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders['apollographql-client-name'] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders['apollographql-client-version'] = version;\n            }\n        }\n        var contextHeaders = __assign({}, clientAwarenessHeaders, context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        var controller;\n        if (!options.signal) {\n            var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;\n            controller = _controller;\n            if (controller)\n                options.signal = signal;\n        }\n        var definitionIsMutation = function (d) {\n            return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n        };\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = 'GET';\n        }\n        if (options.method === 'GET') {\n            var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;\n            if (parseError) {\n                return fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, 'Payload');\n            }\n            catch (parseError) {\n                return fromError(parseError);\n            }\n        }\n        return new Observable(function (observer) {\n            fetcher(chosenURI, options)\n                .then(function (response) {\n                operation.setContext({ response: response });\n                return response;\n            })\n                .then(parseAndCheckHttpResponse(operation))\n                .then(function (result) {\n                observer.next(result);\n                observer.complete();\n                return result;\n            })\n                .catch(function (err) {\n                if (err.name === 'AbortError')\n                    return;\n                if (err.result && err.result.errors && err.result.data) {\n                    observer.next(err.result);\n                }\n                observer.error(err);\n            });\n            return function () {\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\nfunction rewriteURIForGET(chosenURI, body) {\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(key + \"=\" + encodeURIComponent(value));\n    };\n    if ('query' in body) {\n        addQueryParam('query', body.query);\n    }\n    if (body.operationName) {\n        addQueryParam('operationName', body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('variables', serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('extensions', serializedExtensions);\n    }\n    var fragment = '', preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf('#');\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n    return { newURI: newURI };\n}\nvar HttpLink = (function (_super) {\n    __extends(HttpLink, _super);\n    function HttpLink(opts) {\n        return _super.call(this, createHttpLink(opts).request) || this;\n    }\n    return HttpLink;\n}(ApolloLink));\n\nexport { createHttpLink, HttpLink };\n//# sourceMappingURL=bundle.esm.js.map\n"],"sourceRoot":""}