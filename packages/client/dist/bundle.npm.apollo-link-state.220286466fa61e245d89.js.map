{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-link-state/lib/utils.js","webpack:////var/www/html/utter/node_modules/apollo-link-state/lib/index.js"],"names":["connectionRemoveConfig","test","directive","name","value","remove","removed","Map","__webpack_require__","d","__webpack_exports__","withClientState","extendStatics","__extends","Object","setPrototypeOf","__proto__","Array","b","p","hasOwnProperty","__","this","constructor","prototype","create","graphql","lib_async","clientStateConfig","resolvers","defaults","cache","typeDefs","fragmentMatcher","writeData","data","_super","StateLink","apply","arguments","writeDefaults","request","operation","forward","lib","of","definition_1","isArray","map","typeDef","printer","str","trim","join","normalizeTypeDefs","setContext","_a","_b","schemas","concat","definition","directives","query","server","cached","get","getFromAST","docClone","transform","set","removeClientSetsFromDocument","type","charAt","toUpperCase","slice","resolver","fieldName","rootValue","args","context","info","resultKey","aliasedNode","preAliasingNode","aliasNeeded","undefined","resolverMap","__typename","resolve","obs","observer","complete","handlingNext","subscribe","next","errors","observerErrorHandler","error","bind","getContext","variables","then","nextData","catch"],"mappings":"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","file":"bundle.npm.apollo-link-state.220286466fa61e245d89.js","sourcesContent":["import { print } from 'graphql';\nimport { checkDocument, removeDirectivesFromDocument } from 'apollo-utilities';\nvar connectionRemoveConfig = {\n    test: function (directive) { return directive.name.value === 'client'; },\n    remove: true,\n};\nvar removed = new Map();\nexport function removeClientSetsFromDocument(query) {\n    var cached = removed.get(query);\n    if (cached)\n        return cached;\n    checkDocument(query);\n    var docClone = removeDirectivesFromDocument([connectionRemoveConfig], query);\n    removed.set(query, docClone);\n    return docClone;\n}\nexport function normalizeTypeDefs(typeDefs) {\n    var defs = Array.isArray(typeDefs) ? typeDefs : [typeDefs];\n    return defs\n        .map(function (typeDef) { return (typeof typeDef === 'string' ? typeDef : print(typeDef)); })\n        .map(function (str) { return str.trim(); })\n        .join('\\n');\n}\n//# sourceMappingURL=utils.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ApolloLink, Observable, } from 'apollo-link';\nimport { hasDirectives, getMainDefinition } from 'apollo-utilities';\nimport * as Async from 'graphql-anywhere/lib/async';\nvar graphql = Async.graphql;\nimport { removeClientSetsFromDocument, normalizeTypeDefs } from './utils';\nvar capitalizeFirstLetter = function (str) { return str.charAt(0).toUpperCase() + str.slice(1); };\nexport var withClientState = function (clientStateConfig) {\n    if (clientStateConfig === void 0) { clientStateConfig = { resolvers: {}, defaults: {} }; }\n    var defaults = clientStateConfig.defaults, cache = clientStateConfig.cache, typeDefs = clientStateConfig.typeDefs, fragmentMatcher = clientStateConfig.fragmentMatcher;\n    if (cache && defaults) {\n        cache.writeData({ data: defaults });\n    }\n    return new (function (_super) {\n        __extends(StateLink, _super);\n        function StateLink() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        StateLink.prototype.writeDefaults = function () {\n            if (cache && defaults) {\n                cache.writeData({ data: defaults });\n            }\n        };\n        StateLink.prototype.request = function (operation, forward) {\n            if (forward === void 0) { forward = function () { return Observable.of({ data: {} }); }; }\n            if (typeDefs) {\n                var directives_1 = 'directive @client on FIELD';\n                var definition_1 = normalizeTypeDefs(typeDefs);\n                operation.setContext(function (_a) {\n                    var _b = _a.schemas, schemas = _b === void 0 ? [] : _b;\n                    return ({\n                        schemas: schemas.concat([{ definition: definition_1, directives: directives_1 }]),\n                    });\n                });\n            }\n            var isClient = hasDirectives(['client'], operation.query);\n            if (!isClient)\n                return forward(operation);\n            var resolvers = typeof clientStateConfig.resolvers === 'function'\n                ? clientStateConfig.resolvers()\n                : clientStateConfig.resolvers;\n            var server = removeClientSetsFromDocument(operation.query);\n            var query = operation.query;\n            var type = capitalizeFirstLetter((getMainDefinition(query) || {}).operation) || 'Query';\n            var resolver = function (fieldName, rootValue, args, context, info) {\n                if (rootValue === void 0) { rootValue = {}; }\n                var resultKey = info.resultKey;\n                var aliasedNode = rootValue[resultKey];\n                var preAliasingNode = rootValue[fieldName];\n                var aliasNeeded = resultKey !== fieldName;\n                if (aliasedNode !== undefined || preAliasingNode !== undefined) {\n                    return aliasedNode || preAliasingNode;\n                }\n                var resolverMap = resolvers[rootValue.__typename || type];\n                if (resolverMap) {\n                    var resolve = resolverMap[fieldName];\n                    if (resolve)\n                        return resolve(rootValue, args, context, info);\n                }\n                return ((aliasNeeded ? aliasedNode : preAliasingNode) ||\n                    (defaults || {})[fieldName]);\n            };\n            if (server)\n                operation.query = server;\n            var obs = server && forward\n                ? forward(operation)\n                : Observable.of({\n                    data: {},\n                });\n            return new Observable(function (observer) {\n                var complete = false;\n                var handlingNext = false;\n                obs.subscribe({\n                    next: function (_a) {\n                        var data = _a.data, errors = _a.errors;\n                        var observerErrorHandler = observer.error.bind(observer);\n                        var context = operation.getContext();\n                        handlingNext = true;\n                        graphql(resolver, query, data, context, operation.variables, {\n                            fragmentMatcher: fragmentMatcher,\n                        })\n                            .then(function (nextData) {\n                            observer.next({\n                                data: nextData,\n                                errors: errors,\n                            });\n                            if (complete) {\n                                observer.complete();\n                            }\n                            handlingNext = false;\n                        })\n                            .catch(observerErrorHandler);\n                    },\n                    error: observer.error.bind(observer),\n                    complete: function () {\n                        if (!handlingNext) {\n                            observer.complete();\n                        }\n                        complete = true;\n                    },\n                });\n            });\n        };\n        return StateLink;\n    }(ApolloLink))();\n};\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}