{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/apollo-client/bundle.esm.js","webpack:////var/www/html/utter/node_modules/apollo-client/node_modules/apollo-utilities/lib/bundle.esm.js"],"names":["__webpack_require__","r","__webpack_exports__","d","ApolloClient","ObservableQuery","NetworkStatus","isApolloError","ApolloError","FetchType","tslib__WEBPACK_IMPORTED_MODULE_0__","apollo_utilities__WEBPACK_IMPORTED_MODULE_1__","apollo_link__WEBPACK_IMPORTED_MODULE_2__","symbol_observable__WEBPACK_IMPORTED_MODULE_3__","ts_invariant__WEBPACK_IMPORTED_MODULE_4__","apollo_link_dedup__WEBPACK_IMPORTED_MODULE_5__","graphql_language_visitor__WEBPACK_IMPORTED_MODULE_6__","isNetworkRequestInFlight","networkStatus","Observable","_super","apply","this","arguments","Object","prototype","err","hasOwnProperty","generateErrorMessage","message","Array","isArray","graphQLErrors","length","forEach","graphQLError","errorMessage","networkError","replace","_a","extraInfo","_this","call","__proto__","Error","queryManager","options","_b","shouldSubscribe","observer","onSubscribe","isTornDown","variables","queryId","generateQueryId","observers","subscriptionHandles","result","that","Promise","resolve","reject","subscription","next","some","obs","removeQuery","setTimeout","unsubscribe","error","subscribe","currentResult","getCurrentResult","undefined","data","lastError","lastResult","loading","storeValue","policy","queryStoreValue","queryStore","get","errorPolicy","assign","getCurrentQueryResult","partial","queryLoading","fetchPolicy","ready","errors","stale","lastResultSnapshot","isDifferentFromLastResult","newResult","snapshot","getLastResult","getLastError","resetLastResults","refetch","isNetworkFetchPolicy","combinedOptions","fetchQuery","then","fetchMore","fetchMoreOptions","updateQuery","qid","query","normal","fetchMoreResult","previousResult","subscribeToMore","startGraphQLSubscription","document","subscriptionData","previous","onError","console","push","i","indexOf","splice","setOptions","opts","oldOptions","pollInterval","startPolling","stopPolling","tryFetch","setVariables","fetchResults","newVariables","mapFn","getQueryWithPreviousResult","dataStore","markUpdateQueryResult","broadcastQueries","stopPollingQuery","assertNotCacheFirstOrOnly","startPollingQuery","_subscription","_observer","stack","setUpQuery","filter","tearDownQuery","addObservableQuery","startQuery","queryListenerForObserver","sub","removeObservableQuery","stopQuery","obsQuery","MutationStore","store","getStore","mutationId","initMutation","mutation","markMutationError","markMutationResult","reset","QueryStore","initQuery","previousQuery","isSetVariables","previousVariables","storePreviousVariables","isPoll","poll","isRefetch","metadata","fetchMoreForQueryId","markQueryResult","markQueryError","markQueryResultClient","complete","observableQueryIds","keys","reduce","res","key","LocalState","cache","client","resolvers","fragmentMatcher","addResolvers","setFragmentMatcher","resolverGroup","setResolvers","getResolvers","runResolvers","remoteResult","context","onlyRunForcedResolvers","_c","resolveDocument","localResult","getFragmentMatcher","clientQuery","serverQuery","prepareContext","getCacheKey","obj","config","dataIdFromObject","addExportedVariables","buildRootValueFromCache","exportedVariables","shouldForceResolvers","forceResolvers","Directive","enter","node","name","value","arg","kind","shouldForceResolver","field","diff","optimistic","rootValue","mainDefinition","fragments","fragmentMap","definitionOperation","defaultOperationType","execContext","str","operation","charAt","toUpperCase","slice","resolveSelectionSet","selectionSet","resultsToMerge","execute","selection","fragment","typeCondition","resolveField","fieldResult","fragmentResult","all","selections","map","fieldName","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolverType","resolverMap","__typename","directives","directive","resolveSubSelectedArray","item","QueryManager","link","queryDeduplication","onBroadcast","_d","ssrMode","_e","clientAwareness","localState","mutationStore","idCounter","queries","Map","fetchQueryRejectFns","queryIdsByName","pollingInfoByQueryId","nextPoll","deduplicator","from","getCache","stop","_info","stopQueryNoBroadcast","mutate","optimisticResponse","updateQueriesByName","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","update","generateUpdateQueriesInfo","updatedVariables","_f","_g","label","transformDocument","setQuery","ret","queryName","updater","sent","markMutationInit","storeResult","buildOperationForLink","completeMutation","markMutationComplete","refetchQueryPromises","_i","refetchQueries_1","refetchQuery","queryOptions","promise","refetchQueryByName","of","self","handlingNext","updatedResult","catch","fetchType","updatedOptions","needToFetch","shouldFetch","requestId","cancel","networkResult","returnPartialData","generateRequestId","updateQueryWatch","lastRequestId","invalidated","invalidate","fetchRequest","getQuery","previouslyHadError","newData","observableQuery","shouldNotifyIfLoading","networkStatusChanged","errorStatusChanged","apolloError_1","isMissing","document_1","readResult","resultFromStore","e_1","error_1","Boolean","notifyOnNetworkStatusChange","e","trys","watchQuery","queryDefinition","variableDefinitions","defaultValues","transformedOptions","watchedQuery","set","delete","toString","stopQueryInStore","stopQueryInStoreNoBroadcast","addQueryListener","listener","listeners","concat","watch","callback","queryDef","definition","val","clearStore","resetIds","resetStore","reFetchObservableQueries","includeStandby","observableQueryPromises","getObservableQueryPromises","isCacheEnabled","transformedDoc","activeNextCalls_1","complete_1","handler_1","markSubscriptionResult","subscriptions","x","read","queryIdOrObservable","foundObserveableQuery","info","id","getLocalState","errorsFromStore","updatedContext","forceFetch","subscriber","refetchedQueries","prev","newInfo","extraContext","transformForLink","operationName","newContext","checkInFlight","interval","lastPollTimeMs","Date","now","schedulePoll","timeLimitMs","time","clearTimeout","timeout","nextTimeLimitMs","Infinity","updateLastPollTime","isFinite","DataStore","initialCache","ignoreErrors","writeWithErrors","write","dataId","optimistic_1","recordOptimisticTransaction","c","orig","cacheWrites_1","currentQueryResult","nextQueryResult","mutationResult","queryVariables","performTransaction","update_1","removeOptimistic","version","defaultOptions","resetStoreCallbacks","clearStoreCallbacks","ssrForceFetchDelay","connectToDevTools","typeDefs","clientAwarenessName","clientAwarenessVersion","empty","supportedCache","supportedDirectives","forward","disableNetworkFetches","bind","window","__APOLLO_CLIENT__","initQueryManager","readQuery","initProxy","readFragment","writeQuery","writeFragment","writeData","__actionHookForDevTools","cb","devToolsHookCb","__requestRaw","payload","action","state","mutations","dataWithOptimisticResults","extract","fn","onResetStore","onClearStore","restore","serializedState","setLocalStateFragmentMatcher","proxy","process","shouldInclude","hasDirectives","hasClientExports","getMutationDefinition","getOperationDefinition","getOperationName","getFragmentDefinitions","getQueryDefinition","getMainDefinition","createFragmentMap","getDefaultValues","removeConnectionDirectiveFromDocument","buildQueryFromSelectionSet","removeClientSetsFromDocument","argumentsObjectFromField","resultKeyNameFromField","isField","isInlineFragment","cloneDeep","tryFunctionOrLogError","graphQLResultHasError","isEqual","mergeDeep","mergeDeepArray","graphql_language_visitor__WEBPACK_IMPORTED_MODULE_0__","ts_invariant__WEBPACK_IMPORTED_MODULE_1__","tslib__WEBPACK_IMPORTED_MODULE_2__","valueToObjectRepresentation","argObj","isIntValue","isFloatValue","Number","isBooleanValue","isStringValue","isObjectValue","nestedArgObj_1","fields","isVariable","variableValue","isListValue","values","listValue","nestedArgArrayObj","isEnumValue","isNullValue","argObj_1","alias","directiveArguments","directiveName","ifArgument","ifValue","evaledValue","names","doc","getDirectiveNames","target","sources","source","checkDocument","mutationDef","definitions","operations","queryDoc","fragmentDefinition","symTable","defaultValue","variable","defaultValueObj","filterInPlace","array","test","elem","nullIfDocIsEmpty","isEmpty","op","every","fragmentDef","getFragmentDefinition","getDirectiveMatcher","dir","removeDirectivesFromDocument","variablesInUse","create","variablesToRemove","fragmentSpreadsInUse","fragmentSpreadsToRemove","modifiedDoc","Variable","_key","parent","Field","remove","getAllFragmentSpreadsFromSelectionSet","allFragments","frag","FragmentSpread","v","argMatcher","argument","aConfig","getArgumentMatcher","OperationDefinition","varDef","shouldRemoveField","argConfig","argMatchCount_1","Argument","removeArgumentsFromDocument","fs","def","FragmentDefinition","removeFragmentSpreadFromDocument","connectionRemoveConfig","willRemove","warn","cloneDeepHelper","seen","has","copy_1","child","copy_2","getPrototypeOf","f","a","b","getTime","count","pastCopies","shallowCopyForMerge","mergeHelper","isObject","isExtensible","sourceKey","sourceValue","targetValue"],"mappings":"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","file":"bundle.npm.apollo-client.7cc9e92174eaa80085aa.js","sourcesContent":["import { __extends, __assign, __awaiter, __generator } from 'tslib';\nimport { cloneDeep, isEqual, tryFunctionOrLogError, mergeDeep, hasDirectives, removeClientSetsFromDocument, buildQueryFromSelectionSet, getMainDefinition, getFragmentDefinitions, createFragmentMap, mergeDeepArray, resultKeyNameFromField, argumentsObjectFromField, shouldInclude, isField, isInlineFragment, assign, getDefaultValues, getMutationDefinition, hasClientExports, graphQLResultHasError, getQueryDefinition, getOperationDefinition, getOperationName, removeConnectionDirectiveFromDocument } from 'apollo-utilities';\nimport { Observable as Observable$1, ApolloLink, execute } from 'apollo-link';\nimport $$observable from 'symbol-observable';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { DedupLink } from 'apollo-link-dedup';\nimport { visit, BREAK } from 'graphql/language/visitor';\n\nvar NetworkStatus;\n(function (NetworkStatus) {\n    NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\nfunction isNetworkRequestInFlight(networkStatus) {\n    return networkStatus < 7;\n}\n\nvar Observable = (function (_super) {\n    __extends(Observable, _super);\n    function Observable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Observable.prototype[$$observable] = function () {\n        return this;\n    };\n    Observable.prototype['@@observable'] = function () {\n        return this;\n    };\n    return Observable;\n}(Observable$1));\n\nfunction isApolloError(err) {\n    return err.hasOwnProperty('graphQLErrors');\n}\nvar generateErrorMessage = function (err) {\n    var message = '';\n    if (Array.isArray(err.graphQLErrors) && err.graphQLErrors.length !== 0) {\n        err.graphQLErrors.forEach(function (graphQLError) {\n            var errorMessage = graphQLError\n                ? graphQLError.message\n                : 'Error message not found.';\n            message += \"GraphQL error: \" + errorMessage + \"\\n\";\n        });\n    }\n    if (err.networkError) {\n        message += 'Network error: ' + err.networkError.message + '\\n';\n    }\n    message = message.replace(/\\n$/, '');\n    return message;\n};\nvar ApolloError = (function (_super) {\n    __extends(ApolloError, _super);\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.networkError = networkError || null;\n        if (!errorMessage) {\n            _this.message = generateErrorMessage(_this);\n        }\n        else {\n            _this.message = errorMessage;\n        }\n        _this.extraInfo = extraInfo;\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error));\n\nvar FetchType;\n(function (FetchType) {\n    FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n    FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n    FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n})(FetchType || (FetchType = {}));\n\nvar hasError = function (storeValue, policy) {\n    if (policy === void 0) { policy = 'none'; }\n    return storeValue &&\n        ((storeValue.graphQLErrors &&\n            storeValue.graphQLErrors.length > 0 &&\n            policy === 'none') ||\n            storeValue.networkError);\n};\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, options = _a.options, _b = _a.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;\n        var _this = _super.call(this, function (observer) {\n            return _this.onSubscribe(observer);\n        }) || this;\n        _this.isTornDown = false;\n        _this.options = options;\n        _this.variables = options.variables || {};\n        _this.queryId = queryManager.generateQueryId();\n        _this.shouldSubscribe = shouldSubscribe;\n        _this.queryManager = queryManager;\n        _this.observers = [];\n        _this.subscriptionHandles = [];\n        return _this;\n    }\n    ObservableQuery.prototype.result = function () {\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            var subscription;\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    if (!that.observers.some(function (obs) { return obs !== observer; })) {\n                        that.queryManager.removeQuery(that.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: function (error) {\n                    reject(error);\n                },\n            };\n            subscription = that.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.currentResult = function () {\n        var result = this.getCurrentResult();\n        if (result.data === undefined) {\n            result.data = {};\n        }\n        return result;\n    };\n    ObservableQuery.prototype.getCurrentResult = function () {\n        if (this.isTornDown) {\n            return {\n                data: this.lastError\n                    ? undefined\n                    : this.lastResult\n                        ? this.lastResult.data\n                        : undefined,\n                error: this.lastError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n            };\n        }\n        var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n        if (hasError(queryStoreValue, this.options.errorPolicy)) {\n            return {\n                data: undefined,\n                loading: false,\n                networkStatus: queryStoreValue.networkStatus,\n                error: new ApolloError({\n                    graphQLErrors: queryStoreValue.graphQLErrors,\n                    networkError: queryStoreValue.networkError,\n                }),\n            };\n        }\n        if (queryStoreValue && queryStoreValue.variables) {\n            this.options.variables = Object.assign({}, this.options.variables, queryStoreValue.variables);\n        }\n        var _a = this.queryManager.getCurrentQueryResult(this), data = _a.data, partial = _a.partial;\n        var queryLoading = !queryStoreValue ||\n            queryStoreValue.networkStatus === NetworkStatus.loading;\n        var loading = (this.options.fetchPolicy === 'network-only' && queryLoading) ||\n            (partial && this.options.fetchPolicy !== 'cache-only');\n        var networkStatus;\n        if (queryStoreValue) {\n            networkStatus = queryStoreValue.networkStatus;\n        }\n        else {\n            networkStatus = loading ? NetworkStatus.loading : NetworkStatus.ready;\n        }\n        var result = {\n            data: data,\n            loading: isNetworkRequestInFlight(networkStatus),\n            networkStatus: networkStatus,\n        };\n        if (queryStoreValue &&\n            queryStoreValue.graphQLErrors &&\n            this.options.errorPolicy === 'all') {\n            result.errors = queryStoreValue.graphQLErrors;\n        }\n        if (!partial) {\n            this.lastResult = __assign({}, result, { stale: false });\n            this.lastResultSnapshot = cloneDeep(this.lastResult);\n        }\n        return __assign({}, result, { partial: partial });\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n        var snapshot = this.lastResultSnapshot;\n        return !(snapshot &&\n            newResult &&\n            snapshot.networkStatus === newResult.networkStatus &&\n            snapshot.stale === newResult.stale &&\n            isEqual(snapshot.data, newResult.data));\n    };\n    ObservableQuery.prototype.getLastResult = function () {\n        return this.lastResult;\n    };\n    ObservableQuery.prototype.getLastError = function () {\n        return this.lastError;\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.lastResult;\n        delete this.lastResultSnapshot;\n        delete this.lastError;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'cache-only') {\n            return Promise.reject(new Error('cache-only fetchPolicy option should not be used together with query refetch.'));\n        }\n        if (!isEqual(this.variables, variables)) {\n            this.variables = Object.assign({}, this.variables, variables);\n        }\n        if (!isEqual(this.options.variables, this.variables)) {\n            this.options.variables = Object.assign({}, this.options.variables, this.variables);\n        }\n        var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n        var combinedOptions = __assign({}, this.options, { fetchPolicy: isNetworkFetchPolicy ? fetchPolicy : 'network-only' });\n        return this.queryManager\n            .fetchQuery(this.queryId, combinedOptions, FetchType.refetch)\n            .then(function (result) { return result; });\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(fetchMoreOptions.updateQuery) : invariant(fetchMoreOptions.updateQuery, 'updateQuery option is required. This function defines how to update the query data with the new results.');\n        var combinedOptions;\n        return Promise.resolve()\n            .then(function () {\n            var qid = _this.queryManager.generateQueryId();\n            if (fetchMoreOptions.query) {\n                combinedOptions = fetchMoreOptions;\n            }\n            else {\n                combinedOptions = __assign({}, _this.options, fetchMoreOptions, { variables: Object.assign({}, _this.variables, fetchMoreOptions.variables) });\n            }\n            combinedOptions.fetchPolicy = 'network-only';\n            return _this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, _this.queryId);\n        })\n            .then(function (fetchMoreResult) {\n            _this.updateQuery(function (previousResult) {\n                return fetchMoreOptions.updateQuery(previousResult, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables,\n                });\n            });\n            return fetchMoreResult;\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                if (options.updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return options.updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                console.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptionHandles.push(subscription);\n        return function () {\n            var i = _this.subscriptionHandles.indexOf(subscription);\n            if (i >= 0) {\n                _this.subscriptionHandles.splice(i, 1);\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (opts) {\n        var oldOptions = this.options;\n        this.options = Object.assign({}, this.options, opts);\n        if (opts.pollInterval) {\n            this.startPolling(opts.pollInterval);\n        }\n        else if (opts.pollInterval === 0) {\n            this.stopPolling();\n        }\n        var tryFetch = (oldOptions.fetchPolicy !== 'network-only' &&\n            opts.fetchPolicy === 'network-only') ||\n            (oldOptions.fetchPolicy === 'cache-only' &&\n                opts.fetchPolicy !== 'cache-only') ||\n            (oldOptions.fetchPolicy === 'standby' &&\n                opts.fetchPolicy !== 'standby') ||\n            false;\n        return this.setVariables(this.options.variables, tryFetch, opts.fetchResults);\n    };\n    ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n        if (tryFetch === void 0) { tryFetch = false; }\n        if (fetchResults === void 0) { fetchResults = true; }\n        this.isTornDown = false;\n        var newVariables = variables ? variables : this.variables;\n        if (isEqual(newVariables, this.variables) && !tryFetch) {\n            if (this.observers.length === 0 || !fetchResults) {\n                return new Promise(function (resolve) { return resolve(); });\n            }\n            return this.result();\n        }\n        else {\n            this.variables = newVariables;\n            this.options.variables = newVariables;\n            if (this.observers.length === 0) {\n                return new Promise(function (resolve) { return resolve(); });\n            }\n            return this.queryManager\n                .fetchQuery(this.queryId, __assign({}, this.options, { variables: this.variables }))\n                .then(function (result) { return result; });\n        }\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var _a = this.queryManager.getQueryWithPreviousResult(this.queryId), previousResult = _a.previousResult, variables = _a.variables, document = _a.document;\n        var newResult = tryFunctionOrLogError(function () {\n            return mapFn(previousResult, { variables: variables });\n        });\n        if (newResult) {\n            this.queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n            this.queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        this.queryManager.stopPollingQuery(this.queryId);\n        this.options.pollInterval = undefined;\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        assertNotCacheFirstOrOnly(this);\n        this.options.pollInterval = pollInterval;\n        this.queryManager.startPollingQuery(this.options, this.queryId);\n    };\n    ObservableQuery.prototype.onSubscribe = function (observer) {\n        var _this = this;\n        if (observer._subscription &&\n            observer._subscription._observer &&\n            !observer._subscription._observer.error) {\n            observer._subscription._observer.error = function (error) {\n                console.error('Unhandled error', error.message, error.stack);\n            };\n        }\n        this.observers.push(observer);\n        if (observer.next && this.lastResult)\n            observer.next(this.lastResult);\n        if (observer.error && this.lastError)\n            observer.error(this.lastError);\n        if (this.observers.length === 1)\n            this.setUpQuery();\n        return function () {\n            _this.observers = _this.observers.filter(function (obs) { return obs !== observer; });\n            if (_this.observers.length === 0) {\n                _this.tearDownQuery();\n            }\n        };\n    };\n    ObservableQuery.prototype.setUpQuery = function () {\n        var _this = this;\n        if (this.shouldSubscribe) {\n            this.queryManager.addObservableQuery(this.queryId, this);\n        }\n        if (!!this.options.pollInterval) {\n            assertNotCacheFirstOrOnly(this);\n            this.queryManager.startPollingQuery(this.options, this.queryId);\n        }\n        var observer = {\n            next: function (result) {\n                _this.lastResult = result;\n                _this.lastResultSnapshot = cloneDeep(result);\n                _this.observers.forEach(function (obs) { return obs.next && obs.next(result); });\n            },\n            error: function (error) {\n                _this.lastError = error;\n                _this.observers.forEach(function (obs) { return obs.error && obs.error(error); });\n            },\n        };\n        this.queryManager.startQuery(this.queryId, this.options, this.queryManager.queryListenerForObserver(this.queryId, this.options, observer));\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        this.isTornDown = true;\n        this.queryManager.stopPollingQuery(this.queryId);\n        this.subscriptionHandles.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptionHandles = [];\n        this.queryManager.removeObservableQuery(this.queryId);\n        this.queryManager.stopQuery(this.queryId);\n        this.observers = [];\n    };\n    return ObservableQuery;\n}(Observable));\nfunction assertNotCacheFirstOrOnly(obsQuery) {\n    var fetchPolicy = obsQuery.options.fetchPolicy;\n    process.env.NODE_ENV === \"production\" ? invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only') : invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n}\n\nvar MutationStore = (function () {\n    function MutationStore() {\n        this.store = {};\n    }\n    MutationStore.prototype.getStore = function () {\n        return this.store;\n    };\n    MutationStore.prototype.get = function (mutationId) {\n        return this.store[mutationId];\n    };\n    MutationStore.prototype.initMutation = function (mutationId, mutation, variables) {\n        this.store[mutationId] = {\n            mutation: mutation,\n            variables: variables || {},\n            loading: true,\n            error: null,\n        };\n    };\n    MutationStore.prototype.markMutationError = function (mutationId, error) {\n        var mutation = this.store[mutationId];\n        if (!mutation) {\n            return;\n        }\n        mutation.loading = false;\n        mutation.error = error;\n    };\n    MutationStore.prototype.markMutationResult = function (mutationId) {\n        var mutation = this.store[mutationId];\n        if (!mutation) {\n            return;\n        }\n        mutation.loading = false;\n        mutation.error = null;\n    };\n    MutationStore.prototype.reset = function () {\n        this.store = {};\n    };\n    return MutationStore;\n}());\n\nvar QueryStore = (function () {\n    function QueryStore() {\n        this.store = {};\n    }\n    QueryStore.prototype.getStore = function () {\n        return this.store;\n    };\n    QueryStore.prototype.get = function (queryId) {\n        return this.store[queryId];\n    };\n    QueryStore.prototype.initQuery = function (query) {\n        var previousQuery = this.store[query.queryId];\n        if (previousQuery &&\n            previousQuery.document !== query.document &&\n            !isEqual(previousQuery.document, query.document)) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError('Internal Error: may not update existing query string in store');\n        }\n        var isSetVariables = false;\n        var previousVariables = null;\n        if (query.storePreviousVariables &&\n            previousQuery &&\n            previousQuery.networkStatus !== NetworkStatus.loading) {\n            if (!isEqual(previousQuery.variables, query.variables)) {\n                isSetVariables = true;\n                previousVariables = previousQuery.variables;\n            }\n        }\n        var networkStatus;\n        if (isSetVariables) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        else if (query.isPoll) {\n            networkStatus = NetworkStatus.poll;\n        }\n        else if (query.isRefetch) {\n            networkStatus = NetworkStatus.refetch;\n        }\n        else {\n            networkStatus = NetworkStatus.loading;\n        }\n        var graphQLErrors = [];\n        if (previousQuery && previousQuery.graphQLErrors) {\n            graphQLErrors = previousQuery.graphQLErrors;\n        }\n        this.store[query.queryId] = {\n            document: query.document,\n            variables: query.variables,\n            previousVariables: previousVariables,\n            networkError: null,\n            graphQLErrors: graphQLErrors,\n            networkStatus: networkStatus,\n            metadata: query.metadata,\n        };\n        if (typeof query.fetchMoreForQueryId === 'string' &&\n            this.store[query.fetchMoreForQueryId]) {\n            this.store[query.fetchMoreForQueryId].networkStatus =\n                NetworkStatus.fetchMore;\n        }\n    };\n    QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].graphQLErrors =\n            result.errors && result.errors.length ? result.errors : [];\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = NetworkStatus.ready;\n        if (typeof fetchMoreForQueryId === 'string' &&\n            this.store[fetchMoreForQueryId]) {\n            this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n        }\n    };\n    QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = error;\n        this.store[queryId].networkStatus = NetworkStatus.error;\n        if (typeof fetchMoreForQueryId === 'string') {\n            this.markQueryResultClient(fetchMoreForQueryId, true);\n        }\n    };\n    QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = complete\n            ? NetworkStatus.ready\n            : NetworkStatus.loading;\n    };\n    QueryStore.prototype.stopQuery = function (queryId) {\n        delete this.store[queryId];\n    };\n    QueryStore.prototype.reset = function (observableQueryIds) {\n        var _this = this;\n        this.store = Object.keys(this.store)\n            .filter(function (queryId) {\n            return observableQueryIds.indexOf(queryId) > -1;\n        })\n            .reduce(function (res, key) {\n            res[key] = __assign({}, _this.store[key], { networkStatus: NetworkStatus.loading });\n            return res;\n        }, {});\n    };\n    return QueryStore;\n}());\n\nfunction capitalizeFirstLetter(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nvar LocalState = (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    LocalState.prototype.runResolvers = function (_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_c) {\n                if (document) {\n                    return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign({}, remoteResult, { data: localResult.result })); })];\n                }\n                return [2, remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    LocalState.prototype.clientQuery = function (document) {\n        if (hasDirectives(['client'], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n            process.env.NODE_ENV === \"production\" || invariant.warn('Found @client directives in query but no client resolvers were specified. ' +\n                'You can now pass apollo-link-state resolvers to the ApolloClient constructor.');\n        }\n        return null;\n    };\n    LocalState.prototype.serverQuery = function (document) {\n        return this.resolvers ? removeClientSetsFromDocument(document) : document;\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var cache = this.cache;\n        var newContext = __assign({}, context, { cache: cache, getCacheKey: function (obj) {\n                if (cache.config) {\n                    return cache.config.dataIdFromObject(obj);\n                }\n                else {\n                    process.env.NODE_ENV === \"production\" ? invariant(false) : invariant(false, 'To use context.getCacheKey, you need to use a cache that has ' +\n                        'a configurable dataIdFromObject, like apollo-cache-inmemory.');\n                }\n            } });\n        return newContext;\n    };\n    LocalState.prototype.addExportedVariables = function (document, variables, context) {\n        if (variables === void 0) { variables = {}; }\n        if (context === void 0) { context = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (document) {\n                    return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign({}, variables, data.exportedVariables)); })];\n                }\n                return [2, __assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === 'client' && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === 'always' &&\n                                arg.value.kind === 'BooleanValue' &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    LocalState.prototype.shouldForceResolver = function (field) {\n        return this.shouldForceResolvers(field);\n    };\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: buildQueryFromSelectionSet(document),\n            variables: variables,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) { context = {}; }\n        if (variables === void 0) { variables = {}; }\n        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n            return __generator(this, function (_b) {\n                mainDefinition = getMainDefinition(document);\n                fragments = getFragmentDefinitions(document);\n                fragmentMap = createFragmentMap(fragments);\n                definitionOperation = mainDefinition\n                    .operation;\n                defaultOperationType = definitionOperation\n                    ? capitalizeFirstLetter(definitionOperation)\n                    : 'Query';\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: __assign({}, context, { cache: cache,\n                        client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return __generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return __generator(this, function (_a) {\n                        if (!shouldInclude(selection, variables)) {\n                            return [2];\n                        }\n                        if (isField(selection)) {\n                            return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== 'undefined') {\n                                        resultsToMerge.push((_a = {},\n                                            _a[resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            fragment = fragmentMap[selection.name.value];\n                            process.env.NODE_ENV === \"production\" ? invariant(fragment) : invariant(fragment, \"No fragment named \" + selection.name.value);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2];\n                    });\n                }); };\n                return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return __generator(this, function (_a) {\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolver(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, { field: field }));\n                        }\n                    }\n                }\n                return [2, resultPromise.then(function (result) {\n                        if (result === void 0) { result = defaultResult; }\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === 'export' && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        if (result == null) {\n                            return result;\n                        }\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, result, execContext);\n                        }\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, item, execContext);\n            }\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n            }\n        }));\n    };\n    return LocalState;\n}());\n\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, store = _a.store, _c = _a.onBroadcast, onBroadcast = _c === void 0 ? function () { return undefined; } : _c, _d = _a.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _a.clientAwareness, clientAwareness = _e === void 0 ? {} : _e, localState = _a.localState;\n        this.mutationStore = new MutationStore();\n        this.queryStore = new QueryStore();\n        this.clientAwareness = {};\n        this.idCounter = 1;\n        this.queries = new Map();\n        this.fetchQueryRejectFns = new Map();\n        this.queryIdsByName = {};\n        this.pollingInfoByQueryId = new Map();\n        this.nextPoll = null;\n        this.link = link;\n        this.deduplicator = ApolloLink.from([new DedupLink(), link]);\n        this.queryDeduplication = queryDeduplication;\n        this.dataStore = store;\n        this.onBroadcast = onBroadcast;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: store.getCache() });\n        this.ssrMode = ssrMode;\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(new Error('QueryManager stopped while query was in flight'));\n        });\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueriesByName = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, fetchPolicy = _a.fetchPolicy, _e = _a.context, context = _e === void 0 ? {} : _e;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, cache, generateUpdateQueriesInfo, updatedVariables, _f;\n            var _this = this;\n            return __generator(this, function (_g) {\n                switch (_g.label) {\n                    case 0:\n                        process.env.NODE_ENV === \"production\" ? invariant(mutation) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n                        process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache') : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"fetchPolicy for mutations currently only supports the 'no-cache' policy\");\n                        mutationId = this.generateQueryId();\n                        cache = this.dataStore.getCache();\n                        (mutation = cache.transformDocument(mutation)),\n                            (variables = assign({}, getDefaultValues(getMutationDefinition(mutation)), variables));\n                        this.setQuery(mutationId, function () { return ({ document: mutation }); });\n                        generateUpdateQueriesInfo = function () {\n                            var ret = {};\n                            if (updateQueriesByName) {\n                                Object.keys(updateQueriesByName).forEach(function (queryName) {\n                                    return (_this.queryIdsByName[queryName] || []).forEach(function (queryId) {\n                                        ret[queryId] = {\n                                            updater: updateQueriesByName[queryName],\n                                            query: _this.queryStore.get(queryId),\n                                        };\n                                    });\n                                });\n                            }\n                            return ret;\n                        };\n                        if (!hasClientExports(mutation)) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        _f = _g.sent();\n                        return [3, 3];\n                    case 2:\n                        _f = variables;\n                        _g.label = 3;\n                    case 3:\n                        updatedVariables = _f;\n                        this.mutationStore.initMutation(mutationId, mutation, updatedVariables);\n                        this.dataStore.markMutationInit({\n                            mutationId: mutationId,\n                            document: mutation,\n                            variables: updatedVariables || {},\n                            updateQueries: generateUpdateQueriesInfo(),\n                            update: updateWithProxyFn,\n                            optimisticResponse: optimisticResponse,\n                        });\n                        this.broadcastQueries();\n                        return [2, new Promise(function (resolve, reject) {\n                                var storeResult;\n                                var error;\n                                var operation = _this.buildOperationForLink(mutation, updatedVariables, __assign({}, context, { optimisticResponse: optimisticResponse }));\n                                var completeMutation = function () {\n                                    if (error) {\n                                        _this.mutationStore.markMutationError(mutationId, error);\n                                    }\n                                    _this.dataStore.markMutationComplete({\n                                        mutationId: mutationId,\n                                        optimisticResponse: optimisticResponse,\n                                    });\n                                    _this.broadcastQueries();\n                                    if (error) {\n                                        return Promise.reject(error);\n                                    }\n                                    if (typeof refetchQueries === 'function') {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    var refetchQueryPromises = [];\n                                    for (var _i = 0, refetchQueries_1 = refetchQueries; _i < refetchQueries_1.length; _i++) {\n                                        var refetchQuery = refetchQueries_1[_i];\n                                        if (typeof refetchQuery === 'string') {\n                                            var promise = _this.refetchQueryByName(refetchQuery);\n                                            if (promise) {\n                                                refetchQueryPromises.push(promise);\n                                            }\n                                            continue;\n                                        }\n                                        var queryOptions = {\n                                            query: refetchQuery.query,\n                                            variables: refetchQuery.variables,\n                                            fetchPolicy: 'network-only',\n                                        };\n                                        if (refetchQuery.context) {\n                                            queryOptions.context = refetchQuery.context;\n                                        }\n                                        refetchQueryPromises.push(_this.query(queryOptions));\n                                    }\n                                    return Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                                        _this.setQuery(mutationId, function () { return ({ document: null }); });\n                                        if (errorPolicy === 'ignore' &&\n                                            storeResult &&\n                                            graphQLResultHasError(storeResult)) {\n                                            delete storeResult.errors;\n                                        }\n                                        return storeResult;\n                                    });\n                                };\n                                var clientQuery = _this.localState.clientQuery(operation.query);\n                                var serverQuery = _this.localState.serverQuery(operation.query);\n                                if (serverQuery) {\n                                    operation.query = serverQuery;\n                                }\n                                var obs = serverQuery\n                                    ? execute(_this.link, operation)\n                                    : Observable.of({\n                                        data: {},\n                                    });\n                                var self = _this;\n                                var complete = false;\n                                var handlingNext = false;\n                                obs.subscribe({\n                                    next: function (result) { return __awaiter(_this, void 0, void 0, function () {\n                                        var updatedResult, context, variables;\n                                        return __generator(this, function (_a) {\n                                            switch (_a.label) {\n                                                case 0:\n                                                    handlingNext = true;\n                                                    if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                                        handlingNext = false;\n                                                        error = new ApolloError({\n                                                            graphQLErrors: result.errors,\n                                                        });\n                                                        return [2];\n                                                    }\n                                                    self.mutationStore.markMutationResult(mutationId);\n                                                    updatedResult = result;\n                                                    context = operation.context, variables = operation.variables;\n                                                    if (!(clientQuery && hasDirectives(['client'], clientQuery))) return [3, 2];\n                                                    return [4, self.localState\n                                                            .runResolvers({\n                                                            document: clientQuery,\n                                                            remoteResult: result,\n                                                            context: context,\n                                                            variables: variables,\n                                                        })\n                                                            .catch(function (error) {\n                                                            handlingNext = false;\n                                                            reject(error);\n                                                            return result;\n                                                        })];\n                                                case 1:\n                                                    updatedResult = _a.sent();\n                                                    _a.label = 2;\n                                                case 2:\n                                                    if (fetchPolicy !== 'no-cache') {\n                                                        self.dataStore.markMutationResult({\n                                                            mutationId: mutationId,\n                                                            result: updatedResult,\n                                                            document: mutation,\n                                                            variables: updatedVariables || {},\n                                                            updateQueries: generateUpdateQueriesInfo(),\n                                                            update: updateWithProxyFn,\n                                                        });\n                                                    }\n                                                    storeResult = updatedResult;\n                                                    handlingNext = false;\n                                                    if (complete) {\n                                                        completeMutation().then(resolve, reject);\n                                                    }\n                                                    return [2];\n                                            }\n                                        });\n                                    }); },\n                                    error: function (err) {\n                                        self.mutationStore.markMutationError(mutationId, err);\n                                        self.dataStore.markMutationComplete({\n                                            mutationId: mutationId,\n                                            optimisticResponse: optimisticResponse,\n                                        });\n                                        self.broadcastQueries();\n                                        self.setQuery(mutationId, function () { return ({ document: null }); });\n                                        reject(new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                    complete: function () {\n                                        if (!handlingNext) {\n                                            completeMutation().then(resolve, reject);\n                                        }\n                                        complete = true;\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, variables, _b, metadata, _c, fetchPolicy, _d, context, cache, query, updatedVariables, _e, updatedOptions, storeResult, needToFetch, _f, complete, result, shouldFetch, requestId, cancel, shouldDispatchClientResult, networkResult;\n            var _this = this;\n            return __generator(this, function (_g) {\n                switch (_g.label) {\n                    case 0:\n                        _a = options.variables, variables = _a === void 0 ? {} : _a, _b = options.metadata, metadata = _b === void 0 ? null : _b, _c = options.fetchPolicy, fetchPolicy = _c === void 0 ? 'cache-first' : _c, _d = options.context, context = _d === void 0 ? {} : _d;\n                        cache = this.dataStore.getCache();\n                        query = cache.transformDocument(options.query);\n                        if (!hasClientExports(query)) return [3, 2];\n                        return [4, this.localState.addExportedVariables(query, variables, context)];\n                    case 1:\n                        _e = _g.sent();\n                        return [3, 3];\n                    case 2:\n                        _e = variables;\n                        _g.label = 3;\n                    case 3:\n                        updatedVariables = _e;\n                        updatedOptions = __assign({}, options, { variables: updatedVariables });\n                        needToFetch = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n                        if (fetchType !== FetchType.refetch &&\n                            fetchPolicy !== 'network-only' &&\n                            fetchPolicy !== 'no-cache') {\n                            _f = this.dataStore.getCache().diff({\n                                query: query,\n                                variables: updatedVariables,\n                                returnPartialData: true,\n                                optimistic: false,\n                            }), complete = _f.complete, result = _f.result;\n                            needToFetch = !complete || fetchPolicy === 'cache-and-network';\n                            storeResult = result;\n                        }\n                        shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n                        if (hasDirectives(['live'], query))\n                            shouldFetch = true;\n                        requestId = this.generateRequestId();\n                        cancel = this.updateQueryWatch(queryId, query, updatedOptions);\n                        this.setQuery(queryId, function () { return ({\n                            document: query,\n                            lastRequestId: requestId,\n                            invalidated: true,\n                            cancel: cancel,\n                        }); });\n                        this.invalidate(true, fetchMoreForQueryId);\n                        this.queryStore.initQuery({\n                            queryId: queryId,\n                            document: query,\n                            storePreviousVariables: shouldFetch,\n                            variables: updatedVariables,\n                            isPoll: fetchType === FetchType.poll,\n                            isRefetch: fetchType === FetchType.refetch,\n                            metadata: metadata,\n                            fetchMoreForQueryId: fetchMoreForQueryId,\n                        });\n                        this.broadcastQueries();\n                        shouldDispatchClientResult = !shouldFetch || fetchPolicy === 'cache-and-network';\n                        if (shouldDispatchClientResult) {\n                            this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n                            this.invalidate(true, queryId, fetchMoreForQueryId);\n                            this.broadcastQueries(this.localState.shouldForceResolvers(query));\n                        }\n                        if (shouldFetch) {\n                            networkResult = this.fetchRequest({\n                                requestId: requestId,\n                                queryId: queryId,\n                                document: query,\n                                options: updatedOptions,\n                                fetchMoreForQueryId: fetchMoreForQueryId,\n                            }).catch(function (error) {\n                                if (isApolloError(error)) {\n                                    throw error;\n                                }\n                                else {\n                                    var lastRequestId = _this.getQuery(queryId).lastRequestId;\n                                    if (requestId >= (lastRequestId || 1)) {\n                                        _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n                                        _this.invalidate(true, queryId, fetchMoreForQueryId);\n                                        _this.broadcastQueries();\n                                    }\n                                    throw new ApolloError({ networkError: error });\n                                }\n                            });\n                            if (fetchPolicy !== 'cache-and-network') {\n                                return [2, networkResult];\n                            }\n                            else {\n                                networkResult.catch(function () { });\n                            }\n                        }\n                        return [2, Promise.resolve({ data: storeResult })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n        var _this = this;\n        var previouslyHadError = false;\n        return function (queryStoreValue, newData, forceResolvers) { return __awaiter(_this, void 0, void 0, function () {\n            var observableQuery, fetchPolicy, errorPolicy, lastResult, lastError, shouldNotifyIfLoading, networkStatusChanged, errorStatusChanged, apolloError_1, data, isMissing, document_1, readResult, resultFromStore, query, variables, context, updatedResult, e_1, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.invalidate(false, queryId);\n                        if (!queryStoreValue)\n                            return [2];\n                        observableQuery = this.getQuery(queryId).observableQuery;\n                        fetchPolicy = observableQuery\n                            ? observableQuery.options.fetchPolicy\n                            : options.fetchPolicy;\n                        if (fetchPolicy === 'standby')\n                            return [2];\n                        errorPolicy = observableQuery\n                            ? observableQuery.options.errorPolicy\n                            : options.errorPolicy;\n                        lastResult = observableQuery\n                            ? observableQuery.getLastResult()\n                            : null;\n                        lastError = observableQuery ? observableQuery.getLastError() : null;\n                        shouldNotifyIfLoading = (!newData && queryStoreValue.previousVariables != null) ||\n                            fetchPolicy === 'cache-only' ||\n                            fetchPolicy === 'cache-and-network';\n                        networkStatusChanged = Boolean(lastResult &&\n                            queryStoreValue.networkStatus !== lastResult.networkStatus);\n                        errorStatusChanged = errorPolicy &&\n                            (lastError && lastError.graphQLErrors) !==\n                                queryStoreValue.graphQLErrors &&\n                            errorPolicy !== 'none';\n                        if (!(!isNetworkRequestInFlight(queryStoreValue.networkStatus) ||\n                            (networkStatusChanged && options.notifyOnNetworkStatusChange) ||\n                            shouldNotifyIfLoading)) return [3, 8];\n                        if (((!errorPolicy || errorPolicy === 'none') &&\n                            queryStoreValue.graphQLErrors &&\n                            queryStoreValue.graphQLErrors.length > 0) ||\n                            queryStoreValue.networkError) {\n                            apolloError_1 = new ApolloError({\n                                graphQLErrors: queryStoreValue.graphQLErrors,\n                                networkError: queryStoreValue.networkError,\n                            });\n                            previouslyHadError = true;\n                            if (observer.error) {\n                                try {\n                                    observer.error(apolloError_1);\n                                }\n                                catch (e) {\n                                    setTimeout(function () {\n                                        throw e;\n                                    }, 0);\n                                }\n                            }\n                            else {\n                                setTimeout(function () {\n                                    throw apolloError_1;\n                                }, 0);\n                                if (process.env.NODE_ENV !== 'production') {\n                                    console.info('An unhandled error was thrown because no error handler is registered ' +\n                                        'for the query ' +\n                                        JSON.stringify(queryStoreValue.document));\n                                }\n                            }\n                            return [2];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 7, , 8]);\n                        data = void 0;\n                        isMissing = void 0;\n                        if (newData) {\n                            if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n                                this.setQuery(queryId, function () { return ({ newData: null }); });\n                            }\n                            data = newData.result;\n                            isMissing = !newData.complete || false;\n                        }\n                        else {\n                            if (lastResult && lastResult.data && !errorStatusChanged) {\n                                data = lastResult.data;\n                                isMissing = false;\n                            }\n                            else {\n                                document_1 = this.getQuery(queryId).document;\n                                readResult = this.dataStore.getCache().diff({\n                                    query: document_1,\n                                    variables: queryStoreValue.previousVariables ||\n                                        queryStoreValue.variables,\n                                    optimistic: true,\n                                });\n                                data = readResult.result;\n                                isMissing = !readResult.complete;\n                            }\n                        }\n                        resultFromStore = void 0;\n                        if (isMissing && fetchPolicy !== 'cache-only') {\n                            resultFromStore = {\n                                data: lastResult && lastResult.data,\n                                loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n                                networkStatus: queryStoreValue.networkStatus,\n                                stale: true,\n                            };\n                        }\n                        else {\n                            resultFromStore = {\n                                data: data,\n                                loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n                                networkStatus: queryStoreValue.networkStatus,\n                                stale: false,\n                            };\n                        }\n                        if (errorPolicy === 'all' &&\n                            queryStoreValue.graphQLErrors &&\n                            queryStoreValue.graphQLErrors.length > 0) {\n                            resultFromStore.errors = queryStoreValue.graphQLErrors;\n                        }\n                        if (!observer.next) return [3, 6];\n                        if (!(previouslyHadError ||\n                            !observableQuery ||\n                            observableQuery.isDifferentFromLastResult(resultFromStore))) return [3, 6];\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 5, , 6]);\n                        if (!forceResolvers) return [3, 4];\n                        query = options.query, variables = options.variables, context = options.context;\n                        return [4, this.localState.runResolvers({\n                                document: query,\n                                remoteResult: resultFromStore,\n                                context: context,\n                                variables: variables,\n                                onlyRunForcedResolvers: forceResolvers,\n                            })];\n                    case 3:\n                        updatedResult = _a.sent();\n                        resultFromStore = __assign({}, resultFromStore, updatedResult);\n                        _a.label = 4;\n                    case 4:\n                        observer.next(resultFromStore);\n                        return [3, 6];\n                    case 5:\n                        e_1 = _a.sent();\n                        setTimeout(function () {\n                            throw e_1;\n                        }, 0);\n                        return [3, 6];\n                    case 6:\n                        previouslyHadError = false;\n                        return [3, 8];\n                    case 7:\n                        error_1 = _a.sent();\n                        previouslyHadError = true;\n                        if (observer.error)\n                            observer.error(new ApolloError({ networkError: error_1 }));\n                        return [2];\n                    case 8: return [2];\n                }\n            });\n        }); };\n    };\n    QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n        if (shouldSubscribe === void 0) { shouldSubscribe = true; }\n        process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'standby') : invariant(options.fetchPolicy !== 'standby', 'client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n        var queryDefinition = getQueryDefinition(options.query);\n        if (queryDefinition.variableDefinitions &&\n            queryDefinition.variableDefinitions.length) {\n            var defaultValues = getDefaultValues(queryDefinition);\n            options.variables = assign({}, defaultValues, options.variables);\n        }\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var transformedOptions = __assign({}, options);\n        return new ObservableQuery({\n            queryManager: this,\n            options: transformedOptions,\n            shouldSubscribe: shouldSubscribe,\n        });\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(options.query) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.');\n        process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document') : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n        return new Promise(function (resolve, reject) {\n            var watchedQuery = _this.watchQuery(options, false);\n            _this.fetchQueryRejectFns.set(\"query:\" + watchedQuery.queryId, reject);\n            watchedQuery\n                .result()\n                .then(resolve, reject)\n                .then(function () {\n                return _this.fetchQueryRejectFns.delete(\"query:\" + watchedQuery.queryId);\n            });\n        });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        var queryId = this.idCounter.toString();\n        this.idCounter++;\n        return queryId;\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        this.stopPollingQuery(queryId);\n        this.queryStore.stopQuery(queryId);\n        this.invalidate(true, queryId);\n    };\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {\n        this.setQuery(queryId, function (_a) {\n            var _b = _a.listeners, listeners = _b === void 0 ? [] : _b;\n            return ({\n                listeners: listeners.concat([listener]),\n                invalidated: false,\n            });\n        });\n    };\n    QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n        var _this = this;\n        var cancel = this.getQuery(queryId).cancel;\n        if (cancel)\n            cancel();\n        var previousResult = function () {\n            var previousResult = null;\n            var observableQuery = _this.getQuery(queryId).observableQuery;\n            if (observableQuery) {\n                var lastResult = observableQuery.getLastResult();\n                if (lastResult) {\n                    previousResult = lastResult.data;\n                }\n            }\n            return previousResult;\n        };\n        return this.dataStore.getCache().watch({\n            query: document,\n            variables: options.variables,\n            optimistic: true,\n            previousResult: previousResult,\n            callback: function (newData) {\n                _this.setQuery(queryId, function () { return ({ invalidated: true, newData: newData }); });\n            },\n        });\n    };\n    QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n        this.setQuery(queryId, function () { return ({ observableQuery: observableQuery }); });\n        var queryDef = getQueryDefinition(observableQuery.options.query);\n        if (queryDef.name && queryDef.name.value) {\n            var queryName = queryDef.name.value;\n            this.queryIdsByName[queryName] = this.queryIdsByName[queryName] || [];\n            this.queryIdsByName[queryName].push(observableQuery.queryId);\n        }\n    };\n    QueryManager.prototype.removeObservableQuery = function (queryId) {\n        var _a = this.getQuery(queryId), observableQuery = _a.observableQuery, cancel = _a.cancel;\n        if (cancel)\n            cancel();\n        if (!observableQuery)\n            return;\n        var definition = getQueryDefinition(observableQuery.options.query);\n        var queryName = definition.name ? definition.name.value : null;\n        this.setQuery(queryId, function () { return ({ observableQuery: null }); });\n        if (queryName) {\n            this.queryIdsByName[queryName] = this.queryIdsByName[queryName].filter(function (val) {\n                return !(observableQuery.queryId === val);\n            });\n        }\n    };\n    QueryManager.prototype.clearStore = function () {\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(new Error('Store reset while query was in flight(not completed in link chain)'));\n        });\n        var resetIds = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery)\n                resetIds.push(queryId);\n        });\n        this.queryStore.reset(resetIds);\n        this.mutationStore.reset();\n        var reset = this.dataStore.reset();\n        return reset;\n    };\n    QueryManager.prototype.resetStore = function () {\n        var _this = this;\n        return this.clearStore().then(function () {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var observableQueryPromises = this.getObservableQueryPromises(includeStandby);\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.startQuery = function (queryId, options, listener) {\n        this.addQueryListener(queryId, listener);\n        this.fetchQuery(queryId, options)\n            .catch(function () { return undefined; });\n        return queryId;\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (options) {\n        var _this = this;\n        var query = options.query;\n        var isCacheEnabled = !(options.fetchPolicy && options.fetchPolicy === 'no-cache');\n        var cache = this.dataStore.getCache();\n        var transformedDoc = cache.transformDocument(query);\n        var variables = assign({}, getDefaultValues(getOperationDefinition(query)), options.variables);\n        var updatedVariables = variables;\n        var sub;\n        var observers = [];\n        var clientQuery = this.localState.clientQuery(transformedDoc);\n        return new Observable(function (observer) {\n            observers.push(observer);\n            if (observers.length === 1) {\n                var activeNextCalls_1 = 0;\n                var complete_1 = false;\n                var handler_1 = {\n                    next: function (result) { return __awaiter(_this, void 0, void 0, function () {\n                        var updatedResult;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    activeNextCalls_1 += 1;\n                                    updatedResult = result;\n                                    if (!(clientQuery && hasDirectives(['client'], clientQuery))) return [3, 2];\n                                    return [4, this.localState.runResolvers({\n                                            document: clientQuery,\n                                            remoteResult: result,\n                                            context: {},\n                                            variables: updatedVariables,\n                                        })];\n                                case 1:\n                                    updatedResult = _a.sent();\n                                    _a.label = 2;\n                                case 2:\n                                    if (isCacheEnabled) {\n                                        this.dataStore.markSubscriptionResult(updatedResult, transformedDoc, updatedVariables);\n                                        this.broadcastQueries();\n                                    }\n                                    observers.forEach(function (obs) {\n                                        if (graphQLResultHasError(updatedResult) && obs.error) {\n                                            obs.error(new ApolloError({\n                                                graphQLErrors: updatedResult.errors,\n                                            }));\n                                        }\n                                        else if (obs.next) {\n                                            obs.next(updatedResult);\n                                        }\n                                        activeNextCalls_1 -= 1;\n                                    });\n                                    if (activeNextCalls_1 === 0 && complete_1) {\n                                        handler_1.complete();\n                                    }\n                                    return [2];\n                            }\n                        });\n                    }); },\n                    error: function (error) {\n                        observers.forEach(function (obs) {\n                            if (obs.error) {\n                                obs.error(error);\n                            }\n                        });\n                    },\n                    complete: function () {\n                        if (activeNextCalls_1 === 0) {\n                            observers.forEach(function (obs) {\n                                if (obs.complete) {\n                                    obs.complete();\n                                }\n                            });\n                        }\n                        complete_1 = true;\n                    }\n                };\n                (function () { return __awaiter(_this, void 0, void 0, function () {\n                    var updatedVariables, _a, serverQuery, operation;\n                    return __generator(this, function (_b) {\n                        switch (_b.label) {\n                            case 0:\n                                if (!hasClientExports(transformedDoc)) return [3, 2];\n                                return [4, this.localState.addExportedVariables(transformedDoc, variables)];\n                            case 1:\n                                _a = _b.sent();\n                                return [3, 3];\n                            case 2:\n                                _a = variables;\n                                _b.label = 3;\n                            case 3:\n                                updatedVariables = _a;\n                                serverQuery = this.localState.serverQuery(transformedDoc);\n                                if (serverQuery) {\n                                    operation = this.buildOperationForLink(serverQuery, updatedVariables);\n                                    sub = execute(this.link, operation).subscribe(handler_1);\n                                }\n                                else {\n                                    sub = Observable.of({ data: {} }).subscribe(handler_1);\n                                }\n                                return [2];\n                        }\n                    });\n                }); })();\n            }\n            return function () {\n                observers = observers.filter(function (obs) { return obs !== observer; });\n                if (observers.length === 0 && sub) {\n                    sub.unsubscribe();\n                }\n            };\n        });\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        var subscriptions = this.getQuery(queryId).subscriptions;\n        this.fetchQueryRejectFns.delete(\"query:\" + queryId);\n        this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n        subscriptions.forEach(function (x) { return x.unsubscribe(); });\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n        if (optimistic === void 0) { optimistic = true; }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query, fetchPolicy = _a.fetchPolicy;\n        var lastResult = observableQuery.getLastResult();\n        var newData = this.getQuery(observableQuery.queryId).newData;\n        if (newData && newData.complete) {\n            return { data: newData.result, partial: false };\n        }\n        else if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n            return { data: undefined, partial: false };\n        }\n        else {\n            try {\n                var data = this.dataStore.getCache().read({\n                    query: query,\n                    variables: variables,\n                    previousResult: lastResult ? lastResult.data : undefined,\n                    optimistic: optimistic,\n                }) || undefined;\n                return { data: data, partial: false };\n            }\n            catch (e) {\n                return { data: undefined, partial: true };\n            }\n        }\n    };\n    QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n        var observableQuery;\n        if (typeof queryIdOrObservable === 'string') {\n            var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n            process.env.NODE_ENV === \"production\" ? invariant(foundObserveableQuery) : invariant(foundObserveableQuery, \"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n            observableQuery = foundObserveableQuery;\n        }\n        else {\n            observableQuery = queryIdOrObservable;\n        }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query;\n        var data = this.getCurrentQueryResult(observableQuery, false).data;\n        return {\n            previousResult: data,\n            variables: variables,\n            document: query,\n        };\n    };\n    QueryManager.prototype.broadcastQueries = function (forceResolvers) {\n        var _this = this;\n        if (forceResolvers === void 0) { forceResolvers = false; }\n        this.onBroadcast();\n        this.queries.forEach(function (info, id) {\n            if (!info.invalidated || !info.listeners)\n                return;\n            info.listeners\n                .filter(function (x) { return !!x; })\n                .forEach(function (listener) {\n                listener(_this.queryStore.get(id), info.newData, forceResolvers);\n            });\n        });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableQueryPromises = function (includeStandby) {\n        var _this = this;\n        var observableQueryPromises = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (!observableQuery)\n                return;\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (fetchPolicy !== 'cache-only' &&\n                (includeStandby || fetchPolicy !== 'standby')) {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.setQuery(queryId, function () { return ({ newData: null }); });\n            _this.invalidate(true, queryId);\n        });\n        return observableQueryPromises;\n    };\n    QueryManager.prototype.fetchRequest = function (_a) {\n        var _this = this;\n        var requestId = _a.requestId, queryId = _a.queryId, document = _a.document, options = _a.options, fetchMoreForQueryId = _a.fetchMoreForQueryId;\n        var variables = options.variables, context = options.context, _b = options.errorPolicy, errorPolicy = _b === void 0 ? 'none' : _b, fetchPolicy = options.fetchPolicy;\n        var resultFromStore;\n        var errorsFromStore;\n        return new Promise(function (resolve, reject) {\n            var obs;\n            var updatedContext = {};\n            var clientQuery = _this.localState.clientQuery(document);\n            var serverQuery = _this.localState.serverQuery(document);\n            if (serverQuery) {\n                var operation = _this.buildOperationForLink(serverQuery, variables, __assign({}, context, { forceFetch: !_this.queryDeduplication }));\n                updatedContext = operation.context;\n                obs = execute(_this.deduplicator, operation);\n            }\n            else {\n                updatedContext = _this.prepareContext(context);\n                obs = Observable.of({ data: {} });\n            }\n            _this.fetchQueryRejectFns.set(\"fetchRequest:\" + queryId, reject);\n            var complete = false;\n            var handlingNext = true;\n            var subscriber = {\n                next: function (result) { return __awaiter(_this, void 0, void 0, function () {\n                    var updatedResult, lastRequestId;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                handlingNext = true;\n                                updatedResult = result;\n                                lastRequestId = this.getQuery(queryId).lastRequestId;\n                                if (!(requestId >= (lastRequestId || 1))) return [3, 3];\n                                if (!(clientQuery && hasDirectives(['client'], clientQuery))) return [3, 2];\n                                return [4, this.localState\n                                        .runResolvers({\n                                        document: clientQuery,\n                                        remoteResult: result,\n                                        context: updatedContext,\n                                        variables: variables,\n                                    })\n                                        .catch(function (error) {\n                                        handlingNext = false;\n                                        reject(error);\n                                        return result;\n                                    })];\n                            case 1:\n                                updatedResult = _a.sent();\n                                _a.label = 2;\n                            case 2:\n                                if (fetchPolicy !== 'no-cache') {\n                                    try {\n                                        this.dataStore.markQueryResult(updatedResult, document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n                                    }\n                                    catch (e) {\n                                        handlingNext = false;\n                                        reject(e);\n                                        return [2];\n                                    }\n                                }\n                                else {\n                                    this.setQuery(queryId, function () { return ({\n                                        newData: { result: updatedResult.data, complete: true },\n                                    }); });\n                                }\n                                this.queryStore.markQueryResult(queryId, updatedResult, fetchMoreForQueryId);\n                                this.invalidate(true, queryId, fetchMoreForQueryId);\n                                this.broadcastQueries();\n                                _a.label = 3;\n                            case 3:\n                                if (updatedResult.errors && errorPolicy === 'none') {\n                                    handlingNext = false;\n                                    reject(new ApolloError({\n                                        graphQLErrors: updatedResult.errors,\n                                    }));\n                                    return [2];\n                                }\n                                else if (errorPolicy === 'all') {\n                                    errorsFromStore = updatedResult.errors;\n                                }\n                                if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n                                    resultFromStore = updatedResult.data;\n                                }\n                                else {\n                                    try {\n                                        resultFromStore = this.dataStore.getCache().read({\n                                            variables: variables,\n                                            query: document,\n                                            optimistic: false,\n                                        });\n                                    }\n                                    catch (e) { }\n                                }\n                                handlingNext = false;\n                                if (complete) {\n                                    subscriber.complete();\n                                }\n                                return [2];\n                        }\n                    });\n                }); },\n                error: function (error) {\n                    _this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n                    _this.setQuery(queryId, function (_a) {\n                        var subscriptions = _a.subscriptions;\n                        return ({\n                            subscriptions: subscriptions.filter(function (x) { return x !== subscription; }),\n                        });\n                    });\n                    reject(error);\n                },\n                complete: function () {\n                    if (!handlingNext) {\n                        _this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n                        _this.setQuery(queryId, function (_a) {\n                            var subscriptions = _a.subscriptions;\n                            return ({\n                                subscriptions: subscriptions.filter(function (x) { return x !== subscription; }),\n                            });\n                        });\n                        resolve({\n                            data: resultFromStore,\n                            errors: errorsFromStore,\n                            loading: false,\n                            networkStatus: NetworkStatus.ready,\n                            stale: false,\n                        });\n                    }\n                    complete = true;\n                },\n            };\n            var subscription = obs.subscribe(subscriber);\n            _this.setQuery(queryId, function (_a) {\n                var subscriptions = _a.subscriptions;\n                return ({\n                    subscriptions: subscriptions.concat([subscription]),\n                });\n            });\n        }).catch(function (error) {\n            _this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n            throw error;\n        });\n    };\n    QueryManager.prototype.refetchQueryByName = function (queryName) {\n        var _this = this;\n        var refetchedQueries = this.queryIdsByName[queryName];\n        if (refetchedQueries === undefined)\n            return;\n        return Promise.all(refetchedQueries\n            .map(function (id) { return _this.getQuery(id).observableQuery; })\n            .filter(function (x) { return !!x; })\n            .map(function (x) { return x.refetch(); }));\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        var requestId = this.idCounter;\n        this.idCounter++;\n        return requestId;\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        return (this.queries.get(queryId) || {\n            listeners: [],\n            invalidated: false,\n            document: null,\n            newData: null,\n            lastRequestId: null,\n            observableQuery: null,\n            subscriptions: [],\n        });\n    };\n    QueryManager.prototype.setQuery = function (queryId, updater) {\n        var prev = this.getQuery(queryId);\n        var newInfo = __assign({}, prev, updater(prev));\n        this.queries.set(queryId, newInfo);\n    };\n    QueryManager.prototype.invalidate = function (invalidated, queryId, fetchMoreForQueryId) {\n        if (queryId)\n            this.setQuery(queryId, function () { return ({ invalidated: invalidated }); });\n        if (fetchMoreForQueryId) {\n            this.setQuery(fetchMoreForQueryId, function () { return ({ invalidated: invalidated }); });\n        }\n    };\n    QueryManager.prototype.buildOperationForLink = function (document, variables, extraContext) {\n        var cache = this.dataStore.getCache();\n        return {\n            query: cache.transformForLink\n                ? cache.transformForLink(document)\n                : document,\n            variables: variables,\n            operationName: getOperationName(document) || undefined,\n            context: this.prepareContext(extraContext),\n        };\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign({}, newContext, { clientAwareness: this.clientAwareness });\n    };\n    QueryManager.prototype.checkInFlight = function (queryId) {\n        var query = this.queryStore.get(queryId);\n        return (query &&\n            query.networkStatus !== NetworkStatus.ready &&\n            query.networkStatus !== NetworkStatus.error);\n    };\n    QueryManager.prototype.startPollingQuery = function (options, queryId, listener) {\n        var pollInterval = options.pollInterval;\n        process.env.NODE_ENV === \"production\" ? invariant(pollInterval) : invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n        if (!this.ssrMode) {\n            this.pollingInfoByQueryId.set(queryId, {\n                interval: pollInterval,\n                lastPollTimeMs: Date.now() - 10,\n                options: __assign({}, options, { fetchPolicy: 'network-only' }),\n            });\n            if (listener) {\n                this.addQueryListener(queryId, listener);\n            }\n            this.schedulePoll(pollInterval);\n        }\n        return queryId;\n    };\n    QueryManager.prototype.stopPollingQuery = function (queryId) {\n        this.pollingInfoByQueryId.delete(queryId);\n    };\n    QueryManager.prototype.schedulePoll = function (timeLimitMs) {\n        var _this = this;\n        var now = Date.now();\n        if (this.nextPoll) {\n            if (timeLimitMs < this.nextPoll.time - now) {\n                clearTimeout(this.nextPoll.timeout);\n            }\n            else {\n                return;\n            }\n        }\n        this.nextPoll = {\n            time: now + timeLimitMs,\n            timeout: setTimeout(function () {\n                _this.nextPoll = null;\n                var nextTimeLimitMs = Infinity;\n                _this.pollingInfoByQueryId.forEach(function (info, queryId) {\n                    if (info.interval < nextTimeLimitMs) {\n                        nextTimeLimitMs = info.interval;\n                    }\n                    if (!_this.checkInFlight(queryId)) {\n                        if (Date.now() - info.lastPollTimeMs >= info.interval) {\n                            var updateLastPollTime = function () {\n                                info.lastPollTimeMs = Date.now();\n                            };\n                            _this.fetchQuery(queryId, info.options, FetchType.poll).then(updateLastPollTime, updateLastPollTime);\n                        }\n                    }\n                });\n                if (isFinite(nextTimeLimitMs)) {\n                    _this.schedulePoll(nextTimeLimitMs);\n                }\n            }, timeLimitMs),\n        };\n    };\n    return QueryManager;\n}());\n\nvar DataStore = (function () {\n    function DataStore(initialCache) {\n        this.cache = initialCache;\n    }\n    DataStore.prototype.getCache = function () {\n        return this.cache;\n    };\n    DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n        if (ignoreErrors === void 0) { ignoreErrors = false; }\n        var writeWithErrors = !graphQLResultHasError(result);\n        if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n            writeWithErrors = true;\n        }\n        if (!fetchMoreForQueryId && writeWithErrors) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n        if (!graphQLResultHasError(result)) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_SUBSCRIPTION',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markMutationInit = function (mutation) {\n        var _this = this;\n        if (mutation.optimisticResponse) {\n            var optimistic_1;\n            if (typeof mutation.optimisticResponse === 'function') {\n                optimistic_1 = mutation.optimisticResponse(mutation.variables);\n            }\n            else {\n                optimistic_1 = mutation.optimisticResponse;\n            }\n            var changeFn_1 = function () {\n                _this.markMutationResult({\n                    mutationId: mutation.mutationId,\n                    result: { data: optimistic_1 },\n                    document: mutation.document,\n                    variables: mutation.variables,\n                    updateQueries: mutation.updateQueries,\n                    update: mutation.update,\n                });\n            };\n            this.cache.recordOptimisticTransaction(function (c) {\n                var orig = _this.cache;\n                _this.cache = c;\n                try {\n                    changeFn_1();\n                }\n                finally {\n                    _this.cache = orig;\n                }\n            }, mutation.mutationId);\n        }\n    };\n    DataStore.prototype.markMutationResult = function (mutation) {\n        var _this = this;\n        if (!graphQLResultHasError(mutation.result)) {\n            var cacheWrites_1 = [];\n            cacheWrites_1.push({\n                result: mutation.result.data,\n                dataId: 'ROOT_MUTATION',\n                query: mutation.document,\n                variables: mutation.variables,\n            });\n            if (mutation.updateQueries) {\n                Object.keys(mutation.updateQueries)\n                    .filter(function (id) { return mutation.updateQueries[id]; })\n                    .forEach(function (queryId) {\n                    var _a = mutation.updateQueries[queryId], query = _a.query, updater = _a.updater;\n                    var _b = _this.cache.diff({\n                        query: query.document,\n                        variables: query.variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _b.result, complete = _b.complete;\n                    if (!complete) {\n                        return;\n                    }\n                    var nextQueryResult = tryFunctionOrLogError(function () {\n                        return updater(currentQueryResult, {\n                            mutationResult: mutation.result,\n                            queryName: getOperationName(query.document) || undefined,\n                            queryVariables: query.variables,\n                        });\n                    });\n                    if (nextQueryResult) {\n                        cacheWrites_1.push({\n                            result: nextQueryResult,\n                            dataId: 'ROOT_QUERY',\n                            query: query.document,\n                            variables: query.variables,\n                        });\n                    }\n                });\n            }\n            this.cache.performTransaction(function (c) {\n                cacheWrites_1.forEach(function (write) { return c.write(write); });\n            });\n            var update_1 = mutation.update;\n            if (update_1) {\n                this.cache.performTransaction(function (c) {\n                    tryFunctionOrLogError(function () { return update_1(c, mutation.result); });\n                });\n            }\n        }\n    };\n    DataStore.prototype.markMutationComplete = function (_a) {\n        var mutationId = _a.mutationId, optimisticResponse = _a.optimisticResponse;\n        if (!optimisticResponse)\n            return;\n        this.cache.removeOptimistic(mutationId);\n    };\n    DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n        this.cache.write({\n            result: newResult,\n            dataId: 'ROOT_QUERY',\n            variables: variables,\n            query: document,\n        });\n    };\n    DataStore.prototype.reset = function () {\n        return this.cache.reset();\n    };\n    return DataStore;\n}());\n\nvar version = \"2.5.1\";\n\nvar hasSuggestedDevtools = false;\nvar ApolloClient = (function () {\n    function ApolloClient(options) {\n        var _this = this;\n        this.defaultOptions = {};\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        this.clientAwareness = {};\n        var cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;\n        var link = options.link;\n        if (!link && resolvers) {\n            link = ApolloLink.empty();\n        }\n        if (!link || !cache) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"\\n        In order to initialize Apollo Client, you must specify link & cache properties on the config object.\\n        This is part of the required upgrade when migrating from Apollo Client 1.0 to Apollo Client 2.0.\\n        For more information, please visit:\\n          https://www.apollographql.com/docs/react/basics/setup.html\\n        to help you get started.\\n      \");\n        }\n        var supportedCache = new Map();\n        var supportedDirectives = new ApolloLink(function (operation, forward) {\n            var result = supportedCache.get(operation.query);\n            if (!result) {\n                result = removeConnectionDirectiveFromDocument(operation.query);\n                supportedCache.set(operation.query, result);\n                supportedCache.set(result, result);\n            }\n            operation.query = result;\n            return forward(operation);\n        });\n        this.link = supportedDirectives.concat(link);\n        this.cache = cache;\n        this.store = new DataStore(cache);\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.ssrMode = ssrMode;\n        this.defaultOptions = defaultOptions || {};\n        this.typeDefs = typeDefs;\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        var defaultConnectToDevTools = process.env.NODE_ENV !== 'production' &&\n            typeof window !== 'undefined' &&\n            !window.__APOLLO_CLIENT__;\n        if (typeof connectToDevTools === 'undefined'\n            ? defaultConnectToDevTools\n            : connectToDevTools && typeof window !== 'undefined') {\n            window.__APOLLO_CLIENT__ = this;\n        }\n        if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n            hasSuggestedDevtools = true;\n            if (typeof window !== 'undefined' &&\n                window.document &&\n                window.top === window.self) {\n                if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n                    if (window.navigator &&\n                        window.navigator.userAgent &&\n                        window.navigator.userAgent.indexOf('Chrome') > -1) {\n                        console.debug('Download the Apollo DevTools ' +\n                            'for a better development experience: ' +\n                            'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n                    }\n                }\n            }\n        }\n        this.version = version;\n        if (clientAwarenessName) {\n            this.clientAwareness.name = clientAwarenessName;\n        }\n        if (clientAwarenessVersion) {\n            this.clientAwareness.version = clientAwarenessVersion;\n        }\n        this.localState = new LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher,\n        });\n    }\n    ApolloClient.prototype.stop = function () {\n        if (this.queryManager) {\n            this.queryManager.stop();\n        }\n    };\n    ApolloClient.prototype.watchQuery = function (options) {\n        if (this.defaultOptions.watchQuery) {\n            options = __assign({}, this.defaultOptions.watchQuery, options);\n        }\n        if (this.disableNetworkFetches &&\n            (options.fetchPolicy === 'network-only' ||\n                options.fetchPolicy === 'cache-and-network')) {\n            options = __assign({}, options, { fetchPolicy: 'cache-first' });\n        }\n        return this.initQueryManager().watchQuery(options);\n    };\n    ApolloClient.prototype.query = function (options) {\n        if (this.defaultOptions.query) {\n            options = __assign({}, this.defaultOptions.query, options);\n        }\n        process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'cache-and-network') : invariant(options.fetchPolicy !== 'cache-and-network', 'cache-and-network fetchPolicy can only be used with watchQuery');\n        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n            options = __assign({}, options, { fetchPolicy: 'cache-first' });\n        }\n        return this.initQueryManager().query(options);\n    };\n    ApolloClient.prototype.mutate = function (options) {\n        if (this.defaultOptions.mutate) {\n            options = __assign({}, this.defaultOptions.mutate, options);\n        }\n        return this.initQueryManager().mutate(options);\n    };\n    ApolloClient.prototype.subscribe = function (options) {\n        return this.initQueryManager().startGraphQLSubscription(options);\n    };\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.initProxy().readQuery(options, optimistic);\n    };\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.initProxy().readFragment(options, optimistic);\n    };\n    ApolloClient.prototype.writeQuery = function (options) {\n        var result = this.initProxy().writeQuery(options);\n        this.initQueryManager().broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeFragment = function (options) {\n        var result = this.initProxy().writeFragment(options);\n        this.initQueryManager().broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeData = function (options) {\n        var result = this.initProxy().writeData(options);\n        this.initQueryManager().broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return execute(this.link, payload);\n    };\n    ApolloClient.prototype.initQueryManager = function () {\n        var _this = this;\n        if (!this.queryManager) {\n            this.queryManager = new QueryManager({\n                link: this.link,\n                store: this.store,\n                queryDeduplication: this.queryDeduplication,\n                ssrMode: this.ssrMode,\n                clientAwareness: this.clientAwareness,\n                localState: this.localState,\n                onBroadcast: function () {\n                    if (_this.devToolsHookCb) {\n                        _this.devToolsHookCb({\n                            action: {},\n                            state: {\n                                queries: _this.queryManager\n                                    ? _this.queryManager.queryStore.getStore()\n                                    : {},\n                                mutations: _this.queryManager\n                                    ? _this.queryManager.mutationStore.getStore()\n                                    : {},\n                            },\n                            dataWithOptimisticResults: _this.cache.extract(true),\n                        });\n                    }\n                },\n            });\n        }\n        return this.queryManager;\n    };\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.queryManager\n                ? _this.queryManager.clearStore()\n                : Promise.resolve(null);\n        })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () {\n            return _this.queryManager && _this.queryManager.reFetchObservableQueries\n                ? _this.queryManager.reFetchObservableQueries()\n                : Promise.resolve(null);\n        });\n    };\n    ApolloClient.prototype.clearStore = function () {\n        var _this = this;\n        var queryManager = this.queryManager;\n        return Promise.resolve()\n            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () {\n            return queryManager ? queryManager.clearStore() : Promise.resolve(null);\n        });\n    };\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.onClearStore = function (cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function () {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager\n            ? this.queryManager.reFetchObservableQueries(includeStandby)\n            : Promise.resolve(null);\n    };\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.initProxy().extract(optimistic);\n    };\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.initProxy().restore(serializedState);\n    };\n    ApolloClient.prototype.addResolvers = function (resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    ApolloClient.prototype.setResolvers = function (resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    ApolloClient.prototype.getResolvers = function () {\n        return this.localState.getResolvers();\n    };\n    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    ApolloClient.prototype.initProxy = function () {\n        if (!this.proxy) {\n            this.initQueryManager();\n            this.proxy = this.cache;\n        }\n        return this.proxy;\n    };\n    return ApolloClient;\n}());\n\nexport default ApolloClient;\nexport { ApolloClient, ObservableQuery, NetworkStatus, isApolloError, ApolloError, FetchType };\n//# sourceMappingURL=bundle.esm.js.map\n","import { visit } from 'graphql/language/visitor';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { __assign } from 'tslib';\nimport stringify from 'fast-json-stable-stringify';\n\nfunction isScalarValue(value) {\n    return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\nfunction isNumberValue(value) {\n    return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\nfunction isStringValue(value) {\n    return value.kind === 'StringValue';\n}\nfunction isBooleanValue(value) {\n    return value.kind === 'BooleanValue';\n}\nfunction isIntValue(value) {\n    return value.kind === 'IntValue';\n}\nfunction isFloatValue(value) {\n    return value.kind === 'FloatValue';\n}\nfunction isVariable(value) {\n    return value.kind === 'Variable';\n}\nfunction isObjectValue(value) {\n    return value.kind === 'ObjectValue';\n}\nfunction isListValue(value) {\n    return value.kind === 'ListValue';\n}\nfunction isEnumValue(value) {\n    return value.kind === 'EnumValue';\n}\nfunction isNullValue(value) {\n    return value.kind === 'NullValue';\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    }\n    else {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\"\" +\n            'is not supported. Use variables instead of inline arguments to ' +\n            'overcome this limitation.');\n    }\n}\nfunction storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function (directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function (_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    'connection',\n    'include',\n    'skip',\n    'client',\n    'rest',\n    'export',\n];\nfunction getStoreKeyName(fieldName, args, directives) {\n    if (directives &&\n        directives['connection'] &&\n        directives['connection']['key']) {\n        if (directives['connection']['filter'] &&\n            directives['connection']['filter'].length > 0) {\n            var filterKeys = directives['connection']['filter']\n                ? directives['connection']['filter']\n                : [];\n            filterKeys.sort();\n            var queryArgs_1 = args;\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function (key) {\n                filteredArgs_1[key] = queryArgs_1[key];\n            });\n            return directives['connection']['key'] + \"(\" + JSON.stringify(filteredArgs_1) + \")\";\n        }\n        else {\n            return directives['connection']['key'];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        var stringifiedArgs = stringify(args);\n        completeFieldName += \"(\" + stringifiedArgs + \")\";\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function (key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)\n                return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\" + key + \"(\" + JSON.stringify(directives[key]) + \")\";\n            }\n            else {\n                completeFieldName += \"@\" + key;\n            }\n        });\n    }\n    return completeFieldName;\n}\nfunction argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nfunction resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nfunction isField(selection) {\n    return selection.kind === 'Field';\n}\nfunction isInlineFragment(selection) {\n    return selection.kind === 'InlineFragment';\n}\nfunction isIdValue(idObject) {\n    return idObject &&\n        idObject.type === 'id' &&\n        typeof idObject.generated === 'boolean';\n}\nfunction toIdValue(idConfig, generated) {\n    if (generated === void 0) { generated = false; }\n    return __assign({ type: 'id', generated: generated }, (typeof idConfig === 'string'\n        ? { id: idConfig, typename: undefined }\n        : idConfig));\n}\nfunction isJsonValue(jsonObject) {\n    return (jsonObject != null &&\n        typeof jsonObject === 'object' &&\n        jsonObject.type === 'json');\n}\nfunction defaultValueFromVariable(node) {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"Variable nodes are not supported by valueFromNode\");\n}\nfunction valueFromNode(node, onVariable) {\n    if (onVariable === void 0) { onVariable = defaultValueFromVariable; }\n    switch (node.kind) {\n        case 'Variable':\n            return onVariable(node);\n        case 'NullValue':\n            return null;\n        case 'IntValue':\n            return parseInt(node.value, 10);\n        case 'FloatValue':\n            return parseFloat(node.value);\n        case 'ListValue':\n            return node.values.map(function (v) { return valueFromNode(v, onVariable); });\n        case 'ObjectValue': {\n            var value = {};\n            for (var _i = 0, _a = node.fields; _i < _a.length; _i++) {\n                var field = _a[_i];\n                value[field.name.value] = valueFromNode(field.value, onVariable);\n            }\n            return value;\n        }\n        default:\n            return node.value;\n    }\n}\n\nfunction getDirectiveInfoFromField(field, variables) {\n    if (field.directives && field.directives.length) {\n        var directiveObj_1 = {};\n        field.directives.forEach(function (directive) {\n            directiveObj_1[directive.name.value] = argumentsObjectFromField(directive, variables);\n        });\n        return directiveObj_1;\n    }\n    return null;\n}\nfunction shouldInclude(selection, variables) {\n    if (variables === void 0) { variables = {}; }\n    if (!selection.directives) {\n        return true;\n    }\n    var res = true;\n    selection.directives.forEach(function (directive) {\n        if (directive.name.value !== 'skip' && directive.name.value !== 'include') {\n            return;\n        }\n        var directiveArguments = directive.arguments || [];\n        var directiveName = directive.name.value;\n        process.env.NODE_ENV === \"production\" ? invariant(directiveArguments.length === 1) : invariant(directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n        var ifArgument = directiveArguments[0];\n        process.env.NODE_ENV === \"production\" ? invariant(ifArgument.name && ifArgument.name.value === 'if') : invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n        var ifValue = directiveArguments[0].value;\n        var evaledValue = false;\n        if (!ifValue || ifValue.kind !== 'BooleanValue') {\n            process.env.NODE_ENV === \"production\" ? invariant(ifValue.kind === 'Variable') : invariant(ifValue.kind === 'Variable', \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n            evaledValue = variables[ifValue.name.value];\n            process.env.NODE_ENV === \"production\" ? invariant(evaledValue !== void 0) : invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directiveName + \" directive.\");\n        }\n        else {\n            evaledValue = ifValue.value;\n        }\n        if (directiveName === 'skip') {\n            evaledValue = !evaledValue;\n        }\n        if (!evaledValue) {\n            res = false;\n        }\n    });\n    return res;\n}\nfunction getDirectiveNames(doc) {\n    var names = [];\n    visit(doc, {\n        Directive: function (node) {\n            names.push(node.name.value);\n        },\n    });\n    return names;\n}\nfunction hasDirectives(names, doc) {\n    return getDirectiveNames(doc).some(function (name) { return names.indexOf(name) > -1; });\n}\nfunction hasClientExports(document) {\n    return (document &&\n        hasDirectives(['client'], document) &&\n        hasDirectives(['export'], document));\n}\n\nfunction getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" +\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n        }\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === 'undefined') {\n        process.env.NODE_ENV === \"production\" ? invariant(fragments.length === 1) : invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = __assign({}, document, { definitions: [\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ].concat(document.definitions) });\n    return query;\n}\n\nfunction assign(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    sources.forEach(function (source) {\n        if (typeof source === 'undefined' || source === null) {\n            return;\n        }\n        Object.keys(source).forEach(function (key) {\n            target[key] = source[key];\n        });\n    });\n    return target;\n}\n\nfunction getMutationDefinition(doc) {\n    checkDocument(doc);\n    var mutationDef = doc.definitions.filter(function (definition) {\n        return definition.kind === 'OperationDefinition' &&\n            definition.operation === 'mutation';\n    })[0];\n    process.env.NODE_ENV === \"production\" ? invariant(mutationDef) : invariant(mutationDef, 'Must contain a mutation definition.');\n    return mutationDef;\n}\nfunction checkDocument(doc) {\n    process.env.NODE_ENV === \"production\" ? invariant(doc && doc.kind === 'Document') : invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })\n        .map(function (definition) {\n        if (definition.kind !== 'OperationDefinition') {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n        }\n        return definition;\n    });\n    process.env.NODE_ENV === \"production\" ? invariant(operations.length <= 1) : invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n    return doc;\n}\nfunction getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];\n}\nfunction getOperationDefinitionOrDie(document) {\n    var def = getOperationDefinition(document);\n    process.env.NODE_ENV === \"production\" ? invariant(def) : invariant(def, \"GraphQL document is missing an operation\");\n    return def;\n}\nfunction getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\nfunction getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });\n}\nfunction getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    process.env.NODE_ENV === \"production\" ? invariant(queryDef && queryDef.operation === 'query') : invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.');\n    return queryDef;\n}\nfunction getFragmentDefinition(doc) {\n    process.env.NODE_ENV === \"production\" ? invariant(doc.kind === 'Document') : invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    process.env.NODE_ENV === \"production\" ? invariant(doc.definitions.length <= 1) : invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.');\n    var fragmentDef = doc.definitions[0];\n    process.env.NODE_ENV === \"production\" ? invariant(fragmentDef.kind === 'FragmentDefinition') : invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.');\n    return fragmentDef;\n}\nfunction getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === 'OperationDefinition') {\n            var operation = definition.operation;\n            if (operation === 'query' ||\n                operation === 'mutation' ||\n                operation === 'subscription') {\n                return definition;\n            }\n        }\n        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\nfunction createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nfunction getDefaultValues(definition) {\n    if (definition &&\n        definition.variableDefinitions &&\n        definition.variableDefinitions.length) {\n        var defaultValues = definition.variableDefinitions\n            .filter(function (_a) {\n            var defaultValue = _a.defaultValue;\n            return defaultValue;\n        })\n            .map(function (_a) {\n            var variable = _a.variable, defaultValue = _a.defaultValue;\n            var defaultValueObj = {};\n            valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);\n            return defaultValueObj;\n        });\n        return assign.apply(void 0, [{}].concat(defaultValues));\n    }\n    return {};\n}\nfunction variablesInOperation(operation) {\n    var names = new Set();\n    if (operation.variableDefinitions) {\n        for (var _i = 0, _a = operation.variableDefinitions; _i < _a.length; _i++) {\n            var definition = _a[_i];\n            names.add(definition.variable.name.value);\n        }\n    }\n    return names;\n}\n\nfunction filterInPlace(array, test, context) {\n    var target = 0;\n    array.forEach(function (elem, i) {\n        if (test.call(this, elem, i, array)) {\n            array[target++] = elem;\n        }\n    }, context);\n    array.length = target;\n    return array;\n}\n\nvar TYPENAME_FIELD = {\n    kind: 'Field',\n    name: {\n        kind: 'Name',\n        value: '__typename',\n    },\n};\nfunction isEmpty(op, fragments) {\n    return op.selectionSet.selections.every(function (selection) {\n        return selection.kind === 'FragmentSpread' &&\n            isEmpty(fragments[selection.name.value], fragments);\n    });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc)))\n        ? null\n        : doc;\n}\nfunction getDirectiveMatcher(directives) {\n    return function directiveMatcher(directive) {\n        return directives.some(function (dir) {\n            return (dir.name && dir.name === directive.name.value) ||\n                (dir.test && dir.test(directive));\n        });\n    };\n}\nfunction removeDirectivesFromDocument(directives, doc) {\n    var variablesInUse = Object.create(null);\n    var variablesToRemove = [];\n    var fragmentSpreadsInUse = Object.create(null);\n    var fragmentSpreadsToRemove = [];\n    var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n        Variable: {\n            enter: function (node, _key, parent) {\n                if (parent.kind !== 'VariableDefinition') {\n                    variablesInUse[node.name.value] = true;\n                }\n            },\n        },\n        Field: {\n            enter: function (node) {\n                if (directives && node.directives) {\n                    var shouldRemoveField = directives.some(function (directive) { return directive.remove; });\n                    if (shouldRemoveField &&\n                        node.directives &&\n                        node.directives.some(getDirectiveMatcher(directives))) {\n                        if (node.arguments) {\n                            node.arguments.forEach(function (arg) {\n                                if (arg.value.kind === 'Variable') {\n                                    variablesToRemove.push({\n                                        name: arg.value.name.value,\n                                    });\n                                }\n                            });\n                        }\n                        if (node.selectionSet) {\n                            getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                                fragmentSpreadsToRemove.push({\n                                    name: frag.name.value,\n                                });\n                            });\n                        }\n                        return null;\n                    }\n                }\n            },\n        },\n        FragmentSpread: {\n            enter: function (node) {\n                fragmentSpreadsInUse[node.name.value] = true;\n            },\n        },\n        Directive: {\n            enter: function (node) {\n                if (getDirectiveMatcher(directives)(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n    if (modifiedDoc &&\n        filterInPlace(variablesToRemove, function (v) { return !variablesInUse[v.name]; }).length) {\n        modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n    }\n    if (modifiedDoc &&\n        filterInPlace(fragmentSpreadsToRemove, function (fs) { return !fragmentSpreadsInUse[fs.name]; })\n            .length) {\n        modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n    }\n    return modifiedDoc;\n}\nfunction addTypenameToDocument(doc) {\n    return visit(checkDocument(doc), {\n        SelectionSet: {\n            enter: function (node, _key, parent) {\n                if (parent &&\n                    parent.kind === 'OperationDefinition') {\n                    return;\n                }\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                var skip = selections.some(function (selection) {\n                    return (selection.kind === 'Field' &&\n                        (selection.name.value === '__typename' ||\n                            selection.name.value.lastIndexOf('__', 0) === 0));\n                });\n                if (skip) {\n                    return;\n                }\n                return __assign({}, node, { selections: selections.concat([TYPENAME_FIELD]) });\n            },\n        },\n    });\n}\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === 'connection';\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {\n                console.warn('Removing an @connection directive even though it does not have a key. ' +\n                    'You may want to use the key parameter to specify a store key.');\n            }\n        }\n        return willRemove;\n    },\n};\nfunction removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    return (selectionSet &&\n        selectionSet.selections &&\n        selectionSet.selections.some(function (selection) {\n            return hasDirectivesInSelection(directives, selection, nestedCheck);\n        }));\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (selection.kind !== 'Field' || !selection) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return (selection.directives.some(getDirectiveMatcher(directives)) ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nfunction getDirectivesFromDocument(directives, doc) {\n    checkDocument(doc);\n    var parentPath;\n    return nullIfDocIsEmpty(visit(doc, {\n        SelectionSet: {\n            enter: function (node, _key, _parent, path) {\n                var currentPath = path.join('-');\n                if (!parentPath ||\n                    currentPath === parentPath ||\n                    !currentPath.startsWith(parentPath)) {\n                    if (node.selections) {\n                        var selectionsWithDirectives = node.selections.filter(function (selection) { return hasDirectivesInSelection(directives, selection); });\n                        if (hasDirectivesInSelectionSet(directives, node, false)) {\n                            parentPath = currentPath;\n                        }\n                        return __assign({}, node, { selections: selectionsWithDirectives });\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            },\n        },\n    }));\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function (aConfig) {\n            return argument.value &&\n                argument.value.kind === 'Variable' &&\n                argument.value.name &&\n                (aConfig.name === argument.value.name.value ||\n                    (aConfig.test && aConfig.test(argument)));\n        });\n    };\n}\nfunction removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty(visit(doc, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign({}, node, { variableDefinitions: node.variableDefinitions.filter(function (varDef) {\n                        return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });\n                    }) });\n            },\n        },\n        Field: {\n            enter: function (node) {\n                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    node.arguments.forEach(function (arg) {\n                        if (argMatcher(arg)) {\n                            argMatchCount_1 += 1;\n                        }\n                    });\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            },\n        },\n        Argument: {\n            enter: function (node) {\n                if (argMatcher(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n}\nfunction removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function (def) { return def.name === node.name.value; })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty(visit(doc, {\n        FragmentSpread: { enter: enter },\n        FragmentDefinition: { enter: enter },\n    }));\n}\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n    var allFragments = [];\n    selectionSet.selections.forEach(function (selection) {\n        if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') &&\n            selection.selectionSet) {\n            getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) { return allFragments.push(frag); });\n        }\n        else if (selection.kind === 'FragmentSpread') {\n            allFragments.push(selection);\n        }\n    });\n    return allFragments;\n}\nfunction buildQueryFromSelectionSet(document) {\n    var definition = getMainDefinition(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === 'query') {\n        return document;\n    }\n    var modifiedDoc = visit(document, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign({}, node, { operation: 'query' });\n            },\n        },\n    });\n    return modifiedDoc;\n}\nfunction removeClientSetsFromDocument(document) {\n    checkDocument(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function (directive) { return directive.name.value === 'client'; },\n            remove: true,\n        },\n    ], document);\n    if (modifiedDoc) {\n        modifiedDoc = visit(modifiedDoc, {\n            FragmentDefinition: {\n                enter: function (node) {\n                    if (node.selectionSet) {\n                        var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n                            return (selection.kind === 'Field' &&\n                                selection.name.value === '__typename');\n                        });\n                        if (isTypenameOnly) {\n                            return null;\n                        }\n                    }\n                },\n            },\n        });\n    }\n    return modifiedDoc;\n}\n\nvar toString = Object.prototype.toString;\nfunction cloneDeep(value) {\n    return cloneDeepHelper(value, new Map());\n}\nfunction cloneDeepHelper(val, seen) {\n    switch (toString.call(val)) {\n        case \"[object Array]\": {\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_1 = val.slice(0);\n            seen.set(val, copy_1);\n            copy_1.forEach(function (child, i) {\n                copy_1[i] = cloneDeepHelper(child, seen);\n            });\n            return copy_1;\n        }\n        case \"[object Object]\": {\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_2 = Object.create(Object.getPrototypeOf(val));\n            seen.set(val, copy_2);\n            Object.keys(val).forEach(function (key) {\n                copy_2[key] = cloneDeepHelper(val[key], seen);\n            });\n            return copy_2;\n        }\n        default:\n            return val;\n    }\n}\n\nfunction getEnv() {\n    if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n        return process.env.NODE_ENV;\n    }\n    return 'development';\n}\nfunction isEnv(env) {\n    return getEnv() === env;\n}\nfunction isProduction() {\n    return isEnv('production') === true;\n}\nfunction isDevelopment() {\n    return isEnv('development') === true;\n}\nfunction isTest() {\n    return isEnv('test') === true;\n}\n\nfunction tryFunctionOrLogError(f) {\n    try {\n        return f();\n    }\n    catch (e) {\n        if (console.error) {\n            console.error(e);\n        }\n    }\n}\nfunction graphQLResultHasError(result) {\n    return result.errors && result.errors.length;\n}\n\nfunction isEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime();\n    }\n    if (a != null &&\n        typeof a === 'object' &&\n        b != null &&\n        typeof b === 'object') {\n        for (var key in a) {\n            if (Object.prototype.hasOwnProperty.call(a, key)) {\n                if (!Object.prototype.hasOwnProperty.call(b, key)) {\n                    return false;\n                }\n                if (!isEqual(a[key], b[key])) {\n                    return false;\n                }\n            }\n        }\n        for (var key in b) {\n            if (Object.prototype.hasOwnProperty.call(b, key) &&\n                !Object.prototype.hasOwnProperty.call(a, key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction deepFreeze(o) {\n    Object.freeze(o);\n    Object.getOwnPropertyNames(o).forEach(function (prop) {\n        if (o[prop] !== null &&\n            (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n            !Object.isFrozen(o[prop])) {\n            deepFreeze(o[prop]);\n        }\n    });\n    return o;\n}\nfunction maybeDeepFreeze(obj) {\n    if (isDevelopment() || isTest()) {\n        var symbolIsPolyfilled = typeof Symbol === 'function' && typeof Symbol('') === 'string';\n        if (!symbolIsPolyfilled) {\n            return deepFreeze(obj);\n        }\n    }\n    return obj;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction mergeDeep() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\nfunction mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var pastCopies = [];\n        target = shallowCopyForMerge(target, pastCopies);\n        for (var i = 1; i < count; ++i) {\n            target = mergeHelper(target, sources[i], pastCopies);\n        }\n    }\n    return target;\n}\nfunction isObject(obj) {\n    return obj !== null && typeof obj === 'object';\n}\nfunction mergeHelper(target, source, pastCopies) {\n    if (isObject(source) && isObject(target)) {\n        if (Object.isExtensible && !Object.isExtensible(target)) {\n            target = shallowCopyForMerge(target, pastCopies);\n        }\n        Object.keys(source).forEach(function (sourceKey) {\n            var sourceValue = source[sourceKey];\n            if (hasOwnProperty.call(target, sourceKey)) {\n                var targetValue = target[sourceKey];\n                if (sourceValue !== targetValue) {\n                    target[sourceKey] = mergeHelper(shallowCopyForMerge(targetValue, pastCopies), sourceValue, pastCopies);\n                }\n            }\n            else {\n                target[sourceKey] = sourceValue;\n            }\n        });\n        return target;\n    }\n    return source;\n}\nfunction shallowCopyForMerge(value, pastCopies) {\n    if (value !== null &&\n        typeof value === 'object' &&\n        pastCopies.indexOf(value) < 0) {\n        if (Array.isArray(value)) {\n            value = value.slice(0);\n        }\n        else {\n            value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n        }\n        pastCopies.push(value);\n    }\n    return value;\n}\n\nvar haveWarned = Object.create({});\nfunction warnOnceInDevelopment(msg, type) {\n    if (type === void 0) { type = 'warn'; }\n    if (isProduction()) {\n        return;\n    }\n    if (!haveWarned[msg]) {\n        if (!isTest()) {\n            haveWarned[msg] = true;\n        }\n        switch (type) {\n            case 'error':\n                console.error(msg);\n                break;\n            default:\n                console.warn(msg);\n        }\n    }\n}\n\nfunction stripSymbols(data) {\n    return JSON.parse(JSON.stringify(data));\n}\n\nexport { getDirectiveInfoFromField, shouldInclude, getDirectiveNames, hasDirectives, hasClientExports, getFragmentQueryDocument, getMutationDefinition, checkDocument, getOperationDefinition, getOperationDefinitionOrDie, getOperationName, getFragmentDefinitions, getQueryDefinition, getFragmentDefinition, getMainDefinition, createFragmentMap, getDefaultValues, variablesInOperation, removeDirectivesFromDocument, addTypenameToDocument, removeConnectionDirectiveFromDocument, getDirectivesFromDocument, removeArgumentsFromDocument, removeFragmentSpreadFromDocument, buildQueryFromSelectionSet, removeClientSetsFromDocument, isScalarValue, isNumberValue, valueToObjectRepresentation, storeKeyNameFromField, getStoreKeyName, argumentsObjectFromField, resultKeyNameFromField, isField, isInlineFragment, isIdValue, toIdValue, isJsonValue, valueFromNode, assign, cloneDeep, getEnv, isEnv, isProduction, isDevelopment, isTest, tryFunctionOrLogError, graphQLResultHasError, isEqual, maybeDeepFreeze, mergeDeep, mergeDeepArray, warnOnceInDevelopment, stripSymbols };\n//# sourceMappingURL=bundle.esm.js.map\n"],"sourceRoot":""}