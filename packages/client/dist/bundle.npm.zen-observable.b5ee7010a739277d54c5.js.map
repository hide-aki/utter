{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/zen-observable/index.js","webpack:////var/www/html/utter/node_modules/zen-observable/lib/Observable.js"],"names":["module","exports","__webpack_require__","Observable","Object","defineProperty","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","hasSymbols","Symbol","hasSymbol","name","Boolean","getSymbol","observable","SymbolIterator","SymbolObservable","SymbolSpecies","getMethod","obj","getSpecies","ctor","constructor","undefined","isObservable","x","hostReportError","e","log","setTimeout","enqueue","fn","Promise","resolve","then","cleanupSubscription","subscription","cleanup","_cleanup","unsubscribe","call","closeSubscription","_observer","_queue","_state","notifySubscription","type","observer","m","onNotify","queue","flushSubscription","push","Subscription","subscriber","this","subscriptionObserver","SubscriptionObserver","error","get","_subscription","_subscriber","next","arguments","complete","_this","reject","subscribe","done","_this2","_this3","_this4","C","hasSeed","hasValue","acc","first","_this5","_len","sources","Array","_key","index","startNext","v","from","_this6","subscriptions","outer","inner","indexOf","splice","completeIfDone","closed","forEach","s","method","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","item","err","return","isArray","_len2","items","_key2","symbol"],"mappings":"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","file":"bundle.npm.zen-observable.b5ee7010a739277d54c5.js","sourcesContent":["module.exports = require('./lib/Observable.js').Observable;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// === Symbol Support ===\n\nvar hasSymbols = function () {\n  return typeof Symbol === 'function';\n};\nvar hasSymbol = function (name) {\n  return hasSymbols() && Boolean(Symbol[name]);\n};\nvar getSymbol = function (name) {\n  return hasSymbol(name) ? Symbol[name] : '@@' + name;\n};\n\nif (hasSymbols() && !hasSymbol('observable')) {\n  Symbol.observable = Symbol('observable');\n}\n\nvar SymbolIterator = getSymbol('iterator');\nvar SymbolObservable = getSymbol('observable');\nvar SymbolSpecies = getSymbol('species');\n\n// === Abstract Operations ===\n\nfunction getMethod(obj, key) {\n  var value = obj[key];\n\n  if (value == null) return undefined;\n\n  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');\n\n  return value;\n}\n\nfunction getSpecies(obj) {\n  var ctor = obj.constructor;\n  if (ctor !== undefined) {\n    ctor = ctor[SymbolSpecies];\n    if (ctor === null) {\n      ctor = undefined;\n    }\n  }\n  return ctor !== undefined ? ctor : Observable;\n}\n\nfunction isObservable(x) {\n  return x instanceof Observable; // SPEC: Brand check\n}\n\nfunction hostReportError(e) {\n  if (hostReportError.log) {\n    hostReportError.log(e);\n  } else {\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nfunction enqueue(fn) {\n  Promise.resolve().then(function () {\n    try {\n      fn();\n    } catch (e) {\n      hostReportError(e);\n    }\n  });\n}\n\nfunction cleanupSubscription(subscription) {\n  var cleanup = subscription._cleanup;\n  if (cleanup === undefined) return;\n\n  subscription._cleanup = undefined;\n\n  if (!cleanup) {\n    return;\n  }\n\n  try {\n    if (typeof cleanup === 'function') {\n      cleanup();\n    } else {\n      var unsubscribe = getMethod(cleanup, 'unsubscribe');\n      if (unsubscribe) {\n        unsubscribe.call(cleanup);\n      }\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n}\n\nfunction closeSubscription(subscription) {\n  subscription._observer = undefined;\n  subscription._queue = undefined;\n  subscription._state = 'closed';\n}\n\nfunction flushSubscription(subscription) {\n  var queue = subscription._queue;\n  if (!queue) {\n    return;\n  }\n  subscription._queue = undefined;\n  subscription._state = 'ready';\n  for (var i = 0; i < queue.length; ++i) {\n    notifySubscription(subscription, queue[i].type, queue[i].value);\n    if (subscription._state === 'closed') break;\n  }\n}\n\nfunction notifySubscription(subscription, type, value) {\n  subscription._state = 'running';\n\n  var observer = subscription._observer;\n\n  try {\n    var m = getMethod(observer, type);\n    switch (type) {\n      case 'next':\n        if (m) m.call(observer, value);\n        break;\n      case 'error':\n        closeSubscription(subscription);\n        if (m) m.call(observer, value);else throw value;\n        break;\n      case 'complete':\n        closeSubscription(subscription);\n        if (m) m.call(observer);\n        break;\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n\n  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';\n}\n\nfunction onNotify(subscription, type, value) {\n  if (subscription._state === 'closed') return;\n\n  if (subscription._state === 'buffering') {\n    subscription._queue.push({ type: type, value: value });\n    return;\n  }\n\n  if (subscription._state !== 'ready') {\n    subscription._state = 'buffering';\n    subscription._queue = [{ type: type, value: value }];\n    enqueue(function () {\n      return flushSubscription(subscription);\n    });\n    return;\n  }\n\n  notifySubscription(subscription, type, value);\n}\n\nvar Subscription = function () {\n  function Subscription(observer, subscriber) {\n    _classCallCheck(this, Subscription);\n\n    // ASSERT: observer is an object\n    // ASSERT: subscriber is callable\n\n    this._cleanup = undefined;\n    this._observer = observer;\n    this._queue = undefined;\n    this._state = 'initializing';\n\n    var subscriptionObserver = new SubscriptionObserver(this);\n\n    try {\n      this._cleanup = subscriber.call(undefined, subscriptionObserver);\n    } catch (e) {\n      subscriptionObserver.error(e);\n    }\n\n    if (this._state === 'initializing') this._state = 'ready';\n  }\n\n  _createClass(Subscription, [{\n    key: 'unsubscribe',\n    value: function unsubscribe() {\n      if (this._state !== 'closed') {\n        closeSubscription(this);\n        cleanupSubscription(this);\n      }\n    }\n  }, {\n    key: 'closed',\n    get: function () {\n      return this._state === 'closed';\n    }\n  }]);\n\n  return Subscription;\n}();\n\nvar SubscriptionObserver = function () {\n  function SubscriptionObserver(subscription) {\n    _classCallCheck(this, SubscriptionObserver);\n\n    this._subscription = subscription;\n  }\n\n  _createClass(SubscriptionObserver, [{\n    key: 'next',\n    value: function next(value) {\n      onNotify(this._subscription, 'next', value);\n    }\n  }, {\n    key: 'error',\n    value: function error(value) {\n      onNotify(this._subscription, 'error', value);\n    }\n  }, {\n    key: 'complete',\n    value: function complete() {\n      onNotify(this._subscription, 'complete');\n    }\n  }, {\n    key: 'closed',\n    get: function () {\n      return this._subscription._state === 'closed';\n    }\n  }]);\n\n  return SubscriptionObserver;\n}();\n\nvar Observable = exports.Observable = function () {\n  function Observable(subscriber) {\n    _classCallCheck(this, Observable);\n\n    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');\n\n    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');\n\n    this._subscriber = subscriber;\n  }\n\n  _createClass(Observable, [{\n    key: 'subscribe',\n    value: function subscribe(observer) {\n      if (typeof observer !== 'object' || observer === null) {\n        observer = {\n          next: observer,\n          error: arguments[1],\n          complete: arguments[2]\n        };\n      }\n      return new Subscription(observer, this._subscriber);\n    }\n  }, {\n    key: 'forEach',\n    value: function forEach(fn) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (typeof fn !== 'function') {\n          reject(new TypeError(fn + ' is not a function'));\n          return;\n        }\n\n        function done() {\n          subscription.unsubscribe();\n          resolve();\n        }\n\n        var subscription = _this.subscribe({\n          next: function (value) {\n            try {\n              fn(value, done);\n            } catch (e) {\n              reject(e);\n              subscription.unsubscribe();\n            }\n          },\n\n          error: reject,\n          complete: resolve\n        });\n      });\n    }\n  }, {\n    key: 'map',\n    value: function map(fn) {\n      var _this2 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n\n      var C = getSpecies(this);\n\n      return new C(function (observer) {\n        return _this2.subscribe({\n          next: function (value) {\n            try {\n              value = fn(value);\n            } catch (e) {\n              return observer.error(e);\n            }\n            observer.next(value);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: 'filter',\n    value: function filter(fn) {\n      var _this3 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n\n      var C = getSpecies(this);\n\n      return new C(function (observer) {\n        return _this3.subscribe({\n          next: function (value) {\n            try {\n              if (!fn(value)) return;\n            } catch (e) {\n              return observer.error(e);\n            }\n            observer.next(value);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: 'reduce',\n    value: function reduce(fn) {\n      var _this4 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n\n      var C = getSpecies(this);\n      var hasSeed = arguments.length > 1;\n      var hasValue = false;\n      var seed = arguments[1];\n      var acc = seed;\n\n      return new C(function (observer) {\n        return _this4.subscribe({\n          next: function (value) {\n            var first = !hasValue;\n            hasValue = true;\n\n            if (!first || hasSeed) {\n              try {\n                acc = fn(acc, value);\n              } catch (e) {\n                return observer.error(e);\n              }\n            } else {\n              acc = value;\n            }\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));\n\n            observer.next(acc);\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: 'concat',\n    value: function concat() {\n      var _this5 = this;\n\n      for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {\n        sources[_key] = arguments[_key];\n      }\n\n      var C = getSpecies(this);\n\n      return new C(function (observer) {\n        var subscription = void 0;\n        var index = 0;\n\n        function startNext(next) {\n          subscription = next.subscribe({\n            next: function (v) {\n              observer.next(v);\n            },\n            error: function (e) {\n              observer.error(e);\n            },\n            complete: function () {\n              if (index === sources.length) {\n                subscription = undefined;\n                observer.complete();\n              } else {\n                startNext(C.from(sources[index++]));\n              }\n            }\n          });\n        }\n\n        startNext(_this5);\n\n        return function () {\n          if (subscription) {\n            subscription.unsubscribe();\n            subscription = undefined;\n          }\n        };\n      });\n    }\n  }, {\n    key: 'flatMap',\n    value: function flatMap(fn) {\n      var _this6 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n\n      var C = getSpecies(this);\n\n      return new C(function (observer) {\n        var subscriptions = [];\n\n        var outer = _this6.subscribe({\n          next: function (value) {\n            if (fn) {\n              try {\n                value = fn(value);\n              } catch (e) {\n                return observer.error(e);\n              }\n            }\n\n            var inner = C.from(value).subscribe({\n              next: function (value) {\n                observer.next(value);\n              },\n              error: function (e) {\n                observer.error(e);\n              },\n              complete: function () {\n                var i = subscriptions.indexOf(inner);\n                if (i >= 0) subscriptions.splice(i, 1);\n                completeIfDone();\n              }\n            });\n\n            subscriptions.push(inner);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            completeIfDone();\n          }\n        });\n\n        function completeIfDone() {\n          if (outer.closed && subscriptions.length === 0) observer.complete();\n        }\n\n        return function () {\n          subscriptions.forEach(function (s) {\n            return s.unsubscribe();\n          });\n          outer.unsubscribe();\n        };\n      });\n    }\n  }, {\n    key: SymbolObservable,\n    value: function () {\n      return this;\n    }\n  }], [{\n    key: 'from',\n    value: function from(x) {\n      var C = typeof this === 'function' ? this : Observable;\n\n      if (x == null) throw new TypeError(x + ' is not an object');\n\n      var method = getMethod(x, SymbolObservable);\n      if (method) {\n        var observable = method.call(x);\n\n        if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');\n\n        if (isObservable(observable) && observable.constructor === C) return observable;\n\n        return new C(function (observer) {\n          return observable.subscribe(observer);\n        });\n      }\n\n      if (hasSymbol('iterator')) {\n        method = getMethod(x, SymbolIterator);\n        if (method) {\n          return new C(function (observer) {\n            enqueue(function () {\n              if (observer.closed) return;\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n\n              try {\n                for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  var item = _step.value;\n\n                  observer.next(item);\n                  if (observer.closed) return;\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n\n              observer.complete();\n            });\n          });\n        }\n      }\n\n      if (Array.isArray(x)) {\n        return new C(function (observer) {\n          enqueue(function () {\n            if (observer.closed) return;\n            for (var i = 0; i < x.length; ++i) {\n              observer.next(x[i]);\n              if (observer.closed) return;\n            }\n            observer.complete();\n          });\n        });\n      }\n\n      throw new TypeError(x + ' is not observable');\n    }\n  }, {\n    key: 'of',\n    value: function of() {\n      for (var _len2 = arguments.length, items = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        items[_key2] = arguments[_key2];\n      }\n\n      var C = typeof this === 'function' ? this : Observable;\n\n      return new C(function (observer) {\n        enqueue(function () {\n          if (observer.closed) return;\n          for (var i = 0; i < items.length; ++i) {\n            observer.next(items[i]);\n            if (observer.closed) return;\n          }\n          observer.complete();\n        });\n      });\n    }\n  }, {\n    key: SymbolSpecies,\n    get: function () {\n      return this;\n    }\n  }]);\n\n  return Observable;\n}();\n\nif (hasSymbols()) {\n  Object.defineProperty(Observable, Symbol('extensions'), {\n    value: {\n      symbol: SymbolObservable,\n      hostReportError: hostReportError\n    },\n    configurable: true\n  });\n}"],"sourceRoot":""}