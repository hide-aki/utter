{"version":3,"sources":["webpack:///../node_modules/apollo-link/lib/bundle.esm.js","webpack:////var/www/html/utter/node_modules/apollo-link/lib/bundle.esm.js"],"names":["__webpack_require__","d","__webpack_exports__","ApolloLink","zen_observable_ts__WEBPACK_IMPORTED_MODULE_0__","ts_invariant__WEBPACK_IMPORTED_MODULE_1__","tslib__WEBPACK_IMPORTED_MODULE_2__","graphql_language_printer__WEBPACK_IMPORTED_MODULE_3__","apollo_utilities__WEBPACK_IMPORTED_MODULE_4__","_super","LinkError","message","link","_this","call","this","Object","Error","isTerminating","request","length","createOperation","starting","operation","context","defineProperty","enumerable","value","next","query","JSON","stringify","variables","operationName","getKey","passthrough","op","forward","of","toLink","handler","empty","from","links","map","reduce","x","y","concat","split","test","left","right","leftLink","rightLink","first","second","firstLink","nextLink","prototype","execute","transformedOperation","extensions","transformOperation","OPERATION_FIELDS","_i","_a","keys","key","indexOf","validateOperation","fromError","errorValue","observer","error"],"mappings":"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","file":"bundle.npm.apollo-link.3c394b657b123f146c74.js","sourcesContent":["import Observable from 'zen-observable-ts';\nexport { default as Observable } from 'zen-observable-ts';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { __extends, __assign } from 'tslib';\nimport { print } from 'graphql/language/printer';\nimport { getOperationName } from 'apollo-utilities';\nexport { getOperationName } from 'apollo-utilities';\n\nfunction validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        'query',\n        'operationName',\n        'variables',\n        'extensions',\n        'context',\n    ];\n    for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"illegal argument: \" + key);\n        }\n    }\n    return operation;\n}\nvar LinkError = (function (_super) {\n    __extends(LinkError, _super);\n    function LinkError(message, link) {\n        var _this = _super.call(this, message) || this;\n        _this.link = link;\n        return _this;\n    }\n    return LinkError;\n}(Error));\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nfunction toPromise(observable) {\n    var completed = false;\n    return new Promise(function (resolve, reject) {\n        observable.subscribe({\n            next: function (data) {\n                if (completed) {\n                    process.env.NODE_ENV === \"production\" || invariant.warn(\"Promise Wrapper does not support multiple results from Observable\");\n                }\n                else {\n                    completed = true;\n                    resolve(data);\n                }\n            },\n            error: reject,\n        });\n    });\n}\nvar makePromise = toPromise;\nfunction fromPromise(promise) {\n    return new Observable(function (observer) {\n        promise\n            .then(function (value) {\n            observer.next(value);\n            observer.complete();\n        })\n            .catch(observer.error.bind(observer));\n    });\n}\nfunction fromError(errorValue) {\n    return new Observable(function (observer) {\n        observer.error(errorValue);\n    });\n}\nfunction transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query,\n    };\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName =\n            typeof transformedOperation.query !== 'string'\n                ? getOperationName(transformedOperation.query)\n                : '';\n    }\n    return transformedOperation;\n}\nfunction createOperation(starting, operation) {\n    var context = __assign({}, starting);\n    var setContext = function (next) {\n        if (typeof next === 'function') {\n            context = __assign({}, context, next(context));\n        }\n        else {\n            context = __assign({}, context, next);\n        }\n    };\n    var getContext = function () { return (__assign({}, context)); };\n    Object.defineProperty(operation, 'setContext', {\n        enumerable: false,\n        value: setContext,\n    });\n    Object.defineProperty(operation, 'getContext', {\n        enumerable: false,\n        value: getContext,\n    });\n    Object.defineProperty(operation, 'toKey', {\n        enumerable: false,\n        value: function () { return getKey(operation); },\n    });\n    return operation;\n}\nfunction getKey(operation) {\n    return print(operation.query) + \"|\" + JSON.stringify(operation.variables) + \"|\" + operation.operationName;\n}\n\nfunction passthrough(op, forward) {\n    return forward ? forward(op) : Observable.of();\n}\nfunction toLink(handler) {\n    return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\nfunction empty() {\n    return new ApolloLink(function () { return Observable.of(); });\n}\nfunction from(links) {\n    if (links.length === 0)\n        return empty();\n    return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n}\nfunction split(test, left, right) {\n    var leftLink = toLink(left);\n    var rightLink = toLink(right || new ApolloLink(passthrough));\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n        return new ApolloLink(function (operation) {\n            return test(operation)\n                ? leftLink.request(operation) || Observable.of()\n                : rightLink.request(operation) || Observable.of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return test(operation)\n                ? leftLink.request(operation, forward) || Observable.of()\n                : rightLink.request(operation, forward) || Observable.of();\n        });\n    }\n}\nvar concat = function (first, second) {\n    var firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n        return firstLink;\n    }\n    var nextLink = toLink(second);\n    if (isTerminating(nextLink)) {\n        return new ApolloLink(function (operation) {\n            return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return (firstLink.request(operation, function (op) {\n                return nextLink.request(op, forward) || Observable.of();\n            }) || Observable.of());\n        });\n    }\n};\nvar ApolloLink = (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.prototype.split = function (test, left, right) {\n        return this.concat(split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError('request is not implemented');\n    };\n    ApolloLink.empty = empty;\n    ApolloLink.from = from;\n    ApolloLink.split = split;\n    ApolloLink.execute = execute;\n    return ApolloLink;\n}());\nfunction execute(link, operation) {\n    return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());\n}\n\nexport { createOperation, makePromise, toPromise, fromPromise, fromError, empty, from, split, concat, ApolloLink, execute };\n//# sourceMappingURL=bundle.esm.js.map\n","import Observable from 'zen-observable-ts';\nexport { default as Observable } from 'zen-observable-ts';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { __extends, __assign } from 'tslib';\nimport { print } from 'graphql/language/printer';\nimport { getOperationName } from 'apollo-utilities';\nexport { getOperationName } from 'apollo-utilities';\n\nfunction validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        'query',\n        'operationName',\n        'variables',\n        'extensions',\n        'context',\n    ];\n    for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"illegal argument: \" + key);\n        }\n    }\n    return operation;\n}\nvar LinkError = (function (_super) {\n    __extends(LinkError, _super);\n    function LinkError(message, link) {\n        var _this = _super.call(this, message) || this;\n        _this.link = link;\n        return _this;\n    }\n    return LinkError;\n}(Error));\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nfunction toPromise(observable) {\n    var completed = false;\n    return new Promise(function (resolve, reject) {\n        observable.subscribe({\n            next: function (data) {\n                if (completed) {\n                    process.env.NODE_ENV === \"production\" || invariant.warn(\"Promise Wrapper does not support multiple results from Observable\");\n                }\n                else {\n                    completed = true;\n                    resolve(data);\n                }\n            },\n            error: reject,\n        });\n    });\n}\nvar makePromise = toPromise;\nfunction fromPromise(promise) {\n    return new Observable(function (observer) {\n        promise\n            .then(function (value) {\n            observer.next(value);\n            observer.complete();\n        })\n            .catch(observer.error.bind(observer));\n    });\n}\nfunction fromError(errorValue) {\n    return new Observable(function (observer) {\n        observer.error(errorValue);\n    });\n}\nfunction transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query,\n    };\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName =\n            typeof transformedOperation.query !== 'string'\n                ? getOperationName(transformedOperation.query)\n                : '';\n    }\n    return transformedOperation;\n}\nfunction createOperation(starting, operation) {\n    var context = __assign({}, starting);\n    var setContext = function (next) {\n        if (typeof next === 'function') {\n            context = __assign({}, context, next(context));\n        }\n        else {\n            context = __assign({}, context, next);\n        }\n    };\n    var getContext = function () { return (__assign({}, context)); };\n    Object.defineProperty(operation, 'setContext', {\n        enumerable: false,\n        value: setContext,\n    });\n    Object.defineProperty(operation, 'getContext', {\n        enumerable: false,\n        value: getContext,\n    });\n    Object.defineProperty(operation, 'toKey', {\n        enumerable: false,\n        value: function () { return getKey(operation); },\n    });\n    return operation;\n}\nfunction getKey(operation) {\n    return print(operation.query) + \"|\" + JSON.stringify(operation.variables) + \"|\" + operation.operationName;\n}\n\nfunction passthrough(op, forward) {\n    return forward ? forward(op) : Observable.of();\n}\nfunction toLink(handler) {\n    return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\nfunction empty() {\n    return new ApolloLink(function () { return Observable.of(); });\n}\nfunction from(links) {\n    if (links.length === 0)\n        return empty();\n    return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n}\nfunction split(test, left, right) {\n    var leftLink = toLink(left);\n    var rightLink = toLink(right || new ApolloLink(passthrough));\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n        return new ApolloLink(function (operation) {\n            return test(operation)\n                ? leftLink.request(operation) || Observable.of()\n                : rightLink.request(operation) || Observable.of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return test(operation)\n                ? leftLink.request(operation, forward) || Observable.of()\n                : rightLink.request(operation, forward) || Observable.of();\n        });\n    }\n}\nvar concat = function (first, second) {\n    var firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n        return firstLink;\n    }\n    var nextLink = toLink(second);\n    if (isTerminating(nextLink)) {\n        return new ApolloLink(function (operation) {\n            return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return (firstLink.request(operation, function (op) {\n                return nextLink.request(op, forward) || Observable.of();\n            }) || Observable.of());\n        });\n    }\n};\nvar ApolloLink = (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.prototype.split = function (test, left, right) {\n        return this.concat(split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError('request is not implemented');\n    };\n    ApolloLink.empty = empty;\n    ApolloLink.from = from;\n    ApolloLink.split = split;\n    ApolloLink.execute = execute;\n    return ApolloLink;\n}());\nfunction execute(link, operation) {\n    return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());\n}\n\nexport { createOperation, makePromise, toPromise, fromPromise, fromError, empty, from, split, concat, ApolloLink, execute };\n//# sourceMappingURL=bundle.esm.js.map\n"],"sourceRoot":""}