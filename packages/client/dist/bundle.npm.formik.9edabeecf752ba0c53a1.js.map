{"version":3,"sources":["webpack:////var/www/html/utter/node_modules/formik/dist/formik.esm.js"],"names":["__webpack_require__","d","__webpack_exports__","Field","withFormik","_a","tslib__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","react_fast_compare__WEBPACK_IMPORTED_MODULE_2__","react_fast_compare__WEBPACK_IMPORTED_MODULE_2___default","n","deepmerge__WEBPACK_IMPORTED_MODULE_3__","hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_4__","hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_4___default","create_react_context__WEBPACK_IMPORTED_MODULE_5__","create_react_context__WEBPACK_IMPORTED_MODULE_5___default","lodash_es_cloneDeep__WEBPACK_IMPORTED_MODULE_6__","lodash_es_toPath__WEBPACK_IMPORTED_MODULE_7__","FormikProvider","Provider","FormikConsumer","Consumer","connect","Comp","C","props","Object","formik","componentDisplayName","displayName","name","constructor","WrappedComponent","getIn","obj","key","def","p","path","length","undefined","setIn","value","res","resVal","i","pathArray","currentPath","currentObj","slice","nextPath","isInteger","Number","result","setNestedObjectValues","object","visited","response","WeakMap","_i","keys","k","val","isObject","get","set","Array","isArray","isFunction","String","Math","floor","isString","prototype","toString","call","isNaN","isEmptyChildren","children","count","isPromise","then","Formik","_super","_this","this","hcCache","hbCache","registerField","fields","unregisterField","setErrors","errors","setState","setTouched","touched","validateOnBlur","runValidations","state","values","setValues","validateOnChange","setStatus","status","setError","error","setSubmitting","isSubmitting","didMount","validateField","field","isValidating","runSingleFieldLevelValidation","Promise","resolve","validate","x","e","runValidationSchema","validationSchema","schema","sync","context","validateData","hasOwnProperty","abortEarly","validateYupSchema","err","yupError","inner","message","yupToFormErrors","validator","promise","hasCanceled","reject","isCanceled","makeCancelable","all","runFieldLevelValidations","runValidateHandler","fieldErrors","schemaErrors","handlerErrors","arrayMerge","cancel","prevState","catch","handleChange","eventOrPath","executeChange","eventOrTextValue","maybePath","parsed","persist","target","type","name_1","id","checked","outerHTML","test","parseFloat","event","setFieldValue","shouldValidate","handleSubmit","preventDefault","submitForm","submitCount","combinedErrors","executeSubmit","onSubmit","getFormikActions","handleBlur","eventOrString","executeBlur","setFieldTouched","setFieldError","resetForm","nextValues","initialValues","initialStatus","handleReset","onReset","maybePromisedOnReset","setFormikState","s","callback","validateForm","getFormikComputedProps","isInitialValid","dirty","isValid","getFormikBag","getFormikContext","componentDidMount","componentWillUnmount","componentDidUpdate","prevProps","enableReinitialize","fieldKeysWithValidation","filter","f","fieldValidations","map","fieldErrorsList","reduce","prev","curr","index","maybePromisedErrors","render","component","ctx","only","defaultProps","source","options","destination","forEach","shouldClone","clone","isMergeableObject","indexOf","push","FieldInner","_b","restOfFormik","onChange","onBlur","bag","form","innerRef","rest","ref","mapPropsToValues","vanillaProps","config","Component$$1","apply","arguments","actions","renderFormComponent","formikProps","mapPropsToStatus","move","array","from","to","copy","splice","swap","indexA","indexB","a","insert","replace"],"mappings":"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","file":"bundle.npm.formik.9edabeecf752ba0c53a1.js","sourcesContent":["import { __assign, __extends, __rest } from 'tslib';\nimport { createElement, Children, Component } from 'react';\nimport isEqual from 'react-fast-compare';\nimport deepmerge from 'deepmerge';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport createContext from 'create-react-context';\nimport warning from 'tiny-warning';\nimport cloneDeep from 'lodash-es/cloneDeep';\nimport toPath from 'lodash-es/toPath';\n\nvar _a;\nvar FormikProvider = (_a =\n/*#__PURE__*/\ncreateContext({}), _a.Provider),\n    FormikConsumer = _a.Consumer;\nfunction connect(Comp) {\n  var C = function (props) {\n    return createElement(FormikConsumer, null, function (formik) {\n      return createElement(Comp, __assign({}, props, {\n        formik: formik\n      }));\n    });\n  };\n\n  var componentDisplayName = Comp.displayName || Comp.name || Comp.constructor && Comp.constructor.name || 'Component';\n  C.WrappedComponent = Comp;\n  C.displayName = \"FormikConnect(\" + componentDisplayName + \")\";\n  return hoistNonReactStatics(C, Comp);\n}\n\nfunction getIn(obj, key, def, p) {\n  if (p === void 0) {\n    p = 0;\n  }\n\n  var path = toPath(key);\n\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n\n  return obj === undefined ? def : obj;\n}\nfunction setIn(obj, path, value) {\n  var res = {};\n  var resVal = res;\n  var i = 0;\n  var pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    var currentPath = pathArray[i];\n    var currentObj = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (resVal[currentPath]) {\n      resVal = resVal[currentPath];\n    } else if (currentObj) {\n      resVal = resVal[currentPath] = cloneDeep(currentObj);\n    } else {\n      var nextPath = pathArray[i + 1];\n      resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  var result = __assign({}, obj, res);\n\n  if (i === 0 && value === undefined) {\n    delete result[pathArray[i]];\n  }\n\n  return result;\n}\nfunction setNestedObjectValues(object, value, visited, response) {\n  if (visited === void 0) {\n    visited = new WeakMap();\n  }\n\n  if (response === void 0) {\n    response = {};\n  }\n\n  for (var _i = 0, _a = Object.keys(object); _i < _a.length; _i++) {\n    var k = _a[_i];\n    var val = object[k];\n\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\nvar isFunction = function (obj) {\n  return typeof obj === 'function';\n};\nvar isObject = function (obj) {\n  return obj !== null && typeof obj === 'object';\n};\nvar isInteger = function (obj) {\n  return String(Math.floor(Number(obj))) === obj;\n};\nvar isString = function (obj) {\n  return Object.prototype.toString.call(obj) === '[object String]';\n};\nvar isNaN = function (obj) {\n  return obj !== obj;\n};\nvar isEmptyChildren = function (children) {\n  return Children.count(children) === 0;\n};\nvar isPromise = function (value) {\n  return isObject(value) && isFunction(value.then);\n};\nfunction getActiveElement(doc) {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\nfunction makeCancelable(promise) {\n  var hasCanceled = false;\n  var wrappedPromise = new Promise(function (resolve, reject) {\n    promise.then(function (val) {\n      return hasCanceled ? reject({\n        isCanceled: true\n      }) : resolve(val);\n    }, function (error) {\n      return hasCanceled ? reject({\n        isCanceled: true\n      }) : reject(error);\n    });\n  });\n  return [wrappedPromise, function cancel() {\n    hasCanceled = true;\n  }];\n}\n\nvar Formik =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(Formik, _super);\n\n  function Formik(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.hcCache = {};\n    _this.hbCache = {};\n\n    _this.registerField = function (name, Comp) {\n      _this.fields[name] = Comp;\n    };\n\n    _this.unregisterField = function (name) {\n      delete _this.fields[name];\n    };\n\n    _this.setErrors = function (errors) {\n      _this.setState({\n        errors: errors\n      });\n    };\n\n    _this.setTouched = function (touched) {\n      _this.setState({\n        touched: touched\n      }, function () {\n        if (_this.props.validateOnBlur) {\n          _this.runValidations(_this.state.values);\n        }\n      });\n    };\n\n    _this.setValues = function (values) {\n      _this.setState({\n        values: values\n      }, function () {\n        if (_this.props.validateOnChange) {\n          _this.runValidations(values);\n        }\n      });\n    };\n\n    _this.setStatus = function (status) {\n      _this.setState({\n        status: status\n      });\n    };\n\n    _this.setError = function (error) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\"Warning: Formik's setError(error) is deprecated and may be removed in future releases. Please use Formik's setStatus(status) instead. It works identically. For more info see https://github.com/jaredpalmer/formik#setstatus-status-any--void\");\n      }\n\n      _this.setState({\n        error: error\n      });\n    };\n\n    _this.setSubmitting = function (isSubmitting) {\n      if (_this.didMount) {\n        _this.setState({\n          isSubmitting: isSubmitting\n        });\n      }\n    };\n\n    _this.validateField = function (field) {\n      _this.setState({\n        isValidating: true\n      });\n\n      return _this.runSingleFieldLevelValidation(field, getIn(_this.state.values, field)).then(function (error) {\n        if (_this.didMount) {\n          _this.setState({\n            errors: setIn(_this.state.errors, field, error),\n            isValidating: false\n          });\n        }\n\n        return error;\n      });\n    };\n\n    _this.runSingleFieldLevelValidation = function (field, value) {\n      return new Promise(function (resolve) {\n        return resolve(_this.fields[field].props.validate(value));\n      }).then(function (x) {\n        return x;\n      }, function (e) {\n        return e;\n      });\n    };\n\n    _this.runValidationSchema = function (values) {\n      return new Promise(function (resolve) {\n        var validationSchema = _this.props.validationSchema;\n        var schema = isFunction(validationSchema) ? validationSchema() : validationSchema;\n        validateYupSchema(values, schema).then(function () {\n          resolve({});\n        }, function (err) {\n          resolve(yupToFormErrors(err));\n        });\n      });\n    };\n\n    _this.runValidations = function (values) {\n      if (values === void 0) {\n        values = _this.state.values;\n      }\n\n      if (_this.validator) {\n        _this.validator();\n      }\n\n      var _a = makeCancelable(Promise.all([_this.runFieldLevelValidations(values), _this.props.validationSchema ? _this.runValidationSchema(values) : {}, _this.props.validate ? _this.runValidateHandler(values) : {}]).then(function (_a) {\n        var fieldErrors = _a[0],\n            schemaErrors = _a[1],\n            handlerErrors = _a[2];\n        return deepmerge.all([fieldErrors, schemaErrors, handlerErrors], {\n          arrayMerge: arrayMerge\n        });\n      })),\n          promise = _a[0],\n          cancel = _a[1];\n\n      _this.validator = cancel;\n      return promise.then(function (errors) {\n        if (_this.didMount) {\n          _this.setState(function (prevState) {\n            if (!isEqual(prevState.errors, errors)) {\n              return {\n                errors: errors\n              };\n            }\n\n            return null;\n          });\n        }\n\n        return errors;\n      }).catch(function (x) {\n        return x;\n      });\n    };\n\n    _this.handleChange = function (eventOrPath) {\n      var executeChange = function (eventOrTextValue, maybePath) {\n        var field = maybePath;\n        var val = eventOrTextValue;\n        var parsed;\n\n        if (!isString(eventOrTextValue)) {\n          if (eventOrTextValue.persist) {\n            eventOrTextValue.persist();\n          }\n\n          var _a = eventOrTextValue.target,\n              type = _a.type,\n              name_1 = _a.name,\n              id = _a.id,\n              value = _a.value,\n              checked = _a.checked,\n              outerHTML = _a.outerHTML;\n          field = maybePath ? maybePath : name_1 ? name_1 : id;\n\n          if (!field && process.env.NODE_ENV !== 'production') {\n            warnAboutMissingIdentifier({\n              htmlContent: outerHTML,\n              documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n              handlerName: 'handleChange'\n            });\n          }\n\n          val = /number|range/.test(type) ? (parsed = parseFloat(value), isNaN(parsed) ? '' : parsed) : /checkbox/.test(type) ? checked : value;\n        }\n\n        if (field) {\n          _this.setState(function (prevState) {\n            return __assign({}, prevState, {\n              values: setIn(prevState.values, field, val)\n            });\n          }, function () {\n            if (_this.props.validateOnChange) {\n              _this.runValidations(setIn(_this.state.values, field, val));\n            }\n          });\n        }\n      };\n\n      if (isString(eventOrPath)) {\n        return isFunction(_this.hcCache[eventOrPath]) ? _this.hcCache[eventOrPath] : _this.hcCache[eventOrPath] = function (event) {\n          return executeChange(event, eventOrPath);\n        };\n      } else {\n        executeChange(eventOrPath);\n      }\n    };\n\n    _this.setFieldValue = function (field, value, shouldValidate) {\n      if (shouldValidate === void 0) {\n        shouldValidate = true;\n      }\n\n      if (_this.didMount) {\n        _this.setState(function (prevState) {\n          return __assign({}, prevState, {\n            values: setIn(prevState.values, field, value)\n          });\n        }, function () {\n          if (_this.props.validateOnChange && shouldValidate) {\n            _this.runValidations(_this.state.values);\n          }\n        });\n      }\n    };\n\n    _this.handleSubmit = function (e) {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n      }\n\n      if (process.env.NODE_ENV !== 'production' && typeof document !== 'undefined') {\n        var activeElement = getActiveElement();\n\n        if (activeElement !== null && activeElement instanceof HTMLButtonElement) {\n          process.env.NODE_ENV !== \"production\" ? warning(!!(activeElement.attributes && activeElement.attributes.getNamedItem('type')), 'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.') : void 0;\n        }\n      }\n\n      _this.submitForm();\n    };\n\n    _this.submitForm = function () {\n      _this.setState(function (prevState) {\n        return {\n          touched: setNestedObjectValues(prevState.values, true),\n          isSubmitting: true,\n          isValidating: true,\n          submitCount: prevState.submitCount + 1\n        };\n      });\n\n      return _this.runValidations(_this.state.values).then(function (combinedErrors) {\n        if (_this.didMount) {\n          _this.setState({\n            isValidating: false\n          });\n        }\n\n        var isValid = Object.keys(combinedErrors).length === 0;\n\n        if (isValid) {\n          _this.executeSubmit();\n        } else if (_this.didMount) {\n          _this.setState({\n            isSubmitting: false\n          });\n        }\n      });\n    };\n\n    _this.executeSubmit = function () {\n      _this.props.onSubmit(_this.state.values, _this.getFormikActions());\n    };\n\n    _this.handleBlur = function (eventOrString) {\n      var executeBlur = function (e, path) {\n        if (e.persist) {\n          e.persist();\n        }\n\n        var _a = e.target,\n            name = _a.name,\n            id = _a.id,\n            outerHTML = _a.outerHTML;\n        var field = path ? path : name ? name : id;\n\n        if (!field && process.env.NODE_ENV !== 'production') {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handleblur-e-any--void',\n            handlerName: 'handleBlur'\n          });\n        }\n\n        _this.setState(function (prevState) {\n          return {\n            touched: setIn(prevState.touched, field, true)\n          };\n        });\n\n        if (_this.props.validateOnBlur) {\n          _this.runValidations(_this.state.values);\n        }\n      };\n\n      if (isString(eventOrString)) {\n        return isFunction(_this.hbCache[eventOrString]) ? _this.hbCache[eventOrString] : _this.hbCache[eventOrString] = function (event) {\n          return executeBlur(event, eventOrString);\n        };\n      } else {\n        executeBlur(eventOrString);\n      }\n    };\n\n    _this.setFieldTouched = function (field, touched, shouldValidate) {\n      if (touched === void 0) {\n        touched = true;\n      }\n\n      if (shouldValidate === void 0) {\n        shouldValidate = true;\n      }\n\n      _this.setState(function (prevState) {\n        return __assign({}, prevState, {\n          touched: setIn(prevState.touched, field, touched)\n        });\n      }, function () {\n        if (_this.props.validateOnBlur && shouldValidate) {\n          _this.runValidations(_this.state.values);\n        }\n      });\n    };\n\n    _this.setFieldError = function (field, message) {\n      _this.setState(function (prevState) {\n        return __assign({}, prevState, {\n          errors: setIn(prevState.errors, field, message)\n        });\n      });\n    };\n\n    _this.resetForm = function (nextValues) {\n      var values = nextValues ? nextValues : _this.props.initialValues;\n      _this.initialValues = values;\n\n      _this.setState({\n        isSubmitting: false,\n        isValidating: false,\n        errors: {},\n        touched: {},\n        error: undefined,\n        status: _this.props.initialStatus,\n        values: values,\n        submitCount: 0\n      });\n    };\n\n    _this.handleReset = function () {\n      if (_this.props.onReset) {\n        var maybePromisedOnReset = _this.props.onReset(_this.state.values, _this.getFormikActions());\n\n        if (isPromise(maybePromisedOnReset)) {\n          maybePromisedOnReset.then(_this.resetForm);\n        } else {\n          _this.resetForm();\n        }\n      } else {\n        _this.resetForm();\n      }\n    };\n\n    _this.setFormikState = function (s, callback) {\n      return _this.setState(s, callback);\n    };\n\n    _this.validateForm = function (values) {\n      _this.setState({\n        isValidating: true\n      });\n\n      return _this.runValidations(values).then(function (errors) {\n        if (_this.didMount) {\n          _this.setState({\n            isValidating: false\n          });\n        }\n\n        return errors;\n      });\n    };\n\n    _this.getFormikActions = function () {\n      return {\n        resetForm: _this.resetForm,\n        submitForm: _this.submitForm,\n        validateForm: _this.validateForm,\n        validateField: _this.validateField,\n        setError: _this.setError,\n        setErrors: _this.setErrors,\n        setFieldError: _this.setFieldError,\n        setFieldTouched: _this.setFieldTouched,\n        setFieldValue: _this.setFieldValue,\n        setStatus: _this.setStatus,\n        setSubmitting: _this.setSubmitting,\n        setTouched: _this.setTouched,\n        setValues: _this.setValues,\n        setFormikState: _this.setFormikState\n      };\n    };\n\n    _this.getFormikComputedProps = function () {\n      var isInitialValid = _this.props.isInitialValid;\n      var dirty = !isEqual(_this.initialValues, _this.state.values);\n      return {\n        dirty: dirty,\n        isValid: dirty ? _this.state.errors && Object.keys(_this.state.errors).length === 0 : isInitialValid !== false && isFunction(isInitialValid) ? isInitialValid(_this.props) : isInitialValid,\n        initialValues: _this.initialValues\n      };\n    };\n\n    _this.getFormikBag = function () {\n      return __assign({}, _this.state, _this.getFormikActions(), _this.getFormikComputedProps(), {\n        registerField: _this.registerField,\n        unregisterField: _this.unregisterField,\n        handleBlur: _this.handleBlur,\n        handleChange: _this.handleChange,\n        handleReset: _this.handleReset,\n        handleSubmit: _this.handleSubmit,\n        validateOnChange: _this.props.validateOnChange,\n        validateOnBlur: _this.props.validateOnBlur\n      });\n    };\n\n    _this.getFormikContext = function () {\n      return __assign({}, _this.getFormikBag(), {\n        validationSchema: _this.props.validationSchema,\n        validate: _this.props.validate,\n        initialValues: _this.initialValues\n      });\n    };\n\n    _this.state = {\n      values: props.initialValues || {},\n      errors: {},\n      touched: {},\n      isSubmitting: false,\n      isValidating: false,\n      submitCount: 0,\n      status: props.initialStatus\n    };\n    _this.didMount = false;\n    _this.fields = {};\n    _this.initialValues = props.initialValues || {};\n    process.env.NODE_ENV !== \"production\" ? warning(!(props.component && props.render), 'You should not use <Formik component> and <Formik render> in the same <Formik> component; <Formik render> will be ignored') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!(props.component && props.children && !isEmptyChildren(props.children)), 'You should not use <Formik component> and <Formik children> in the same <Formik> component; <Formik children> will be ignored') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!(props.render && props.children && !isEmptyChildren(props.children)), 'You should not use <Formik render> and <Formik children> in the same <Formik> component; <Formik children> will be ignored') : void 0;\n    return _this;\n  }\n\n  Formik.prototype.componentDidMount = function () {\n    this.didMount = true;\n  };\n\n  Formik.prototype.componentWillUnmount = function () {\n    this.didMount = false;\n\n    if (this.validator) {\n      this.validator();\n    }\n  };\n\n  Formik.prototype.componentDidUpdate = function (prevProps) {\n    if (this.props.enableReinitialize && !isEqual(prevProps.initialValues, this.props.initialValues)) {\n      this.initialValues = this.props.initialValues;\n      this.resetForm(this.props.initialValues);\n    }\n  };\n\n  Formik.prototype.runFieldLevelValidations = function (values) {\n    var _this = this;\n\n    var fieldKeysWithValidation = Object.keys(this.fields).filter(function (f) {\n      return _this.fields && _this.fields[f] && _this.fields[f].props.validate && isFunction(_this.fields[f].props.validate);\n    });\n    var fieldValidations = fieldKeysWithValidation.length > 0 ? fieldKeysWithValidation.map(function (f) {\n      return _this.runSingleFieldLevelValidation(f, getIn(values, f));\n    }) : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')];\n    return Promise.all(fieldValidations).then(function (fieldErrorsList) {\n      return fieldErrorsList.reduce(function (prev, curr, index) {\n        if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n          return prev;\n        }\n\n        if (!!curr) {\n          prev = setIn(prev, fieldKeysWithValidation[index], curr);\n        }\n\n        return prev;\n      }, {});\n    });\n  };\n\n  Formik.prototype.runValidateHandler = function (values) {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      var maybePromisedErrors = _this.props.validate(values);\n\n      if (maybePromisedErrors === undefined) {\n        resolve({});\n      } else if (isPromise(maybePromisedErrors)) {\n        maybePromisedErrors.then(function () {\n          resolve({});\n        }, function (errors) {\n          resolve(errors);\n        });\n      } else {\n        resolve(maybePromisedErrors);\n      }\n    });\n  };\n\n  Formik.prototype.render = function () {\n    var _a = this.props,\n        component = _a.component,\n        render = _a.render,\n        children = _a.children;\n    var props = this.getFormikBag();\n    var ctx = this.getFormikContext();\n    return createElement(FormikProvider, {\n      value: ctx\n    }, component ? createElement(component, props) : render ? render(props) : children ? isFunction(children) ? children(props) : !isEmptyChildren(children) ? Children.only(children) : null : null);\n  };\n\n  Formik.defaultProps = {\n    validateOnChange: true,\n    validateOnBlur: true,\n    isInitialValid: false,\n    enableReinitialize: false\n  };\n  return Formik;\n}(Component);\n\nfunction warnAboutMissingIdentifier(_a) {\n  var htmlContent = _a.htmlContent,\n      documentationAnchorLink = _a.documentationAnchorLink,\n      handlerName = _a.handlerName;\n  console.warn(\"Warning: Formik called `\" + handlerName + \"`, but you forgot to pass an `id` or `name` attribute to your input:\\n\\n    \" + htmlContent + \"\\n\\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#\" + documentationAnchorLink + \"\\n  \");\n}\n\nfunction yupToFormErrors(yupError) {\n  var errors = {};\n\n  if (yupError.inner.length === 0) {\n    return setIn(errors, yupError.path, yupError.message);\n  }\n\n  for (var _i = 0, _a = yupError.inner; _i < _a.length; _i++) {\n    var err = _a[_i];\n\n    if (!errors[err.path]) {\n      errors = setIn(errors, err.path, err.message);\n    }\n  }\n\n  return errors;\n}\nfunction validateYupSchema(values, schema, sync, context) {\n  if (sync === void 0) {\n    sync = false;\n  }\n\n  if (context === void 0) {\n    context = {};\n  }\n\n  var validateData = {};\n\n  for (var k in values) {\n    if (values.hasOwnProperty(k)) {\n      var key = String(k);\n      validateData[key] = values[key] !== '' ? values[key] : undefined;\n    }\n  }\n\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\n    abortEarly: false,\n    context: context\n  });\n}\n\nfunction arrayMerge(target, source, options) {\n  var destination = target.slice();\n  source.forEach(function (e, i) {\n    if (typeof destination[i] === 'undefined') {\n      var cloneRequested = options.clone !== false;\n      var shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone ? deepmerge(Array.isArray(e) ? [] : {}, e, options) : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n\nvar FieldInner =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(FieldInner, _super);\n\n  function FieldInner(props) {\n    var _this = _super.call(this, props) || this;\n\n    var render = props.render,\n        children = props.children,\n        component = props.component;\n    process.env.NODE_ENV !== \"production\" ? warning(!(component && render), 'You should not use <Field component> and <Field render> in the same <Field> component; <Field component> will be ignored') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!(component && children && isFunction(children)), 'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!(render && children && !isEmptyChildren(children)), 'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored') : void 0;\n    return _this;\n  }\n\n  FieldInner.prototype.componentDidMount = function () {\n    this.props.formik.registerField(this.props.name, this);\n  };\n\n  FieldInner.prototype.componentDidUpdate = function (prevProps) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, this);\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, this);\n    }\n  };\n\n  FieldInner.prototype.componentWillUnmount = function () {\n    this.props.formik.unregisterField(this.props.name);\n  };\n\n  FieldInner.prototype.render = function () {\n    var _a = this.props,\n        validate = _a.validate,\n        name = _a.name,\n        render = _a.render,\n        children = _a.children,\n        _b = _a.component,\n        component = _b === void 0 ? 'input' : _b,\n        formik = _a.formik,\n        props = __rest(_a, [\"validate\", \"name\", \"render\", \"children\", \"component\", \"formik\"]);\n\n    var _validate = formik.validate,\n        _validationSchema = formik.validationSchema,\n        restOfFormik = __rest(formik, [\"validate\", \"validationSchema\"]);\n\n    var field = {\n      value: props.type === 'radio' || props.type === 'checkbox' ? props.value : getIn(formik.values, name),\n      name: name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur\n    };\n    var bag = {\n      field: field,\n      form: restOfFormik\n    };\n\n    if (render) {\n      return render(bag);\n    }\n\n    if (isFunction(children)) {\n      return children(bag);\n    }\n\n    if (typeof component === 'string') {\n      var innerRef = props.innerRef,\n          rest = __rest(props, [\"innerRef\"]);\n\n      return createElement(component, __assign({\n        ref: innerRef\n      }, field, rest, {\n        children: children\n      }));\n    }\n\n    return createElement(component, __assign({}, bag, props, {\n      children: children\n    }));\n  };\n\n  return FieldInner;\n}(Component);\n\nvar Field =\n/*#__PURE__*/\nconnect(FieldInner);\n\nvar Form =\n/*#__PURE__*/\nconnect(function (_a) {\n  var _b = _a.formik,\n      handleReset = _b.handleReset,\n      handleSubmit = _b.handleSubmit,\n      props = __rest(_a, [\"formik\"]);\n\n  return createElement(\"form\", __assign({\n    onReset: handleReset,\n    onSubmit: handleSubmit\n  }, props));\n});\nForm.displayName = 'Form';\n\nfunction withFormik(_a) {\n  var _b = _a.mapPropsToValues,\n      mapPropsToValues = _b === void 0 ? function (vanillaProps) {\n    var val = {};\n\n    for (var k in vanillaProps) {\n      if (vanillaProps.hasOwnProperty(k) && typeof vanillaProps[k] !== 'function') {\n        val[k] = vanillaProps[k];\n      }\n    }\n\n    return val;\n  } : _b,\n      config = __rest(_a, [\"mapPropsToValues\"]);\n\n  return function createFormik(Component$$1) {\n    var componentDisplayName = Component$$1.displayName || Component$$1.name || Component$$1.constructor && Component$$1.constructor.name || 'Component';\n\n    var C = function (_super) {\n      __extends(C, _super);\n\n      function C() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n\n        _this.validate = function (values) {\n          return config.validate(values, _this.props);\n        };\n\n        _this.validationSchema = function () {\n          return isFunction(config.validationSchema) ? config.validationSchema(_this.props) : config.validationSchema;\n        };\n\n        _this.handleSubmit = function (values, actions) {\n          return config.handleSubmit(values, __assign({}, actions, {\n            props: _this.props\n          }));\n        };\n\n        _this.renderFormComponent = function (formikProps) {\n          return createElement(Component$$1, __assign({}, _this.props, formikProps));\n        };\n\n        return _this;\n      }\n\n      C.prototype.render = function () {\n        var _a = this.props,\n            children = _a.children,\n            props = __rest(_a, [\"children\"]);\n\n        return createElement(Formik, __assign({}, props, config, {\n          validate: config.validate && this.validate,\n          validationSchema: config.validationSchema && this.validationSchema,\n          initialValues: mapPropsToValues(this.props),\n          initialStatus: config.mapPropsToStatus && config.mapPropsToStatus(this.props),\n          onSubmit: this.handleSubmit,\n          render: this.renderFormComponent\n        }));\n      };\n\n      C.displayName = \"WithFormik(\" + componentDisplayName + \")\";\n      return C;\n    }(Component);\n\n    return hoistNonReactStatics(C, Component$$1);\n  };\n}\n\nvar move = function (array, from, to) {\n  var copy = (array || []).slice();\n  var value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\nvar swap = function (array, indexA, indexB) {\n  var copy = (array || []).slice();\n  var a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\nvar insert = function (array, index, value) {\n  var copy = (array || []).slice();\n  copy.splice(index, 0, value);\n  return copy;\n};\nvar replace = function (array, index, value) {\n  var copy = (array || []).slice();\n  copy[index] = value;\n  return copy;\n};\n\nvar FieldArrayInner =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(FieldArrayInner, _super);\n\n  function FieldArrayInner(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.updateArrayField = function (fn, alterTouched, alterErrors) {\n      var _a = _this.props,\n          name = _a.name,\n          validateOnChange = _a.validateOnChange,\n          _b = _a.formik,\n          setFormikState = _b.setFormikState,\n          validateForm = _b.validateForm;\n      setFormikState(function (prevState) {\n        var updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\n        var updateTouched = typeof alterTouched === 'function' ? alterTouched : fn;\n        return __assign({}, prevState, {\n          values: setIn(prevState.values, name, fn(getIn(prevState.values, name))),\n          errors: alterErrors ? setIn(prevState.errors, name, updateErrors(getIn(prevState.errors, name))) : prevState.errors,\n          touched: alterTouched ? setIn(prevState.touched, name, updateTouched(getIn(prevState.touched, name))) : prevState.touched\n        });\n      }, function () {\n        if (validateOnChange) {\n          validateForm();\n        }\n      });\n    };\n\n    _this.push = function (value) {\n      return _this.updateArrayField(function (array) {\n        return (array || []).concat([cloneDeep(value)]);\n      }, false, false);\n    };\n\n    _this.handlePush = function (value) {\n      return function () {\n        return _this.push(value);\n      };\n    };\n\n    _this.swap = function (indexA, indexB) {\n      return _this.updateArrayField(function (array) {\n        return swap(array, indexA, indexB);\n      }, true, true);\n    };\n\n    _this.handleSwap = function (indexA, indexB) {\n      return function () {\n        return _this.swap(indexA, indexB);\n      };\n    };\n\n    _this.move = function (from, to) {\n      return _this.updateArrayField(function (array) {\n        return move(array, from, to);\n      }, true, true);\n    };\n\n    _this.handleMove = function (from, to) {\n      return function () {\n        return _this.move(from, to);\n      };\n    };\n\n    _this.insert = function (index, value) {\n      return _this.updateArrayField(function (array) {\n        return insert(array, index, value);\n      }, function (array) {\n        return insert(array, index, null);\n      }, function (array) {\n        return insert(array, index, null);\n      });\n    };\n\n    _this.handleInsert = function (index, value) {\n      return function () {\n        return _this.insert(index, value);\n      };\n    };\n\n    _this.replace = function (index, value) {\n      return _this.updateArrayField(function (array) {\n        return replace(array, index, value);\n      }, false, false);\n    };\n\n    _this.handleReplace = function (index, value) {\n      return function () {\n        return _this.replace(index, value);\n      };\n    };\n\n    _this.unshift = function (value) {\n      var length = -1;\n\n      _this.updateArrayField(function (array) {\n        var arr = array ? [value].concat(array) : [value];\n\n        if (length < 0) {\n          length = arr.length;\n        }\n\n        return arr;\n      }, function (array) {\n        var arr = array ? [null].concat(array) : [null];\n        if (length < 0) length = arr.length;\n        return arr;\n      }, function (array) {\n        var arr = array ? [null].concat(array) : [null];\n        if (length < 0) length = arr.length;\n        return arr;\n      });\n\n      return length;\n    };\n\n    _this.handleUnshift = function (value) {\n      return function () {\n        return _this.unshift(value);\n      };\n    };\n\n    _this.handleRemove = function (index) {\n      return function () {\n        return _this.remove(index);\n      };\n    };\n\n    _this.handlePop = function () {\n      return function () {\n        return _this.pop();\n      };\n    };\n\n    _this.remove = _this.remove.bind(_this);\n    _this.pop = _this.pop.bind(_this);\n    return _this;\n  }\n\n  FieldArrayInner.prototype.remove = function (index) {\n    var result;\n    this.updateArrayField(function (array) {\n      var copy = array ? array.slice() : [];\n\n      if (!result) {\n        result = copy[index];\n      }\n\n      if (isFunction(copy.splice)) {\n        copy.splice(index, 1);\n      }\n\n      return copy;\n    }, true, true);\n    return result;\n  };\n\n  FieldArrayInner.prototype.pop = function () {\n    var result;\n    this.updateArrayField(function (array) {\n      var tmp = array;\n\n      if (!result) {\n        result = tmp && tmp.pop && tmp.pop();\n      }\n\n      return tmp;\n    }, true, true);\n    return result;\n  };\n\n  FieldArrayInner.prototype.render = function () {\n    var arrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove\n    };\n\n    var _a = this.props,\n        component = _a.component,\n        render = _a.render,\n        children = _a.children,\n        name = _a.name,\n        _b = _a.formik,\n        _validate = _b.validate,\n        _validationSchema = _b.validationSchema,\n        restOfFormik = __rest(_b, [\"validate\", \"validationSchema\"]);\n\n    var props = __assign({}, arrayHelpers, {\n      form: restOfFormik,\n      name: name\n    });\n\n    return component ? createElement(component, props) : render ? render(props) : children ? typeof children === 'function' ? children(props) : !isEmptyChildren(children) ? Children.only(children) : null : null;\n  };\n\n  FieldArrayInner.defaultProps = {\n    validateOnChange: true\n  };\n  return FieldArrayInner;\n}(Component);\n\nvar FieldArray =\n/*#__PURE__*/\nconnect(FieldArrayInner);\n\nvar FastFieldInner =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(FastFieldInner, _super);\n\n  function FastFieldInner(props) {\n    var _this = _super.call(this, props) || this;\n\n    var render = props.render,\n        children = props.children,\n        component = props.component;\n    process.env.NODE_ENV !== \"production\" ? warning(!(component && render), 'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!(component && children && isFunction(children)), 'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!(render && children && !isEmptyChildren(children)), 'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored') : void 0;\n    return _this;\n  }\n\n  FastFieldInner.prototype.shouldComponentUpdate = function (props) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props, this.props);\n    } else if (getIn(this.props.formik.values, this.props.name) !== getIn(props.formik.values, this.props.name) || getIn(this.props.formik.errors, this.props.name) !== getIn(props.formik.errors, this.props.name) || getIn(this.props.formik.touched, this.props.name) !== getIn(props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length || this.props.formik.isSubmitting !== props.formik.isSubmitting) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  FastFieldInner.prototype.componentDidMount = function () {\n    this.props.formik.registerField(this.props.name, this);\n  };\n\n  FastFieldInner.prototype.componentDidUpdate = function (prevProps) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, this);\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, this);\n    }\n  };\n\n  FastFieldInner.prototype.componentWillUnmount = function () {\n    this.props.formik.unregisterField(this.props.name);\n  };\n\n  FastFieldInner.prototype.render = function () {\n    var _a = this.props,\n        validate = _a.validate,\n        name = _a.name,\n        render = _a.render,\n        children = _a.children,\n        _b = _a.component,\n        component = _b === void 0 ? 'input' : _b,\n        formik = _a.formik,\n        shouldUpdate = _a.shouldUpdate,\n        props = __rest(_a, [\"validate\", \"name\", \"render\", \"children\", \"component\", \"formik\", \"shouldUpdate\"]);\n\n    var _validate = formik.validate,\n        _validationSchema = formik.validationSchema,\n        restOfFormik = __rest(formik, [\"validate\", \"validationSchema\"]);\n\n    var field = {\n      value: props.type === 'radio' || props.type === 'checkbox' ? props.value : getIn(formik.values, name),\n      name: name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur\n    };\n    var bag = {\n      field: field,\n      form: restOfFormik\n    };\n\n    if (render) {\n      return render(bag);\n    }\n\n    if (isFunction(children)) {\n      return children(bag);\n    }\n\n    if (typeof component === 'string') {\n      var innerRef = props.innerRef,\n          rest = __rest(props, [\"innerRef\"]);\n\n      return createElement(component, __assign({\n        ref: innerRef\n      }, field, rest, {\n        children: children\n      }));\n    }\n\n    return createElement(component, __assign({}, bag, props, {\n      children: children\n    }));\n  };\n\n  return FastFieldInner;\n}(Component);\n\nvar FastField =\n/*#__PURE__*/\nconnect(FastFieldInner);\n\nvar ErrorMessageImpl =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(ErrorMessageImpl, _super);\n\n  function ErrorMessageImpl() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ErrorMessageImpl.prototype.shouldComponentUpdate = function (props) {\n    if (getIn(this.props.formik.errors, this.props.name) !== getIn(props.formik.errors, this.props.name) || getIn(this.props.formik.touched, this.props.name) !== getIn(props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  ErrorMessageImpl.prototype.render = function () {\n    var _a = this.props,\n        component = _a.component,\n        formik = _a.formik,\n        render = _a.render,\n        children = _a.children,\n        name = _a.name,\n        rest = __rest(_a, [\"component\", \"formik\", \"render\", \"children\", \"name\"]);\n\n    var touch = getIn(formik.touched, name);\n    var error = getIn(formik.errors, name);\n    return !!touch && !!error ? render ? isFunction(render) ? render(error) : null : children ? isFunction(children) ? children(error) : null : component ? createElement(component, rest, error) : error : null;\n  };\n\n  return ErrorMessageImpl;\n}(Component);\n\nvar ErrorMessage =\n/*#__PURE__*/\nconnect(ErrorMessageImpl);\n\nexport { Formik, yupToFormErrors, validateYupSchema, Field, Form, withFormik, move, swap, insert, replace, FieldArray, getIn, setIn, setNestedObjectValues, isFunction, isObject, isInteger, isString, isNaN, isEmptyChildren, isPromise, getActiveElement, makeCancelable, FastField, FormikProvider, FormikConsumer, connect, ErrorMessage };\n//# sourceMappingURL=formik.esm.js.map\n"],"sourceRoot":""}