/* eslint react-hooks/exhaustive-deps:0 */

import React, {useEffect, useState} from "react"
/* import {Route, NavLink} from "react-router-dom" */
import {session} from "brownies"
import {useQuery} from "react-apollo-hooks"

import Grid from "@material-ui/core/Grid"
/* import Link from "@material-ui/core/Link" */
/* import List from "@material-ui/core/List" */
/* import ListItem from "@material-ui/core/ListItem" */
/* import ListItemText from "@material-ui/core/ListItemText" */
import MaterialTable from "material-table"
import Typography from "@material-ui/core/Typography"
import {withStyles} from "@material-ui/core/styles"

/* import {SvgIconProps} from "@material-ui/core/SvgIcon" */
import Add from "@material-ui/icons/Add"
import Check from "@material-ui/icons/Check"
import Clear from "@material-ui/icons/Clear"
import ChevronLeft from "@material-ui/icons/ChevronLeft"
import ChevronRight from "@material-ui/icons/ChevronRight"
import Delete from "@material-ui/icons/Delete"
import FilterList from "@material-ui/icons/FilterList"
import FirstPage from "@material-ui/icons/FirstPage"
import LastPage from "@material-ui/icons/LastPage"
import Remove from "@material-ui/icons/Remove"
import SaveAlt from "@material-ui/icons/SaveAlt"
import Search from "@material-ui/icons/Search"
import ViewColumn from "@material-ui/icons/ViewColumn"

import {getLevels} from "../xhr.js"

/* import styled from "styled-components" */
/* import cloneDeep from "lodash/cloneDeep" */
/* import {Can, Spacer} from "../../../components" */
import {LayoutLoader} from "../../../components"

/* const getCourse = gql` */
/*   query getCourse($_id: ID!) { */
/*     getCourse(_id: $_id) { */
/*       _id */
/*       courseImage */
/*       title */
/*       courseMode */
/*       owner { */
/*         username */
/*       } */
/*     } */
/*   } */
/* ` */

/* const StyledNavLink = styled(NavLink)` */
/*   grid-area: ${props => props.gridarea}; */
/*   color: #003478; */
/*   &:hover { */
/*     color: red; */
/*     text-decoration: underline; */
/*   } */
/* ` */
const drawerWidth = 240

const styles = theme => ({
  content: {
    alignItems: "center",
    display: "flex",
    flexGrow: 1,
    justifyContent: "center",
    padding: theme.spacing.unit * 3
  },
  drawer: {
    width: drawerWidth,
    flexShrink: 0
  },
  drawerPaper: {
    width: drawerWidth
  },
  heroUnit: {
    backgroundColor: theme.palette.background.paper
  },
  heroContent: {
    margin: "0 auto",
    padding: `${theme.spacing.unit * 8}px 0 ${theme.spacing.unit * 6}px`
  },
  list: {
    margin: "0 auto"
  },
  root: {
    width: "100%"
  }
})

const LevelsUpdate = props => {
  const {course} = session
  const {classes} = props
  const [state, changeState] = useState({
    data: []
  })

  const handleSubmit = async e => {
    e.preventDefault()

    // reset errors
    /* const resetErrors = handleChange({ */
    /*   ...state, */
    /*   formErrors: { */
    /*     errors: [] */
    /*   } */
    /* }) */

    /* const yupCheck = await courseSchema.validate(state).catch(err => { */
    /*   if (err) { */
    /*     console.log("err: ", err) */
    /*     handleChange({ */
    /*       ...state, */
    /*       formErrors: { */
    /*         errors: err */
    /*       } */
    /*     }) */
    /*     console.log("state: ", state) */
    /*     return err */
    /*   } */
    /* }) */
    /* if (isEmpty(yupCheck.errors)) { */
    /*   handleChange({ */
    /*     ...state, */
    /*     loading: true */
    /*   }) */
    /*   const updatedCourse = await props.client.mutate({ */
    /*     mutation: COURSE_UPDATE, */
    /*     variables: { */
    /*       _id: state.courseId, */
    /*       title: state.title, */
    /*       courseDescription: state.courseDescription */
    /*     } */
    /*   }) */
    /*   if (updatedCourse) { */
    /*     console.log("updated: ", updatedCourse) */
    /*     session.course = updatedCourse.data.courseUpdate */
    /*     // TODO:  toastify & make loading button work on save */
    /*     toast.success("Your changes were saved.", { */
    /*       className: "toasty", */
    /*       bodyClassName: "toasty-body", */
    /*       hideProgressBar: true */
    /*     }) */
    /*   } */

    /*   handleChange({ */
    /*     ...state, */
    /*     formErrors: { */
    /*       errors: ["hi"] */
    /*     }, */
    /*     loading: false */
    /*   }) */
    /* } */
  }

  const {data, error, loading} = useQuery(getLevels, {
    variables: {
      courseId: course._id
    }
  })

  useEffect(
    () => {
      const onCompleted = data => {
        changeState({
          ...state,
          data: data.getLevels.levels
        })
      }
      const onError = error => {
        return (
          <Grid>
            <pre>
              {error.graphQLErrors.map(({message}, i) => (
                <p
                  style={{
                    fontSize: "1em",
                    color: "red",
                    margin: "30px",
                    padding: "30px",
                    textAlign: "center"
                  }}
                  key={i}>
                  {message}
                </p>
              ))}
            </pre>
          </Grid>
        )
      }
      if (onCompleted || onError) {
        if (onCompleted && !loading && !error) {
          onCompleted(data)
        } else if (onError && !loading && error) {
          onError(error)
        }
      }
    },
    [loading, data, error]
  )

  if (loading) {
    return <LayoutLoader />
  }

  /* if (error) */
  /*   return ( */
  /*     <Grid> */
  /*       <pre> */
  /*         {error.graphQLErrors.map(({message}, i) => ( */
  /*           <p */
  /*             style={{ */
  /*               fontSize: "1em", */
  /*               color: "red", */
  /*               margin: "30px", */
  /*               padding: "30px", */
  /*               textAlign: "center" */
  /*             }} */
  /*             key={i}> */
  /*             {message} */
  /*           </p> */
  /*         ))} */
  /*       </pre> */
  /*     </Grid> */
  /*   ) */
  console.log("data: ", data)
  console.log("state: ", state.data)

  return (
    <form className={classes.root} onSubmit={handleSubmit}>
      <div className={classes.heroUnit}>
        <div className={classes.heroContent}>
          <Grid container justify="center" direction="column">
            <Typography variant="h4" align="center" gutterBottom>
              Course Levels
            </Typography>
          </Grid>
        </div>
      </div>
      <main className={classes.content}>
        <Grid container spacing={24}>
          <Grid
            item
            xs={12}
            style={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center"
            }}
          />
          <Grid item xs={12} align="center">
            <div style={{maxWidth: "100%"}}>
              <MaterialTable
                icons={{
                  Add: () => <Add />,
                  Check: () => <Check />,
                  Clear: () => <Clear />,
                  Delete: () => <Delete />,
                  Export: () => <SaveAlt />,
                  Filter: () => <FilterList />,
                  FirstPage: () => <FirstPage />,
                  LastPage: () => <LastPage />,
                  NextPage: () => <ChevronRight />,
                  PreviousPage: () => <ChevronLeft />,
                  Search: () => <Search />,
                  ThirdStateCheck: () => <Remove />,
                  ViewColumn: () => <ViewColumn />,
                  DetailPanel: () => <ChevronRight />
                }}
                columns={[
                  {title: "level", field: "level"},
                  {title: "title", field: "title"}
                ]}
                data={state.data}
                actions={[
                  {
                    icon: () => <Check />,
                    tooltip: "Edit Level",
                    onClick: (event, rowData) => {
                      alert("Accept level: " + rowData.level)
                    }
                  },
                  rowData => ({
                    icon: () => <Delete />,
                    tooltip: "Delete Level",
                    disabled: rowData.birthYear >= 2000,
                    onClick: (event, rowData) => {
                      alert("Delete level: " + rowData.level)
                    }
                  })
                ]}
                options={{
                  actionsColumnIndex: -1
                }}
                editable={{
                  onRowAdd: newData =>
                    new Promise((resolve, reject) => {
                      setTimeout(() => {
                        console.log("newData: ", newData)
                        console.log("reject: ", reject)
                        console.log("useState: ", useState)
                        console.log("changeState: ", changeState)
                        console.log("state.data: ", state.data)
                        const {data} = state
                        data.push(newData)
                        changeState({...state, data})
                        resolve(state.data)
                      }, 1000)
                    })
                }}
              />
            </div>
          </Grid>
        </Grid>
      </main>
    </form>
  )
}

export default withStyles(styles)(LevelsUpdate)
