{"id":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","dependencies":[{"name":"/var/www/html/utter/node_modules/redux-crud/package.json","includedInParent":true,"mtime":1536167833977},{"name":"/var/www/html/utter/package.json","includedInParent":true,"mtime":1537713411456},{"name":"/var/www/html/utter/.babelrc","includedInParent":true,"mtime":1537642482682},{"name":"ramda/src/indexBy","loc":{"line":3,"column":22},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/map/fetch/success.js","resolved":"/var/www/html/utter/node_modules/ramda/src/indexBy.js"},{"name":"ramda/src/prop","loc":{"line":4,"column":19},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/map/fetch/success.js","resolved":"/var/www/html/utter/node_modules/ramda/src/prop.js"},{"name":"ramda/src/merge","loc":{"line":5,"column":20},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/map/fetch/success.js","resolved":"/var/www/html/utter/node_modules/ramda/src/merge.js"},{"name":"../../../utils/assertAllHaveKeys","loc":{"line":6,"column":34},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/map/fetch/success.js","resolved":"/var/www/html/utter/node_modules/redux-crud/dist/utils/assertAllHaveKeys.js"},{"name":"../../../constants","loc":{"line":7,"column":26},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/map/fetch/success.js","resolved":"/var/www/html/utter/node_modules/redux-crud/dist/constants.js"},{"name":"../invariants","loc":{"line":8,"column":27},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/map/fetch/success.js","resolved":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/map/invariants.js"},{"name":"../../../utils/wrapArray","loc":{"line":9,"column":26},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/map/fetch/success.js","resolved":"/var/www/html/utter/node_modules/redux-crud/dist/utils/wrapArray.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar indexBy = require(\"ramda/src/indexBy\");\nvar prop = require(\"ramda/src/prop\");\nvar merge = require(\"ramda/src/merge\");\nvar assertAllHaveKeys_1 = require(\"../../../utils/assertAllHaveKeys\");\nvar constants_1 = require(\"../../../constants\");\nvar invariants_1 = require(\"../invariants\");\nvar wrapArray_1 = require(\"../../../utils/wrapArray\");\nvar reducerName = constants_1.default.REDUCER_NAMES.FETCH_SUCCESS;\nvar invariantArgs = {\n    reducerName: reducerName,\n    canBeArray: true\n};\nfunction success(config, current, records, emptyState, replace) {\n    if (replace === void 0) { replace = false; }\n    invariants_1.default(invariantArgs, config, current, records);\n    // wrap array\n    records = wrapArray_1.default(records);\n    // All given records must have a key\n    assertAllHaveKeys_1.default(config, reducerName, records);\n    var mergeValues = indexBy(prop(config.key), records);\n    return merge(replace ? emptyState : current, mergeValues);\n}\nexports.default = success;\n","map":{"mappings":[{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}}],"sources":{"../../node_modules/redux-crud/dist/reducers/map/fetch/success.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar indexBy = require(\"ramda/src/indexBy\");\nvar prop = require(\"ramda/src/prop\");\nvar merge = require(\"ramda/src/merge\");\nvar assertAllHaveKeys_1 = require(\"../../../utils/assertAllHaveKeys\");\nvar constants_1 = require(\"../../../constants\");\nvar invariants_1 = require(\"../invariants\");\nvar wrapArray_1 = require(\"../../../utils/wrapArray\");\nvar reducerName = constants_1.default.REDUCER_NAMES.FETCH_SUCCESS;\nvar invariantArgs = {\n    reducerName: reducerName,\n    canBeArray: true\n};\nfunction success(config, current, records, emptyState, replace) {\n    if (replace === void 0) { replace = false; }\n    invariants_1.default(invariantArgs, config, current, records);\n    // wrap array\n    records = wrapArray_1.default(records);\n    // All given records must have a key\n    assertAllHaveKeys_1.default(config, reducerName, records);\n    var mergeValues = indexBy(prop(config.key), records);\n    return merge(replace ? emptyState : current, mergeValues);\n}\nexports.default = success;\n"},"lineCount":26}},"hash":"e78522b3292126095471ba853d9eb851","cacheData":{"env":{}}}