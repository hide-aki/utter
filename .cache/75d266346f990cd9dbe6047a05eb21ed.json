{"id":"../../node_modules/redux-orm/lib/redux.js","dependencies":[{"name":"/var/www/html/utter/node_modules/redux-orm/package.json","includedInParent":true,"mtime":1536167834089},{"name":"/var/www/html/utter/package.json","includedInParent":true,"mtime":1537713411456},{"name":"/var/www/html/utter/.babelrc","includedInParent":true,"mtime":1537642482682},{"name":"/var/www/html/utter/node_modules/redux-orm/.babelrc","includedInParent":true,"mtime":1536167834089},{"name":"reselect","loc":{"line":10,"column":24},"parent":"/var/www/html/utter/node_modules/redux-orm/lib/redux.js","resolved":"/var/www/html/utter/node_modules/redux-orm/node_modules/reselect/lib/index.js"},{"name":"./memoize","loc":{"line":12,"column":23},"parent":"/var/www/html/utter/node_modules/redux-orm/lib/redux.js","resolved":"/var/www/html/utter/node_modules/redux-orm/lib/memoize.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createReducer = undefined;\nexports.defaultUpdater = defaultUpdater;\nexports.createSelector = createSelector;\n\nvar _reselect = require('reselect');\n\nvar _memoize = require('./memoize');\n\nfunction defaultUpdater(session, action) {\n    session.sessionBoundModels.forEach(function (modelClass) {\n        if (typeof modelClass.reducer === 'function') {\n            // This calls this.applyUpdate to update this.state\n            modelClass.reducer(action, modelClass, session);\n        }\n    });\n}\n\nvar createReducer = exports.createReducer = function createReducer(orm) {\n    var updater = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultUpdater;\n    return function (state, action) {\n        var session = orm.session(state || orm.getEmptyState());\n        updater(session, action);\n        return session.state;\n    };\n};\n\n/**\n * Returns a memoized selector based on passed arguments.\n * This is similar to `reselect`'s `createSelector`,\n * except you can also pass a single function to be memoized.\n *\n * If you pass multiple functions, the format will be the\n * same as in `reselect`. The last argument is the selector\n * function and the previous are input selectors.\n *\n * When you use this method to create a selector, the returned selector\n * expects the whole `redux-orm` state branch as input. In the selector\n * function that you pass as the last argument, you will receive\n * `session` argument (a `Session` instance) followed by any\n * input arguments, like in `reselect`.\n *\n * This is an example selector:\n *\n * ```javascript\n * // orm is an instance of ORM\n * const bookSelector = createSelector(orm, session => {\n *     return session.Book.map(book => {\n *         return Object.assign({}, book.ref, {\n *             authors: book.authors.map(author => author.name),\n *             genres: book.genres.map(genre => genre.name),\n *         });\n *     });\n * });\n * ```\n *\n * redux-orm uses a special memoization function to avoid recomputations.\n * When a selector runs for the first time, it checks which Models' state\n * branches were accessed. On subsequent runs, the selector first checks\n * if those branches have changed -- if not, it just returns the previous\n * result. This way you can use the `PureRenderMixin` in your React\n * components for performance gains.\n *\n * @param {ORM} orm - the ORM instance\n * @param  {...Function} args - zero or more input selectors\n *                              and the selector function.\n * @return {Function} memoized selector\n */\nfunction createSelector(orm) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n    }\n\n    if (args.length === 1) {\n        return (0, _memoize.memoize)(args[0], _memoize.eqCheck, orm);\n    }\n\n    return (0, _reselect.createSelectorCreator)(_memoize.memoize, _memoize.eqCheck, orm).apply(undefined, args);\n}","map":{"mappings":[{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/redux-orm/lib/redux.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}}],"sources":{"../../node_modules/redux-orm/lib/redux.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createReducer = undefined;\nexports.defaultUpdater = defaultUpdater;\nexports.createSelector = createSelector;\n\nvar _reselect = require('reselect');\n\nvar _memoize = require('./memoize');\n\nfunction defaultUpdater(session, action) {\n    session.sessionBoundModels.forEach(function (modelClass) {\n        if (typeof modelClass.reducer === 'function') {\n            // This calls this.applyUpdate to update this.state\n            modelClass.reducer(action, modelClass, session);\n        }\n    });\n}\n\nvar createReducer = exports.createReducer = function createReducer(orm) {\n    var updater = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultUpdater;\n    return function (state, action) {\n        var session = orm.session(state || orm.getEmptyState());\n        updater(session, action);\n        return session.state;\n    };\n};\n\n/**\n * Returns a memoized selector based on passed arguments.\n * This is similar to `reselect`'s `createSelector`,\n * except you can also pass a single function to be memoized.\n *\n * If you pass multiple functions, the format will be the\n * same as in `reselect`. The last argument is the selector\n * function and the previous are input selectors.\n *\n * When you use this method to create a selector, the returned selector\n * expects the whole `redux-orm` state branch as input. In the selector\n * function that you pass as the last argument, you will receive\n * `session` argument (a `Session` instance) followed by any\n * input arguments, like in `reselect`.\n *\n * This is an example selector:\n *\n * ```javascript\n * // orm is an instance of ORM\n * const bookSelector = createSelector(orm, session => {\n *     return session.Book.map(book => {\n *         return Object.assign({}, book.ref, {\n *             authors: book.authors.map(author => author.name),\n *             genres: book.genres.map(genre => genre.name),\n *         });\n *     });\n * });\n * ```\n *\n * redux-orm uses a special memoization function to avoid recomputations.\n * When a selector runs for the first time, it checks which Models' state\n * branches were accessed. On subsequent runs, the selector first checks\n * if those branches have changed -- if not, it just returns the previous\n * result. This way you can use the `PureRenderMixin` in your React\n * components for performance gains.\n *\n * @param {ORM} orm - the ORM instance\n * @param  {...Function} args - zero or more input selectors\n *                              and the selector function.\n * @return {Function} memoized selector\n */\nfunction createSelector(orm) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n    }\n\n    if (args.length === 1) {\n        return (0, _memoize.memoize)(args[0], _memoize.eqCheck, orm);\n    }\n\n    return (0, _reselect.createSelectorCreator)(_memoize.memoize, _memoize.eqCheck, orm).apply(undefined, args);\n}"},"lineCount":83}},"hash":"90ba41eb10a1e5800e2d43b1fce8c37c","cacheData":{"env":{}}}