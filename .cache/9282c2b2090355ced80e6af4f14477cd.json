{"id":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","dependencies":[{"name":"/var/www/html/utter/node_modules/redux-crud/package.json","includedInParent":true,"mtime":1536167833977},{"name":"/var/www/html/utter/package.json","includedInParent":true,"mtime":1537713411456},{"name":"/var/www/html/utter/.babelrc","includedInParent":true,"mtime":1537642482682},{"name":"ramda/src/merge","loc":{"line":3,"column":20},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/common/reducersFor.js","resolved":"/var/www/html/utter/node_modules/ramda/src/merge.js"},{"name":"../../actionTypesFor","loc":{"line":4,"column":31},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/common/reducersFor.js","resolved":"/var/www/html/utter/node_modules/redux-crud/dist/actionTypesFor.js"},{"name":"../../constants","loc":{"line":5,"column":26},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/common/reducersFor.js","resolved":"/var/www/html/utter/node_modules/redux-crud/dist/constants.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar merge = require(\"ramda/src/merge\");\nvar actionTypesFor_1 = require(\"../../actionTypesFor\");\nvar constants_1 = require(\"../../constants\");\nfunction reducersFor(resourceName, args, emptyState, reducers) {\n    if (args === void 0) { args = {}; }\n    if (resourceName == null)\n        throw new Error(\"reducersFor: Expected resourceName\");\n    var defaults = {\n        key: constants_1.default.DEFAULT_KEY,\n        resourceName: resourceName\n    };\n    var config = merge(defaults, args);\n    return function getReducer(state, action) {\n        state = state || emptyState;\n        if (action == null)\n            throw new Error(resourceName + \" reducers: Expected action\");\n        var actionTypes = actionTypesFor_1.default(resourceName);\n        var record = action.record;\n        switch (action.type) {\n            case actionTypes.fetchSuccess:\n                return reducers.fetchSuccess(config, state, action.records, emptyState, action.data && action.data.replace);\n            case actionTypes.createStart:\n                return reducers.createStart(config, state, record);\n            case actionTypes.createSuccess:\n                return reducers.createSuccess(config, state, record, action.cid);\n            case actionTypes.createError:\n                return reducers.createError(config, state, record);\n            case actionTypes.updateStart:\n                return reducers.updateStart(config, state, record);\n            case actionTypes.updateSuccess:\n                return reducers.updateSuccess(config, state, record);\n            case actionTypes.updateError:\n                return reducers.updateError(config, state, record);\n            case actionTypes.deleteStart:\n                return reducers.deleteStart(config, state, record);\n            case actionTypes.deleteSuccess:\n                return reducers.deleteSuccess(config, state, record);\n            case actionTypes.deleteError:\n                return reducers.deleteError(config, state, record);\n            default:\n                return state;\n        }\n    };\n}\nexports.default = reducersFor;\n","map":{"mappings":[{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}}],"sources":{"../../node_modules/redux-crud/dist/reducers/common/reducersFor.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar merge = require(\"ramda/src/merge\");\nvar actionTypesFor_1 = require(\"../../actionTypesFor\");\nvar constants_1 = require(\"../../constants\");\nfunction reducersFor(resourceName, args, emptyState, reducers) {\n    if (args === void 0) { args = {}; }\n    if (resourceName == null)\n        throw new Error(\"reducersFor: Expected resourceName\");\n    var defaults = {\n        key: constants_1.default.DEFAULT_KEY,\n        resourceName: resourceName\n    };\n    var config = merge(defaults, args);\n    return function getReducer(state, action) {\n        state = state || emptyState;\n        if (action == null)\n            throw new Error(resourceName + \" reducers: Expected action\");\n        var actionTypes = actionTypesFor_1.default(resourceName);\n        var record = action.record;\n        switch (action.type) {\n            case actionTypes.fetchSuccess:\n                return reducers.fetchSuccess(config, state, action.records, emptyState, action.data && action.data.replace);\n            case actionTypes.createStart:\n                return reducers.createStart(config, state, record);\n            case actionTypes.createSuccess:\n                return reducers.createSuccess(config, state, record, action.cid);\n            case actionTypes.createError:\n                return reducers.createError(config, state, record);\n            case actionTypes.updateStart:\n                return reducers.updateStart(config, state, record);\n            case actionTypes.updateSuccess:\n                return reducers.updateSuccess(config, state, record);\n            case actionTypes.updateError:\n                return reducers.updateError(config, state, record);\n            case actionTypes.deleteStart:\n                return reducers.deleteStart(config, state, record);\n            case actionTypes.deleteSuccess:\n                return reducers.deleteSuccess(config, state, record);\n            case actionTypes.deleteError:\n                return reducers.deleteError(config, state, record);\n            default:\n                return state;\n        }\n    };\n}\nexports.default = reducersFor;\n"},"lineCount":48}},"hash":"87e41caf36a3397a2236ff9f499ed6ca","cacheData":{"env":{}}}