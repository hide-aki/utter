{"id":"../../node_modules/redux-orm/lib/memoize.js","dependencies":[{"name":"/var/www/html/utter/node_modules/redux-orm/package.json","includedInParent":true,"mtime":1536167834089},{"name":"/var/www/html/utter/package.json","includedInParent":true,"mtime":1537713411456},{"name":"/var/www/html/utter/.babelrc","includedInParent":true,"mtime":1537642482682},{"name":"/var/www/html/utter/node_modules/redux-orm/.babelrc","includedInParent":true,"mtime":1536167834089},{"name":"babel-runtime/helpers/toConsumableArray","loc":{"line":7,"column":34},"parent":"/var/www/html/utter/node_modules/redux-orm/lib/memoize.js","resolved":"/var/www/html/utter/node_modules/babel-runtime/helpers/toConsumableArray.js"},{"name":"lodash/values","loc":{"line":14,"column":22},"parent":"/var/www/html/utter/node_modules/redux-orm/lib/memoize.js","resolved":"/var/www/html/utter/node_modules/lodash/values.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nexports.eqCheck = eqCheck;\nexports.memoize = memoize;\n\nvar _values = require('lodash/values');\n\nvar _values2 = _interopRequireDefault(_values);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction eqCheck(a, b) {\n    return a === b;\n}\n\nfunction shouldRun(invalidatorMap, state) {\n    return (0, _values2.default)(invalidatorMap).some(function (invalidate) {\n        return invalidate(state);\n    });\n}\n\n/**\n * A memoizer to use with redux-orm\n * selectors. When the memoized function is first run,\n * the memoizer will remember the models that are accessed\n * during that function run.\n *\n * On subsequent runs, the memoizer will check if those\n * models' states have changed compared to the previous run.\n *\n * Memoization algorithm operates like this:\n *\n * 1. Has the selector been run before? If not, go to 5.\n *\n * 2. If the selector has other input selectors in addition to the\n *    ORM state selector, check their results for equality with the previous results.\n *    If they aren't equal, go to 5.\n *\n * 3. Is the ORM state referentially equal to the previous ORM state the selector\n *    was called with? If yes, return the previous result.\n *\n * 4. Check which Model's states the selector has accessed on previous runs.\n *    Check for equality with each of those states versus their states in the\n *    previous ORM state. If all of them are equal, return the previous result.\n *\n * 5. Run the selector. Check the Session object used by the selector for\n *    which Model's states were accessed, and merge them with the previously\n *    saved information about accessed models (if-else branching can change\n *    which models are accessed on different inputs). Save the ORM state and\n *    other arguments the selector was called with, overriding previously\n *    saved values. Save the selector result. Return the selector result.\n *\n * @private\n * @param  {Function} func - function to memoize\n * @param  {Function} equalityCheck - equality check function to use with normal\n *                                  selector args\n * @param  {ORM} orm - a redux-orm ORM instance\n * @return {Function} `func` memoized.\n */\nfunction memoize(func) {\n    var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : eqCheck;\n    var orm = arguments[2];\n\n    var lastOrmState = null;\n    var lastResult = null;\n    var lastArgs = null;\n    var modelNameToInvalidatorMap = {};\n\n    return function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        var dbState = args[0],\n            otherArgs = args.slice(1);\n\n\n        var dbIsEqual = lastOrmState === dbState || !shouldRun(modelNameToInvalidatorMap, dbState);\n\n        var argsAreEqual = lastArgs && otherArgs.every(function (value, index) {\n            return equalityCheck(value, lastArgs[index]);\n        });\n\n        if (dbIsEqual && argsAreEqual) {\n            return lastResult;\n        }\n\n        var session = orm.session(dbState);\n        var newArgs = [session].concat((0, _toConsumableArray3.default)(otherArgs));\n        var result = func.apply(undefined, (0, _toConsumableArray3.default)(newArgs));\n\n        // If a selector has control flow branching, different\n        // input arguments might result in a different set of\n        // accessed models. On each run, we check if any new\n        // models are accessed and add their invalidator functions.\n        session.accessedModels.forEach(function (modelName) {\n            if (!modelNameToInvalidatorMap.hasOwnProperty(modelName)) {\n                modelNameToInvalidatorMap[modelName] = function (nextState) {\n                    return lastOrmState[modelName] !== nextState[modelName];\n                };\n            }\n        });\n\n        lastResult = result;\n        lastOrmState = dbState;\n        lastArgs = otherArgs;\n\n        return lastResult;\n    };\n}","map":{"mappings":[{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../../node_modules/redux-orm/lib/memoize.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}}],"sources":{"../../node_modules/redux-orm/lib/memoize.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nexports.eqCheck = eqCheck;\nexports.memoize = memoize;\n\nvar _values = require('lodash/values');\n\nvar _values2 = _interopRequireDefault(_values);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction eqCheck(a, b) {\n    return a === b;\n}\n\nfunction shouldRun(invalidatorMap, state) {\n    return (0, _values2.default)(invalidatorMap).some(function (invalidate) {\n        return invalidate(state);\n    });\n}\n\n/**\n * A memoizer to use with redux-orm\n * selectors. When the memoized function is first run,\n * the memoizer will remember the models that are accessed\n * during that function run.\n *\n * On subsequent runs, the memoizer will check if those\n * models' states have changed compared to the previous run.\n *\n * Memoization algorithm operates like this:\n *\n * 1. Has the selector been run before? If not, go to 5.\n *\n * 2. If the selector has other input selectors in addition to the\n *    ORM state selector, check their results for equality with the previous results.\n *    If they aren't equal, go to 5.\n *\n * 3. Is the ORM state referentially equal to the previous ORM state the selector\n *    was called with? If yes, return the previous result.\n *\n * 4. Check which Model's states the selector has accessed on previous runs.\n *    Check for equality with each of those states versus their states in the\n *    previous ORM state. If all of them are equal, return the previous result.\n *\n * 5. Run the selector. Check the Session object used by the selector for\n *    which Model's states were accessed, and merge them with the previously\n *    saved information about accessed models (if-else branching can change\n *    which models are accessed on different inputs). Save the ORM state and\n *    other arguments the selector was called with, overriding previously\n *    saved values. Save the selector result. Return the selector result.\n *\n * @private\n * @param  {Function} func - function to memoize\n * @param  {Function} equalityCheck - equality check function to use with normal\n *                                  selector args\n * @param  {ORM} orm - a redux-orm ORM instance\n * @return {Function} `func` memoized.\n */\nfunction memoize(func) {\n    var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : eqCheck;\n    var orm = arguments[2];\n\n    var lastOrmState = null;\n    var lastResult = null;\n    var lastArgs = null;\n    var modelNameToInvalidatorMap = {};\n\n    return function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        var dbState = args[0],\n            otherArgs = args.slice(1);\n\n\n        var dbIsEqual = lastOrmState === dbState || !shouldRun(modelNameToInvalidatorMap, dbState);\n\n        var argsAreEqual = lastArgs && otherArgs.every(function (value, index) {\n            return equalityCheck(value, lastArgs[index]);\n        });\n\n        if (dbIsEqual && argsAreEqual) {\n            return lastResult;\n        }\n\n        var session = orm.session(dbState);\n        var newArgs = [session].concat((0, _toConsumableArray3.default)(otherArgs));\n        var result = func.apply(undefined, (0, _toConsumableArray3.default)(newArgs));\n\n        // If a selector has control flow branching, different\n        // input arguments might result in a different set of\n        // accessed models. On each run, we check if any new\n        // models are accessed and add their invalidator functions.\n        session.accessedModels.forEach(function (modelName) {\n            if (!modelNameToInvalidatorMap.hasOwnProperty(modelName)) {\n                modelNameToInvalidatorMap[modelName] = function (nextState) {\n                    return lastOrmState[modelName] !== nextState[modelName];\n                };\n            }\n        });\n\n        lastResult = result;\n        lastOrmState = dbState;\n        lastArgs = otherArgs;\n\n        return lastResult;\n    };\n}"},"lineCount":118}},"hash":"8fd4657eb7201fe50f34bce58cc9b608","cacheData":{"env":{}}}