{"id":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","dependencies":[{"name":"/var/www/html/utter/node_modules/immutable-ops/node_modules/ramda/package.json","includedInParent":true,"mtime":1536167834143},{"name":"/var/www/html/utter/package.json","includedInParent":true,"mtime":1537713411456},{"name":"/var/www/html/utter/.babelrc","includedInParent":true,"mtime":1537642482682},{"name":"./internal/_curry1","loc":{"line":1,"column":22},"parent":"/var/www/html/utter/node_modules/immutable-ops/node_modules/ramda/src/curry.js","resolved":"/var/www/html/utter/node_modules/immutable-ops/node_modules/ramda/src/internal/_curry1.js"},{"name":"./curryN","loc":{"line":2,"column":21},"parent":"/var/www/html/utter/node_modules/immutable-ops/node_modules/ramda/src/curry.js","resolved":"/var/www/html/utter/node_modules/immutable-ops/node_modules/ramda/src/curryN.js"}],"generated":{"js":"var _curry1 = require('./internal/_curry1');\nvar curryN = require('./curryN');\n\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value `R.__` may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n * following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN\n * @example\n *\n *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\n","map":{"mappings":[{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}}],"sources":{"../../node_modules/immutable-ops/node_modules/ramda/src/curry.js":"var _curry1 = require('./internal/_curry1');\nvar curryN = require('./curryN');\n\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value `R.__` may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n * following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN\n * @example\n *\n *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\n"},"lineCount":49}},"hash":"76150cff4096f4e816ad8350542a303d","cacheData":{"env":{}}}