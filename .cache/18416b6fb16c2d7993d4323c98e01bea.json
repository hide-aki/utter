{"id":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","dependencies":[{"name":"/var/www/html/utter/node_modules/redux-crud/package.json","includedInParent":true,"mtime":1536167833977},{"name":"/var/www/html/utter/package.json","includedInParent":true,"mtime":1537713411456},{"name":"/var/www/html/utter/.babelrc","includedInParent":true,"mtime":1537642482682},{"name":"ramda/src/dissoc","loc":{"line":3,"column":21},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/map/create/success.js","resolved":"/var/www/html/utter/node_modules/ramda/src/dissoc.js"},{"name":"ramda/src/lensProp","loc":{"line":4,"column":23},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/map/create/success.js","resolved":"/var/www/html/utter/node_modules/ramda/src/lensProp.js"},{"name":"ramda/src/set","loc":{"line":5,"column":18},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/map/create/success.js","resolved":"/var/www/html/utter/node_modules/ramda/src/set.js"},{"name":"../../../constants","loc":{"line":6,"column":26},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/map/create/success.js","resolved":"/var/www/html/utter/node_modules/redux-crud/dist/constants.js"},{"name":"../invariants","loc":{"line":7,"column":27},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/map/create/success.js","resolved":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/map/invariants.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar dissoc = require(\"ramda/src/dissoc\");\nvar lensProp = require(\"ramda/src/lensProp\");\nvar set = require(\"ramda/src/set\");\nvar constants_1 = require(\"../../../constants\");\nvar invariants_1 = require(\"../invariants\");\nvar reducerName = constants_1.default.REDUCER_NAMES.CREATE_SUCCESS;\nvar invariantArgs = {\n    reducerName: reducerName,\n    canBeArray: false\n};\nfunction success(config, current, addedRecord, clientGeneratedKey) {\n    invariants_1.default(invariantArgs, config, current, addedRecord);\n    var key = config.key;\n    var addedRecordKey = addedRecord[key];\n    var addedRecordKeyLens = lensProp(addedRecordKey);\n    var currentWithoutClientGeneratedKey = dissoc(clientGeneratedKey, current);\n    return set(addedRecordKeyLens, addedRecord, currentWithoutClientGeneratedKey);\n}\nexports.default = success;\n","map":{"mappings":[{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/map/create/success.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}}],"sources":{"../../node_modules/redux-crud/dist/reducers/map/create/success.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar dissoc = require(\"ramda/src/dissoc\");\nvar lensProp = require(\"ramda/src/lensProp\");\nvar set = require(\"ramda/src/set\");\nvar constants_1 = require(\"../../../constants\");\nvar invariants_1 = require(\"../invariants\");\nvar reducerName = constants_1.default.REDUCER_NAMES.CREATE_SUCCESS;\nvar invariantArgs = {\n    reducerName: reducerName,\n    canBeArray: false\n};\nfunction success(config, current, addedRecord, clientGeneratedKey) {\n    invariants_1.default(invariantArgs, config, current, addedRecord);\n    var key = config.key;\n    var addedRecordKey = addedRecord[key];\n    var addedRecordKeyLens = lensProp(addedRecordKey);\n    var currentWithoutClientGeneratedKey = dissoc(clientGeneratedKey, current);\n    return set(addedRecordKeyLens, addedRecord, currentWithoutClientGeneratedKey);\n}\nexports.default = success;\n"},"lineCount":22}},"hash":"4536954266866f999b42aa3ec38410c2","cacheData":{"env":{}}}