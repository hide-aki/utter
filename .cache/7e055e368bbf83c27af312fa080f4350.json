{"id":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","dependencies":[{"name":"/var/www/html/utter/node_modules/redux-crud/package.json","includedInParent":true,"mtime":1536167833977},{"name":"/var/www/html/utter/package.json","includedInParent":true,"mtime":1537713411456},{"name":"/var/www/html/utter/.babelrc","includedInParent":true,"mtime":1537642482682},{"name":"../../../constants","loc":{"line":3,"column":26},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/list/create/success.js","resolved":"/var/www/html/utter/node_modules/redux-crud/dist/constants.js"},{"name":"../invariants","loc":{"line":4,"column":27},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/list/create/success.js","resolved":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/list/invariants.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"../../../constants\");\nvar invariants_1 = require(\"../invariants\");\nvar reducerName = constants_1.default.REDUCER_NAMES.CREATE_SUCCESS;\nvar invariantArgs = {\n    reducerName: reducerName,\n    canBeArray: false\n};\nfunction success(config, current, addedRecord, clientGeneratedKey) {\n    invariants_1.default(invariantArgs, config, current, addedRecord);\n    var key = config.key;\n    var done = false;\n    // Update existing records\n    var updatedCollection = current.map(function (record) {\n        var recordKey = record[key];\n        if (recordKey == null)\n            throw new Error(\"Expected record to have \" + key);\n        var isSameKey = recordKey === addedRecord[key];\n        var isSameClientGetKey = clientGeneratedKey != null && clientGeneratedKey === recordKey;\n        if (isSameKey || isSameClientGetKey) {\n            done = true;\n            return addedRecord;\n        }\n        else {\n            return record;\n        }\n    });\n    // Add if not updated\n    if (!done) {\n        updatedCollection = updatedCollection.concat([addedRecord]);\n    }\n    return updatedCollection;\n}\nexports.default = success;\n","map":{"mappings":[{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/list/create/success.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}}],"sources":{"../../node_modules/redux-crud/dist/reducers/list/create/success.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"../../../constants\");\nvar invariants_1 = require(\"../invariants\");\nvar reducerName = constants_1.default.REDUCER_NAMES.CREATE_SUCCESS;\nvar invariantArgs = {\n    reducerName: reducerName,\n    canBeArray: false\n};\nfunction success(config, current, addedRecord, clientGeneratedKey) {\n    invariants_1.default(invariantArgs, config, current, addedRecord);\n    var key = config.key;\n    var done = false;\n    // Update existing records\n    var updatedCollection = current.map(function (record) {\n        var recordKey = record[key];\n        if (recordKey == null)\n            throw new Error(\"Expected record to have \" + key);\n        var isSameKey = recordKey === addedRecord[key];\n        var isSameClientGetKey = clientGeneratedKey != null && clientGeneratedKey === recordKey;\n        if (isSameKey || isSameClientGetKey) {\n            done = true;\n            return addedRecord;\n        }\n        else {\n            return record;\n        }\n    });\n    // Add if not updated\n    if (!done) {\n        updatedCollection = updatedCollection.concat([addedRecord]);\n    }\n    return updatedCollection;\n}\nexports.default = success;\n"},"lineCount":36}},"hash":"7f3d7765bf0ef6415c3f7d95bc3be7f3","cacheData":{"env":{}}}