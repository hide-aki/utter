{"id":"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","dependencies":[{"name":"/var/www/html/utter/node_modules/redux-crud/package.json","includedInParent":true,"mtime":1536167833977},{"name":"/var/www/html/utter/package.json","includedInParent":true,"mtime":1537713411456},{"name":"/var/www/html/utter/.babelrc","includedInParent":true,"mtime":1537642482682},{"name":"ramda/src/forEach","loc":{"line":3,"column":22},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","resolved":"/var/www/html/utter/node_modules/ramda/src/forEach.js"},{"name":"../../utils/wrapArray","loc":{"line":4,"column":26},"parent":"/var/www/html/utter/node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","resolved":"/var/www/html/utter/node_modules/redux-crud/dist/utils/wrapArray.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar forEach = require(\"ramda/src/forEach\");\nvar wrapArray_1 = require(\"../../utils/wrapArray\");\nfunction assertHasKey(config, scope, recordOrRecords) {\n    var key = config.key;\n    var records = wrapArray_1.default(recordOrRecords);\n    forEach(function (record) {\n        if (record[key] == null) {\n            throw new Error(scope + \": Expected record to have .\" + key);\n        }\n    })(records);\n}\nexports.default = assertHasKey;\n","map":{"mappings":[{"source":"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}}],"sources":{"../../node_modules/redux-crud/dist/reducers/invariants/assertHasKey.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar forEach = require(\"ramda/src/forEach\");\nvar wrapArray_1 = require(\"../../utils/wrapArray\");\nfunction assertHasKey(config, scope, recordOrRecords) {\n    var key = config.key;\n    var records = wrapArray_1.default(recordOrRecords);\n    forEach(function (record) {\n        if (record[key] == null) {\n            throw new Error(scope + \": Expected record to have .\" + key);\n        }\n    })(records);\n}\nexports.default = assertHasKey;\n"},"lineCount":15}},"hash":"12355f870f7020ef664e59285bb52267","cacheData":{"env":{}}}